[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "﻿\u003d Module Planner"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T16-4/main[image:https://travis-ci.org/CS2103-AY1819S1-T16-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/rongjiecomputer/main[image:https://ci.appveyor.com/api/projects/status/bh9l24v9mrpvixel?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T16-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T16-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"750\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "image::images/Ui.png[width\u003d\"750\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d About"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* This is a module planner application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* It allows a user to keep track of past modules, and list possible future modules based"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "  on the user’s academic requirements (for graduation, a minor etc)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* The target users for this product are Computer Science and Computer Engineering undergraduate students"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "  in the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* What this product does is to simplify the module planning process that every NUS student has to go through."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d Current way of planning modules"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "****"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "1. Go to an external site to check what modules one has to take."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "2. See which modules\u0027 pre-requisites have been fulfilled and are open for one to take."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "3. Choose some of those modules."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "4. Start planning for the next semester."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "5. Repeat (1) - (4) for any number of semesters."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "6. Wishes to remove some modules."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "7. Some modules planned now have their pre-requisites unfulfilled."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "8. Sighs in frustration."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "9. Repeat (8)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "****"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "So *tedious*."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d New way of planning modules"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "****"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "1. Input academic requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "2. Application lists possible modules to take based on academic commitments and module prerequisites."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "3. Choose some of those modules."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "4. Repeat (1) - (3) for any number of semesters."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "5. Wishes to remove some modules."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "6. Application removes modules which pre-requisites are not fulfilled and suggests new modules to take."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "****"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Much better!"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* The module planner is built on top of the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "  https://github.com/se-edu/addressbook-level4.git[AddressBook-Level4] project"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "  created by the SE-EDU initiative."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 33,
      "rongjiecomputer": 11,
      "-": 21,
      "Hilda-Ang": 9
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "      \"githubId\": \"Hilda-Ang\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        \"displayName\": \"HILDA...RAENI\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        \"authorNames\": [\"Hilda-Ang\", \"Hilda Anggraeni\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "      \"githubId\": \"rongjiecomputer\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "      \"displayName\": \"LOO R...G JIE\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"authorNames\": [\"rongjiecomputer\", \"Loo Rong Jie\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "      \"githubId\": \"RomaRomama\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "      \"displayName\": \"REZKY...PUTRA\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"authorNames\": [\"RomaRomama\", \"Rezky Arizaputra\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "      \"githubId\": \"GabrielYik\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "      \"displayName\": \"YIK R...BRIEL\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"authorNames\": [\"GabrielYik\", \"Gabriel Yik Ren Jun\", \"Gabriel Yik\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "Hilda-Ang": 22
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "mainClassName \u003d \u0027seedu.planner.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.9.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.9.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002721.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    archiveName \u003d \u0027moduleplanner.jar\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            test.include \u0027seedu/planner/**\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            test.include \u0027seedu/planner/ui/**\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            test.exclude \u0027seedu/planner/ui/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        \u0027site-name\u0027: \u0027Module Planner\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-T16-4/main\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        \u0027site-seedu\u0027: false,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 10,
      "-": 234
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Module Planner was developed by the https://cs2103-ay1819s1-t16-4.github.io/docs/Team.html[Project Team]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "shown below based on previous work of the https://se-edu.github.io/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Gabriel Yik"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "image::gabrielyik.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{empty} [https://github.com/GabrielYik[github]] [\u003c\u003cgabrielyik#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d Hilda Anggraeni"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "image::hilda-ang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{empty}[http://github.com/Hilda-Ang[github]] [\u003c\u003childa-ang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Responsibilities: Code Quality"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d Loo Rong Jie"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "image::rongjiecomputer.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{empty}[http://github.com/rongjiecomputer[github]] [\u003c\u003crongjiecomputer#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d Rezky Arizaputra"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "image::romaromama.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{empty}[http://github.com/RomaRomama[github]] [\u003c\u003cromaromama#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 4,
      "GabrielYik": 6,
      "rongjiecomputer": 10,
      "-": 31,
      "Hilda-Ang": 2
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-T16-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "﻿\u003d Module Planner - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T16-4/main/blob/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "By: `Team T16-4`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ". Run the `seedu.planner.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "After forking the repo, the documentation will still have the T16-4 branding and refer to the `CS2103-AY1818S1-T16-4/main` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-AY1818S1-T16-4/main`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "When you are ready to start coding, you can get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/planner/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete c/CS1010`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".Component interactions for `delete c/CS1010` command (part 1)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "image::DeleteModuleSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Note how the `Model` simply raises a `ModulePlannerChangedEvent` when the Module Planner data are changed,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "in the updates being saved to the hard disk and the status bar of the UI being updated to reflect"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".Component interactions for `delete c/CS1010` command (part 2)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "image::DeleteModuleEventHandlingSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "having to be coupled to either of them. This is an example of how this Event Driven approach helps us"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "reduce direct coupling between components."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/planner/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "`ResultDisplay`, `ModuleListPanel`, `StatusBarFooter`, `FindModulePanel` etc."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "`.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "link:{repoURL}/src/main/java/seedu/planner/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".  `Logic` uses the `ModulePlannerParser` class to parse the user command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a module) and/or raise events."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete c/CS1010\")` API call."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/planner/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* stores the Module Planner data."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cModule\u003e` that can be \u0027observed\u0027"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// tag::storage[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/planner/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* can save `UserPref` objects in JSON format and read it back."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* can save `ReadOnlyModulePlanner` object in JSON format and read it back."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".Interactions inside the Storage component for whenever `ModulePlannerChangedEvent` is fired."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "image::StorageSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// end::storage[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Classes used by multiple components are in the `seedu.planner.commons` package."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// tag::moduleinfo[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d Module and Academic Major Information"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Information about modules and academic majors supports almost all the features in Module Planner."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Information of a module such as module code, module credit and prerequisite modules are stored in `ModuleInfo` class."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "This class is made to be immutable to avoid accidental changes to the class."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview of components"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Internally, `ModuleInfo` is an immutable class that holds all the information of a module that is universal to"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "all students from any faculty. `MajorDescription` is an immutable class that holds information about the"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "requirements of an academic major."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".Class diagram for `ModuleInfo`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "image::ModuleInfoClassDiagram.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".Class diagram for `MajorDescription`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "image::MajorDescriptionClassDiagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d Simplifications"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "The real information about NUS modules are very complicated. Here we list down some simplifications we made in order"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "to create this proof of concept of our application."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Prerequisites and preclusion"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "IVLE provides the prerequisites and preclusions of a module in normal English sentence (e.g. \"CS1010 or its equivalents\""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "and \"Departmental approval\"). Extracting the real module prerequisite and preclusion relationship would"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "be infeasible due to the potential long list of exceptions we need to handle. To simplify this, we use"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "regular expression to extract the module codes."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Here is how prerequisite and preclusion checking is implemented:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* If user wants to take Module A, all prerequisites of Module A must already have been taken."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* If Module B\u0027s preclusions has at least one module that user has already taken, user cannot take Module B."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "This gives us a reasonable approximation of prerequisite and preclusion relationship for most modules."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Corequisites"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Corequisite is used to describe which modules must be taken together. We choose to ignore this entirely"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "as it will complicate the implementation of `add` and `delete` commands significantly."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Old modules that have been phased out"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "NUS sometimes creates new modules to replace outdated modules every academic year. Information about"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "outdated modules are not given by IVLE, but other modules might still list these module codes in their prerequisites"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "and preclusion. We assume that all module codes referenced in our processed data must have a `ModuleInfo`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "object. To do that, all references of module codes that do not have its own module information entry"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "are removed."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d Data sanitizing script"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "The python script that downloads the list of NUS modules from https://nusmods.com[NUSMods] server and does the data"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "transformation detailed above can be found at (link:{repoURL}/tools/moduleConverter.py[`moduleConverter.py`])."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Representation of academic major and focus area"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **Alternative 1 (current choice)**: Use enum to represent academic major and focus area."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Pros: Stronger type checking."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Cons: Need to explicitly list down all the possible values of enums (there are more than hundreds of focus areas"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "in all NUS academic majors). Special JSON serialization and deserialization is needed for enum types."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **Alternative 2**: Use `String` to represent academic major and focus area."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Pros: No need to convert academic major and focus area inputted by user into another type."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Cons: If academic major/focus area is passed into a function as a parameter, the function cannot assume that"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "the it is a valid academic major/focus area. This leads to a lot of redundant checking."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storing of module and academic major information"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "To avoid having to download the module and academic major information from the Internet in first start up, we package"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "the data directly into final `.jar` file as a resource file."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **Alternative 1 (current choice)**: Store data in as a JSON resource file and deserialize data into Java types"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "at runtime."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Pros: JSON format is easy to learn and can be manipulated easily with other (interpreted) programming languages."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Cons: JSON format can only hold simple primitive types such as `String`, number, array and hash table. Need to"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "design a way to flatten the module dependency graph into something that can be represented in JSON and reconstruct"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "the graph after deserialization."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **Alternative 2**: Generate Java code during build time. The data will be directly stored as a static constant Java object."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Pros: Better performance in runtime as the deserialization is no longer needed. Less moving parts when testing the data itself."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Cons: More complex build procedures. Teammates will need to install extra tools to build the project."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Class representation of module related information"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **Alternative 1 (current choice)**: Use `ModuleInfo` class to represent module information that is transparent to user\u0027s academic major"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "and `ModuleDescription` class to represent module information that is specific to the requirements of an academic major."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Pros: Clear separation of concern. Commands that does not depend on `UserProfile` only needs to"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "interact with `ModuleInfo` and not affected by changes to `ModuleDescription`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Cons: Commands that need module information specific to an academic major (e.g. `suggest` and `status`) still need"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "to depend on `ModuleInfo`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **Alternative 2**: Use one class to hold all types of module information."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Pros: Less classes to reason about."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Cons: Commands that use `ModuleInfo` but do not uses `UserProfile` directly will still be affected by changes"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "in `UserProfile`. The JSON form of the data will be more complex."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// end::moduleinfo[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// tag::setup[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d Setup feature"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "The `setup` command allows users to save their academic major and optionally their focus areas in Module Planner."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "The information is stored in `UserProfile` and is later used by `suggest` and `status` commands."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "The following sequence diagram shows the sequence when `setup` command is executed."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".Sequence diagram for `setup` command."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "image::SetupSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Argument leniency"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **Alternative 1**: Entirely reject all focus areas even if only one of them is invalid. Focus areas must have the exact same letter casing as"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "listed in User Guide."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Pros: Implementation would be simpler."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Cons: Not user friendly. It is too easy for user to input focus areas in the wrong letter casing, causing many retries."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **Alternative 2 (current choice)**: Accept the valid focus areas even if one of them is invalid. Focus areas inputted is case-insensitive."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Pros: More user friendly. User is able to update the user profile and gets positive result even if there are some minor syntax errors."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Cons: Need to implement filtering of valid focus areas from inputted focus areas. As `f/Computer Science` and `f/cOmpUter SciEnce` are now"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "both valid inputs and can be inputted at the same time, we also need to filter out duplicates."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Error handling"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **Alternative 1**: Execute syntax format checkings one by one and immediately throw command exception in first failure."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Pros: Implementation would be simpler. Less possible of negative test cases to test."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Cons: Not user friendly. User only sees one syntax error at one time. If there are many syntax errors in user\u0027s first try, it will take"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "several retries for user to figure all the syntax errors."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **Alternative 2 (current choice)**: Always execute all syntax format checkings. If there are more than one error, concatenate their error"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "message before throwing command exception."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Pros: More user friendly. User will be able to see all syntax errors in first try and attempt to fix them."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Cons: Need to create many negative test cases to test each error individually and all together. More"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "complicated to test the expected error messages."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// end::setup[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Add feature"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "The add mechanism is facilitated by `ModulePlanner`. `ModulePlanner` stores a list of `Semester` objects. A `Semester` stores a list containing modules that the user has taken or is planning to take on that semester."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Add mechanism is also facilitated by the posting and handling of events. The `AddCommand#execute(...)` is the event poster and"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "the `MainWindow#handleAddEvent(...)` is the event handler."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The implementation is as follows:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* `ModulePlanner#addModules(List\u003cModule\u003e modules, int index)` -- Add the list of `modules` into the semester specified by `index`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The operation above is exposed in the `Model` interface as `Model#addModules(List\u003cModule\u003e modules, int index)`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "The following sequence diagram shows how the add operation works:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "image::AddSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "In executing the add operation, the AddCommand will apply several filters on the input list of modules."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Consider the following case:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "ModulePlanner contains only `CS1010` in year 1 semester 1 and the user tries to add the following list of modules : `CS0000`,"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "`CS1010`, `CS1010E`, `CS1231`, `MA1100`, `CS2030`, `GER1000` to year 1 semester 1. The filterings, sequentially,"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "are as follows:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d (1) Filter out module(s) not offered by the education institute"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Module `CS0000` is not offered. It will be filtered out from the list and the user will be informed that it is not an offered module."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d (2) Filter out module(s) that already exist in the planner"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Module `CS1010` is already in the planner. It will be filtered out from the list and the user will be informed that it exists in the planner."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d (3) Filter out module(s) which some of its preclusion is in the planner"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Module `CS1010E` has `CS1010` as its preclusion. It will be filtered out from the list and the user will be informed that this module"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "has some of its preclusion in the planner."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d (4) Filter out equivalent modules"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Modules `CS1231` and `MA1100` are equivalent. These modules will be filtered out from the list, then grouped by equivalence and"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "the user will be told that these modules are equivalence."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d (5) Filter out module(s) which some of its prerequisites has not been fulfilled."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Module `CS2030` has `CS1010` as its prerequisite. To be able to add it to the planner, `CS1010` must exist in previous semesters,"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "which in this case is not possible since the semester to be added is the the earliest semester possible. Thus the module will be"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "filtered out from the list and the user will be informed that the prerequisites for this module is not fulfilled yet."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d (6) Add the filtered list of module(s) to the planner"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "At this point, the list to be added has been finalized. The `Model#addModules(List\u003cModule\u003e modules, int index)` is then called"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "to add this list of module(s) (in this case only `GER1000`) to the planner."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "(1) The messages for each filtering will be collected and displayed simultaneously to the user. +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "(2) If the final filtered list is empty, the command box will not be emptied so the user do not need to type all over again."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Different semester start"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "The current implementation allows users to explore possible scenarios of study plan that they can make. Assuming a user is already"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "in the middle of his study, let\u0027s say he is in second year already, he can still modify his first year\u0027s modules to see other"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "possible study plans. Implementing a way to initialize ModulePlanner based on the user\u0027s past modules (which they can\u0027t modify after initializing)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "would be a good idea for the following reasons:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "1. To mirror the real world - it is impossible for a student to void a module that has already been taken."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "2. To prevent undefined behaviour - omitting a module already taken might make all future modules not yet taken to be inaccurately planned."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Also, all currently suggested modules to the user might too be inaccurate."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Below are the summary of pros and cons of the current implementation and the alternative design:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Current implementation: Able to plan for every semester"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Pros: Allow users to explore various study plans"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Cons: Doesn\u0027t enforce users to deal with their real progress"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Alternative design: Only able to plan for future semester, with some initialization"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Pros: Allow users to commit on their real progress"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Cons: Harder implementation"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Delete feature"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d About"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The current delete mechanism is facilitated by `ModulePlanner`."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "`ModulePlanner` stores a list of all the semesters the user has taken and will take."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "In turn, `Semester` stores a list of the modules the user has taken, is currently taking or will be taking."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Process"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "When a module is deleted, `ModulePlanner` will go through every module added after the semester which the"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "module is deleted from and checks if those modules now have prerequisites that are not fulfilled. If there"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "are now prerequisites not fulfilled for the modules checked, they too are deleted and the process repeats for them."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "This process is the same for when multiple modules are deleted. For better addressing, this process will be defined"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "as _Iterative Deletion_."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The following activity diagram shows how Iterative Deletion works:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "image::IterativeDeletionActivityDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Input"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The arguments given to the mechanism are modules, which can be a mix of valid and invalid modules."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "A valid module is defined as one that has the correct module code format and has been taken, is currently"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "being taken or will be taken by the user (is stored in the module planner). An invalid module is defined as the opposite."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Result"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Out of all these arguments, only the valid modules will be deleted from the module planner. The invalid modules"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "are collected and made known to the user through the Result Display. The modules that are not found in the module planner"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "are shown to the user in the Result Display. Modules with invalid module code formats are already filtered out by the"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "`DeleteCommandParser` and hence do not appear as part of the message shown in the Result Display."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "`ModulePlanner` uses the following operation to implement the delete mechanism:"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* `ModulePlanner#deleteModules(List\u003cModule\u003e modules)` -- Deletes the modules from whatever semester it is in."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The above operation is exposed in the `Model` interface as `Model#deleteModules(List\u003cModule\u003e modules)`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The following sequence diagram shows how the `delete` operation works:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "image::DeleteSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Below are some usage scenarios."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "For convenience, let\u0027s define some valid modules: CS1010, CS2030 and CS2040"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "and an invalid module CS0000. CS1010 is one of the prerequisites for CS2030 and CS2040."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Let\u0027s also initialise a module planner with those valid modules: +"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[cols\u003d\"^,^\", width\u003d50%]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".Module Planner Initial State"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "| Y1S1 | Y1S2"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|CS1010"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|CS2030"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|CS2040"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d A Valid Module"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The user executes `delete c/CS1010` command to delete the valid module CS1010."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The `delete` command calls `Model#deleteModules(...)`, which removes the module from the semester where it is found."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Iterative Deletion is then applied. Since CS2030 and CS2040 have CS1010 as a prerequisite, if CS1010 is"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "deleted, CS2030 and CS2040 will be deleted too."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The module planner now has this state: +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[cols\u003d\"^,^\", width\u003d50%]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".Module Planner Current State"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "| Y1S1 | Y1S2"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|empty"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|empty"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "This applies to when more than one valid module is supplied."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d An Invalid Module"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The user executes `delete c/CS0000` command. However, since that module is not found in the module planner,"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "the command fails and `Model#deleteModules(...)` will not be called. The user will be informed of the invalid module."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The module planner now has this state: +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[cols\u003d\"^,^\", width\u003d50%]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".Module Planner Current State"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "| Y1S1 | Y1S2"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|CS1010"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|CS2030"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|CS2040"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "This applies to where more than one invalid module is supplied."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Mix of Valid and Invalid Modules"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The user executes `delete c/CS2030 c/CS0000`. However, only the module CS2030 is valid."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "In this case, `Model#deleteModules(...)` is still called, but only the valid module CS2030 will be deleted."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The user will be informed of the invalid module."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "This applies to where more than one valid and invalid modules are supplied."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The module planner now has this state: +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[cols\u003d\"^,^\", width\u003d50%]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".Module Planner Current State"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "| Y1S1 | Y1S2"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|`CS1010`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|`CS2040`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d No Modules"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The user executes `delete`. As the command has no supplied arguments, the command will fail"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "and the user will be informed to input arguments."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Argument leniency"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Alternative 1: Entirely reject modules even if one is invalid."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Pros: Simple logic and requires minimal code."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Cons: Not user friendly. The user now has to expend additional effort to edit the modules inputted."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Alternative 2 (current choice): Accept the valid modules even if one is invalid."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Pros: User friendly. The user gets to delete the valid modules and is notified of which modules are invalid and why."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Cons: More complex. Requires filtering logic."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Iterative Deletion"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Alternative 1 (current choice): Iterate through the modules in each semester for all years. For each semester, the modules"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "that do not have their prerequisite(s) fulfilled are marked as invalid and are deleted."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Pros: Simple logic and requires minimal code."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Cons: Although the number of modules in the module planner is weakly limited by NUS (students are only"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   required to take about 40 modules to earn a degree), the algorithm is slow."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Alternative 2: Construct a direct acyclic graph for all the modules in the module planner"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Pros: Fast and efficient. There is no need to iterative through several semesters to mark modules as invalid and then"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   deleting them."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Cons: More complex. Due to time constraints during the project, this approach was not taken."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d About"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The find mechanism is facilitated by the posting and handling of events. The `FindCommand#execute(...)` is the event poster"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "and the `MainWindow#handleFindEvent(...)` is the event handler. `find` allows the user to retrieve more information about"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "a specified module."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Input"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The argument given to the mechanism is a module, which has to be offered by NUS. If a module is not offered,"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "the command fails."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Result"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The information about the module is retrieved and displayed in the Multipurpose Panel."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The following sequence diagram shows how the `find` operation works:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "image::FindSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Below are some usage scenarios."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d Module is Offered"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The user executes `find c/CS1010`. The Multipurpose Panel displays the retrieved module information."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d Module is Not Offered"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The user executes `find c/CS0000`. The Multipurpose Panel does not display anything."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// tag::goto[]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Goto feature"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d About"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The goto mechanism is facilitated by the posting and handling of events. The `GoToCommand#execute(...)` is the event poster"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "and the `MainWindow#handleGoToEvent(...)` is the event handler. `goto` allows the user to switch between time periods in the ui."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "A time period is defined as a year-semester pair. e.g. Year 1 semester 1"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Input"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The argument given to the mechanism is a year-semester pair. The year has to be between 1 and 4, and the semester has to be"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "between 1 and 2."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Result"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The ui switches time periods to the specified. The modules taken in the time period is displayed too."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The following sequence diagram shows how the `goto` operation works:"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "image::GoToSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Below are some usage scenarios."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Valid Year and Semester"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The user executes `goto y/1 s/1`. Since both the year and semester are valid, the ui changes accordingly."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Invalid Year and Valid Semester"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The user executes `goto y/5 s/1`. Since only the semester is valid, command fails and the ui does not change."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "This applies to when the year is valid but the semester is invalid."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "It is possible that some users take a 5th year and beyond in their education institute. However, as of now, Module Planner does not"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "support years beyond the 4th."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// end::goto[]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d List feature"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The list mechanism displays either a list of modules that the user has added to a specified year or a list of all modules that the user has added to every year."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "This mechanism is facilitated by `ModulePlanner`. The `ModulePlanner` stores a list of all `Semester`-s and each `Semester` stores a list `modulesTaken` containing modules that the user has added to that `Semester`."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "It implements the following operation:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* `ModulePlanner#getTakenModules()` -- Retrieves the list `takenModules`."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* `ModulePlanner#listTakenModulesAll()` -- Updates `takenModules` to contain a list of modules retrieved from the list `modulesTaken` in every `Semester`."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* `ModulePlanner#listTakenModulesForYear(int year)` -- Updates `takenModules` to contain a list of modules retrieved from the list `modulesTaken` in the `Semester`-s that belong to the specified year."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The operations are exposed in `Model` interface as `Model#getTakenModules()`, `Model#listTakenModulesAll()`, and `Model#listTakenModulesForYear(int year)`."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "If a valid year is specified by the user, the `list` command will call `Model#listTakenModulesForYear(year)`, where `year` is the argument supplied by user. If no year is specified, the `list` command will call `Model#listTakenModulesAll()`."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "A valid year should be an integer between 1 to 4 inclusive."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*Below is an example usage scenario and how the list mechanism works.*"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Step 1. User launches the application. `ModulePlanner` is initialised with 8 `Semester` objects in a list `semesters`."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Step 2. User executes `add y/1 s/1 c/CS1231`. The `add` command inserts `Module` CS1231 to the list `modulesTaken` for `Semester` object with index 0."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Step 3. User executes `add y/2 s/1 c/CS1010`. The `add` command inserts `Module` CS1010 to the list `modulesTaken` for `Semester` object with index 2."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Step 4. User wants to see the list of modules taken for year 1 by executing `list y/1`. The `list` command updates `takenModules` to contain list of modules taken in year 1 and retrieves it."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "A list containing CS1231 will be displayed to the user."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Step 5. User wants to see the list of modules taken for all years by executing `list`. The `list` command updates `takenModules` to contain list of modules taken in all years and retrieves it."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "A list containing CS1231 and CS1010 will be displayed to the user."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The following sequence diagram shows how the list operation when a valid year is specified:"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "image::ListSequenceDiagram_1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The following sequence diagram shows how the list operation when no year is specified:"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "image::ListSequenceDiagram_2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How list of modules taken is retrieved for list command"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* **Alternative 1 (current choice):** Updates list of modules taken whenever it is modified by a command (e.g. `add`) and immediately retrieves the list upon `list` command."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Cons: May have performance issue in terms of running time if commands that modify the list are called frequently."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* **Alternative 2:** Saves all commands that modify list of modules taken without applying it and updates the list based on the commands only when it is retrieved upon `list` command."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Pros: May be more effective in terms of running time because it only modifies the list when needed."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Cons: Implementation will be more complicated as it required storing all commands that modify the list."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "// tag::status[]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d Status feature"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Status feature allows the user to keep track of their credit progress for different requirements. It is tracked in the `ModulePlanner` in form of a map and will"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "be updated every time the user use the add or delete feature and when they set up their profile. This map will then later posted"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "by `StatusCommand#execute(...)` in an event. Finally `MainWindow#handleStatusEvent(...)` will handle this event and convert the"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "map to a string for display."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "The implementation is as follows:"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "*`ModulePlanner#getStatus()`-Updates and retrieves the status of credit progress in the `ModulePlanner`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "The operation above is exposed in `Model` as `Model#getStatus()`."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Below shows the sequence diagram which describe how the status feature works:"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "image::StatusSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Initially, status feature will display progress for degree requirements which does not include unrestricted electives and focus area requirements."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "When the user sets up their focus area, additional field(s) of `Focus_Area_Requirement` will be added to the status. The additional field(s) are named"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\"Focus Area Requirement 1\", \"Focus Area Requirement 2\" and so on, with the number of additional fields is equal to the number of focus area that the"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "user has."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "As an illustration, consider the following case:"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Initially, the ModulePlanner is empty and the user does not have any focus area. Using the status feature will display the following strings:"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "University Level Requirement: 0/20 +"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Foundation: 0/36 +"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Mathematics: 0/12 +"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Science: 0/4 +"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "IT Professionalism: 0/12 +"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Industrial Experience Requirement: 0/12 +"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Team Project: 0/8"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Now the user wants to set up Software Engineering and Artificial Intelligence as their focus area. +"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "The status will now display additional strings as follows:"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Focus Area Requirement 1: 0/12 +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Focus Area Requirement 2: 0/12"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Inclusion of Unrestricted Elective requirement"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Currently the status doesn\u0027t keep track of Unrestricted Elective requirement because of the complexity of how it is counted. Credits"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "from modules with more than 4 credit count may or may not have its extra credits transferred to UE requirement. For that, a possible alternative"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "would be to list down all modules with more than 4 credit count that transfer its extra credits to UE credits and taking them into consideration."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Below are the summary of pros and cons of the current implementation and the alternative design"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Current Implementation: Doesn\u0027t include Unrestricted Electives"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Pros: Straightforward implementation by just counting for each module"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Cons: Doesn\u0027t include all possible degree requirements, hence not real progress"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Alternative Design: Includes Unrestricted Electives"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Pros: Able to track real progress"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Cons: Much more tedious to implement"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "// end::status[]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "// tag::suggest[]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d Suggest feature"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The suggest mechanism displays a list of modules available in the specified index to the user, where index represents the year and semester that the user is asking suggestions for."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "This mechanism is supported by an internal list `availableModules` in `ModulePlanner`, which is regenerated after every successful execution of commands that modify `ModulePlanner` (`add`, `delete`, `clear`, etc.) and `suggest` command."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The list `availableModules` can be retrieved through `Model#getAvailableList()` using `suggest` command, which (`suggest` command) takes in two arguments: a valid year and a valid semester."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* A valid year should be an integer between 1 to 4 inclusive."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* A valid semester should be wither 1 or 2."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*Below is an example usage scenario and how the suggest mechanism works.*"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*Step 1.* User launches the application and `ModulePlanner` is initialized."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*Step 2.* User executes `suggest y/1 s/1`. The `suggest` command parser converts year 1 and semester 1 to index 0."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The `suggest` command updates `availableModules` to a newly generated list of available modules for index 0 and stores index 0 as `availableIndex` in `ModulePlanner`. It then retrieves `availableModules` and displays it to user."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*Step 3.* User executes `add y/1 s/2 c/CS1010`. The `add` command performs adding a module and updates `availableModules` to a newly generated list of available modules for the stored index 0. The suggested modules list shows an updated list of available modules in year 1 semester 1 to the user."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Only `suggest` command will change the index (year and semester) to be displayed by the suggested modules list, other commands will only show an updated list for the last index displayed by `suggest`."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*Step 4.* User executes `suggest y/1 s/2`. The `suggest` command parser converts year 1 and semester 2 to index 1. The `suggest` command updates `availableModules` to a newly generated list of available modules for index 1 and stores index 1 as `availableIndex` in `ModulePlanner`. It then retrieves `availableModules` and displays list of available modules in year 1 semester 2 to user."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*Below is an explanation on how the list of available modules is generated.*"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The method `ModulePlanner#generateAvailableModules(int index)` is called by `ModulePlanner#updateModulesAvailable()`, which sets the content of `availableModules` to the list of modules returned by `generateAvailableModules(index)`, with `index` being the stored `availableIndex`. The implementation of `ModulePlanner#generateAvailableModules(int index)` is given below:"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "----"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "private List\u003cModule\u003e generateAvailableModules(int index) {"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    List\u003cModule\u003e modulesAvailable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    List\u003cModule\u003e modulesTaken \u003d getAllModulesTaken();"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    List\u003cModule\u003e modulesTakenBeforeIndex \u003d getAllModulesTakenBeforeIndex(index);"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    List\u003cModule\u003e allModules \u003d getAllModulesFromStorage();"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    for (Module m : allModules) {"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (ModuleUtil.isModuleAvailable(modulesTaken, modulesTakenBeforeIndex, m)) {"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            modulesAvailable.add(m);"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    sortAvailableModules(modulesAvailable, userProfile);"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    return modulesAvailable;"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "----"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The method `ModulePlanner#generateAvailableModules(int index)` retrieves all modules from the storage and performs availability checking on each of them. The available modules are put into a list which is then sorted:"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** in a lexicographical order if user has specified a major other than *Computer Science* through `setup` command, or"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** such that core modules for *Computer Science* major are put on top, followed by general education modules and unrestricted electives."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The availability checking is done by the following method:"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "----"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public static boolean isModuleAvailable(List\u003cModule\u003e modulesTaken,"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                                        List\u003cModule\u003e modulesTakenBeforeIndex, Module module) {"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    return hasNotTakenModule(modulesTaken, module)"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            \u0026\u0026 hasFulfilledAllPrerequisites(modulesTakenBeforeIndex, module)"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            \u0026\u0026 hasNotFulfilledAnyPreclusions(modulesTaken, module);"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "----"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "A sample scenario:"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Module CS2030 has a prerequisite CS1010 and a preclusion CS1020. User has taken CS1010 in year 1 semester 2 and has not taken CS1020 or CS2030."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* Executing `suggest y/2 s/1` will display CS2030 as one of the available modules, as user has fulfilled all prerequisites of CS2030 before year 2 semester 1 and has not taken any preclusion or the module itself."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* Executing `suggest y/1 s/1` will *not* display CS2030 in the list of available modules, as user has not fulfilled all the prerequisites before year 1 semester 1 (user has only fulfilled CS1010 in the semester after)."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The following sequence diagram shows how the suggest operation works:"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "image::SuggestSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How list of available modules is regenerated"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* **Alternative 1 (current choice):** Regenerates list of available modules after every successful execution of commands that *may* modify the list of available modules."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Cons: May have performance issue in terms of running time because list is regenerated even if there is no change to the content."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* **Alternative 2:** Regenerates list of available modules only if a command modifies the content of the list of available modules."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Pros: May be more effective in terms of running time because it only regenerates the list when needed."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Cons: Implementation will be more complicated as it requires additional checking on whether a command modifies the list."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "// end::suggest[]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedModulePlanner`."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "It extends `ModulePlanner` with an undo/redo history, stored internally as an `modulePlannerStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* `VersionedModulePlanner#commit()` -- Saves the current module planner state in its history."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* `VersionedModulePlanner#undo()` -- Restores the previous module planner state from its history."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* `VersionedModulePlanner#redo()` -- Restores a previously undone module planner state from its history."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitModulePlanner()`, `Model#undoModulePlanner()` and `Model#redoModulePlanner()` respectively."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The `VersionedModulePlanner` will be initialized with the initial module planner state,"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "and the `currentStatePointer` pointing to that single module planner state."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Step 2. The user executes `delete c/GER1000` command to delete the module `GER1000` in the module planner."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The `delete` command calls `Model#commitModulePlanner()`, causing the modified state of the module planner"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "after the `delete c/CS1010` command executes to be saved in the `modulePlannerStateList`, and the `currentStatePointer`"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "is shifted to the newly inserted module planner state."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Step 3. The user executes `add y/1 s/1 c/CS1010` to add the module `CS1010 to the first year first semester."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The `add` command also calls `Model#commitModulePlanner()`, causing another modified module planner state"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "to be saved into the `modulePlannerStateList`."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "If a command fails its execution, it will not call `Model#commitModulePlanner()`,"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "so the module planner state will not be saved into the `modulePlannerStateList`."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Step 4. The user now decides that adding the module was a mistake,"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "and decides to undo that action by executing the `undo` command."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The `undo` command will call `Model#undoModulePlanner()`, which will shift the `currentStatePointer` once to the left,"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "pointing it to the previous module planner state, and restores the module planner to that state."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial module planner state,"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "then there are no previous module planner states to restore."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The `undo` command uses `Model#canUndoModulePlanner()` to check if this is the case."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoModulePlanner()`,"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "which shifts the `currentStatePointer` once to the right, pointing to the previously undone state,"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "and restores the module planner to that state."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "If the `currentStatePointer` is at index `modulePlannerStateList.size() - 1`,"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "pointing to the latest module planner state, then there are no undone module planner states to restore."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The `redo` command uses `Model#canRedoModulePlanner()` to check if this is the case."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Step 5. The user then decides to execute the command `list`."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Commands that do not modify the module planner, such as `list`,"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "will usually not call `Model#commitModulePlanner()`, `Model#undoModulePlanner()`"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "or `Model#redoModulePlanner()`. Thus, the `modulePlannerStateList` remains unchanged."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitModulePlanner()`."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Since the `currentStatePointer` is not pointing at the end of the `modulePlannerStateList`,"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "all module planner states after the `currentStatePointer` will be purged."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "We designed it this way because it no longer makes sense to redo the `add y/1 s/1 c/CS1010` command."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire module planner."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the module being deleted,"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   as well as the year and semester it was in)."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of module planner states."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedModulePlanner`."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.planner.ui` package."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "e.g. `seedu.planner.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "e.g. `seedu.planner.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "e.g. `seedu.planner.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/planner/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "A project often depends on third-party libraries. For example, Module Planner depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "NUS Computer Science and Computer Engineering students who :"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** need to manage their modules"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** is familiar with CLI apps"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** prefer typing over using mouse"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** prefer desktop apps over other types"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "*Value proposition*: easily plan modules based on graduation requirements"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|`* * *` |CS student |specify my major, focus area and current semester |Get a list of modules I need to take to fulfill requirements"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|`* * *` |student |add modules that I have taken |know what other modules I can take next based on the module prerequisites"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|`* * *` |student |add modules that I want to take for future semesters |plan my modules for the future semesters"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|`* * *` |student |delete modules from plan |remove modules that I choose not to take"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|`* * *` |student |see the list of modules |choose what modules I want to take for the next semester"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|`* * *` |student |get a summary of my current progress |get a better sense of what I need to do next"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|`* *` |student |look up a module |know which semester it is available in"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|`* *` |student |look up a module I want to take |get the list of prerequisites for it"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "(For all use cases below, the *System* is the `ModulePlanner`, unless specified otherwise)"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d Use case: Specify major/focus area"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "1.  User requests to specify a major/focus area"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "2.  System displays a list of modules related to the major/ focus area"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* 2a. The given input is invalid."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d Use case: Add modules that have been taken"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "1.  User requests to add any number of module codes to the list of modules taken"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "2.  System shows success message"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "3.  User requests to see the list of available modules"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "4.  System shows the list of modules that user can take based on the list of modules taken"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* 2a. User inputs no module code"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** 2a1. System shows error message"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* 2b. User inputs invalid module code(s)"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** 2b1. System shows error message"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* 4a. The list is empty"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d Use case: Delete modules"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "1.  User requests to see the module plan he/she has made for a specific semester"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "2.  System shows module plan for the specified semester"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "3.  User requests to delete any number of module codes from the plan"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "4.  System shows success message"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* 2a. The plan is empty"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* 2b. The semester is a past semester"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** 2b1. User is told that old modules cannot be changed"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* 3a. User inputs no module code"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** 3a1. System shows error message"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** 3a2. System prompts for module code(s)"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* 3b. User inputs invalid module code(s)"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** 3b1. System shows error message"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** 3b2. System prompts for valid module code(s)"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "+"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ".  Should work on any mainstream OS as long as it has Java 9 or higher installed"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ".  Should be able to handle at least 80 modules"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ".  Should have good documentation"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ".  Should be designed to allow for future extensibility"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ".  Should be designed well to ease maintainability and be easily tested"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ".  Should be scalable to cater to more modules if a second major, degree or the like is taken"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Windows, Linux, Unix, macOS"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Time Period::"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Year-Semester pair"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* year 1 semester 1"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* year 2 semester 2"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Iterative Deletion::"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The process of removing modules, checking if their removal causes other modules to not fulfill"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "some of their prerequisites, removing those modules that no longer have their prerequisites fulfilled,"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "and repeating until no more modules are removed."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Ui Components::"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The ui is divided into several sections."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".The labelled ui"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "image::UiLabelled.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Input Box: input commands here."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Result Display: displays command results and other associated messages."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Time Period: displays the year and semester you are currently viewing."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Taken Modules Panel: lists modules that you put into the specified time period."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Suggested Modules Panel: lists modules that suggested to you for that time period."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Multipurpose Panel: displays results for the `Find` and `Status` commands."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   Expected: Shows the GUI with no modules. The window size may not be optimum."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window.."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d Adding modules"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "In an empty module planner, do the following command: `add y/1 s/1 c/CS1010`"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "The module planner will now have the module `CS1010`."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Next do the following command: `add y/1 s/1 c/CS0000 c/CS1010 c/CS1010E c/CS1231 c/MA1100 c/CS2030 c/GER1000`"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "The module planner will now have the module `GER1000` and the following message will be displayed:"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Added Module(s): GER1000 +"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Not offered module(s): CS0000 +"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Following module(s) already exist in the planner: CS1010 +"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Following module(s) have some of their preclusions not fulfilled in the planner: CS1010E +"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Following module(s) are equivalent: (CS1231 MA1100) +"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Following module(s) have their prerequisites not fulfilled in the planner: CS2030"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d Getting status"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Type `status` in an empty planner, and the following should be displayed:"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "University Level Requirement: 0/20 +"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Foundation: 0/36 +"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Mathematics: 0/12 +"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Science: 0/4 +"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "IT Professionalism: 0/12 +"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Industrial Experience Requirement: 0/12 +"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Team Project: 0/8"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Now do the following command: `add y/1 s/1 c/CS1010 c/MA1521`"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "The following fields will be now updated:"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Foundation: 4/36 +"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Mathematics: 4/12"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Deleting modules"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ". Simple deletion"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Prerequisite: There needs to be at least one module in the module planner that is *not* a prerequisite"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   for other modules. These modules are usually level 1000 modules like CS1010 and GER1000. If no such"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   modules are in the module planner, add one or more (e.g. `add y/1 s/1 c/CS1010` and `add y/1 s/1 c/GER1000`)."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Test case: `delete c/CS1010`. +"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   Expected: The module is removed and the ui updates to show that."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ". Iterative Deletion"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Prerequisite: There needs to be at least one module in the module planner that is a prerequisite"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   for other modules. These modules are usually level 2000 modules and above like CS2030 and CS2040."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   If no such modules are in the module planner, add one or more (e.g. `add y/1 s/2 c/CS2030` and"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   `add y/1 s/2 c/CS2040`)."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Test case: `delete c/CS1010`. +"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   Expected: The module is removed and the ui updates to show that. The modules that depend on CS1010 like"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   CS2030 and CS2040 will be removed too."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "To observe iterative deletion better, use the `list` command to list out all the modules before performing this test case."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "*Potential Confusion* +"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "An input like `add y/1 s/2 c/CS2030` does not work. +"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "*Solution* +"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Check if the prerequisites of CS2030 have been fulfilled. In this case, the prerequisites of"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "CS2030 are CS1010 and CS1231. Add the latter two modules before adding CS2030 into at least a"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "semester after."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Finding a module"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ". Finding a valid module"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Prerequisite: None."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Test case: `find c/CS1010` +"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   Expected: The Multipurpose Panel displays the information of `CS1010`."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Switching between time periods"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ". Switching to a different time period"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Prerequisite: None, but the time period that you `goto` has to be different from your current."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Test case: `goto y/\u003ca\u003e s/\u003cb\u003e`, where a and b refer to any valid values. +"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   Expected: The time period in the Taken Modules Panel will change from where you were to `Year a | Semester b`."
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Double-click the jar file. This will generate some supporting files like preferences.json and config.json."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. To simulate missing data files, remove any of the generated files. Close the window."
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Double click the jar file again. +"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   Expected: The jar file will automatically generate the relevant files removed."
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   These files contain default values and not custom values set by the user."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. To simulate corrupted data files, edit any of the generated files to break the format."
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   The files are in json format and are easily editable. One example edit is to add \"BobBuilder\" like in the image below."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Expected: The jar file will automatically regenerate the corrupted files."
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   These files contain default values and not custom values set by the user."
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "image::CorruptedDataFile.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d Suggesting modules"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ". Suggesting modules for a specific year and semester"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ".. Test case: `suggest y/1 s/1` +"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "   Expected: The panel for *Modules Suggested* is updated to show *Year 1 | Semester 1* and list of suggested modules for year 1 semester 1. A success message is shown in the status message."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ".. Test case: `suggest` +"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "   Expected: The panel for *Modules Suggested* remained the same as before executing the command. Error message is shown in the status message."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ".. Other incorrect suggest commands to try: `suggest y/a s/b` (where a is not an integer between 1 to 4 inclusive or b is neither 1 or 2) +"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d Listing modules"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ". Listing modules for all years"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ".. Prerequisites: Add some modules to ModulePlanner using `add` command."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ".. Test case: `list` +"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "   Expected: The panel for *Modules Taken* is updated to show *All years* and list of all modules that have been added. A success message is shown in the status message."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ".. Test case: `list 1` +"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "   Expected: The panel for *Modules Taken* remained the same as before executing the command. Error message is shown in the status message."
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ". Listing modules for a year"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ".. Prerequisites: Add some modules to year 1 using `add` command."
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ".. Test case: `list y/1` +"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "   Expected: The panel for *Modules Taken* is updated to show *Year 1* and all modules that have been added to year 1. A success message is shown in the status message."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ".. Test case: `list y/0` +"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "   Expected: The panel for *Modules Taken* remained the same as before executing the command. Error message is shown in the status message."
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ".. Other incorrect list commands to try: `list y/a` (where a is not an integer between 1 to 4) +"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d Set up user profile"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ". Set up user profile"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".. Test case: Valid major with exact letter casing, no focus area"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Command: `setup m/Computer Science`"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Expected: Sucessfully set up user profile with \"Computer Science\" as major and no focus area."
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".. Test case: Valid major with different letter casing, no focus area"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Command: `setup m/cOMputEr sCiEnce`"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Expected: Sucessfully set up user profile with \"Computer Science\" as major and no focus area."
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".. Test case: Invalid major, no focus area"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Command: `setup m/Information Security`"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Expected: Fail to set up user profile with error message `Invalid major (Information Security)`."
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".. Test case: Valid major, one valid focus area with exact letter casing"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Command: `setup m/Computer Science f/Software Engineering`"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Expected: Sucessfully set up user profile with \"Computer Science\" as major and \"Software Engineering\" as focus area."
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".. Test case: Valid major, one valid focus area in different letter casing"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Command: `setup m/Computer Science f/softWARE EnginEErInG`"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Expected: Sucessfully set up user profile with \"Computer Science\" as major and \"Software Engineering\" as focus area."
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".. Test case: Valid major, multiple different valid focus areas with exact letter casing"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Command: `setup m/Computer Science f/Software Engineering f/Artificial Intelligence`"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Expected: Sucessfully set up user profile with \"Computer Science\" as major and \"Software Engineering\""
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "and \"Artificial Intelligence\" as focus areas."
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".. Test case: Valid major, multiple strings with different letter casing of the same valid focus area"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Command: `setup m/Computer Science f/Software Engineering f/soFTware EnginEErinG`"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Expected: Sucessfully set up user profile with \"Computer Science\" as major and \"Software Engineering\" as focus area."
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\"Software Engineering\" only appears once."
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".. Test case: Valid major, one valid focus area with exact letter casing and one invalid focus area"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Command: `setup m/Computer Science f/Software Engineering f/Computer Graphics`"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Expected: Sucessfully set up user profile with \"Computer Science\" as major and \"Software Engineering\" as focus area."
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".. Test case: Valid major, one invalid focus area"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Command: `setup m/Computer Science f/Computer Graphics`"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Expected: Fail to set up user profile with error message `All focus area(s) are invalid`."
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".. Test case: Invalid major, one invalid focus area"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Command: `setup m/Information Security f/Computer Graphics`"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Expected: Fail to set up user profile with error messages `Invalid major (Information Security)`"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "and `All focus area(s) are invalid`."
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 220,
      "GabrielYik": 415,
      "rongjiecomputer": 186,
      "-": 608,
      "Hilda-Ang": 149
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d Module Planner - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T16-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "By: `Team T16-4`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Module Planner is for National University of Singapore (NUS) Computer Science and Computer Engineering undergraduate students who *prefer to use a desktop app* to keep track of past modules and list possible future modules based on the academic requirements. More importantly, Module Planner is optimized for those who prefer to work with a *Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Module Planner can get your module planning tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ". Download the latest `moduleplanner.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your Module Planner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ". The first page you will see when Module Planner starts up."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".On start up"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "image::onstartup.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// tag::labelledUi[]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ". The page is divided into several sections."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".The labelled page"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "image::UiLabelled.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Input Box: input commands here."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Result Display: displays command results and other associated messages."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Time Period: displays the year and semester you are currently viewing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Taken Modules Panel: lists modules that you put into the specified time period."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Suggested Modules Panel: lists modules that suggested to you for that time period."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".. Multipurpose Panel: displays results for the `Find` and `Status` commands."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// end::labelledUi[]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **`setup`**`m/Computer Science` : set your major to be Computer Science in Module Planner to get tailored module suggestion for Computer Science student."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* **`suggest`**`y/1 s/1` : suggest modules you can take in first year, semester 1."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* **`add`**`y/1 s/1 c/CS1231 c/MA1521` : adds modules CS1231 and MA1521 to the year 1 semester 1 modules list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* **`delete`**`c/CS1231` : deletes module CS1231 from the Module Planner."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* Words in `UPPER_CASE` are the parameters that you can supply, e.g. in `suggest y/YEAR s/SEMESTER`, `YEAR` and `SEMESTER` are parameters which can be used as `suggest y/1 s/1`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Items in square brackets are optional e.g `setup ... [f/FOCUS_AREA]` can be used as `setup ... f/software engineering` or as `setup ...`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Items with `...` after them can be used multiple times including zero times e.g. `MODULE_CODE...` can be used as `{nbsp}` (i.e. 0 times), `CS1231`, `CS1231 MA1521` etc."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*Fields restrictions*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c80%\"]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|MAJOR | Supported majors are listed in \u003c\u003cSetting user profile : `setup`, `setup`\u003e\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|FOCUS_AREA | Supported focus areas are listed in \u003c\u003cSetting user profile : `setup`, `setup`\u003e\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|MODULE_CODE | Must be a valid NUS module code in Academic Year 18/19."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|YEAR | Should only be integer from `1` to `4` inclusive."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|SEMESTER | Should only be integer from `1` to `2` inclusive."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Open this user guide in a new window."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// tag::setup[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d Setting user profile : `setup`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Initialises your profile with your major and optionally your focus areas so that Module Planner can"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "give you module suggestions that are more relevant to you. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Format: `setup m/MAJOR [f/FOCUS_AREA]...`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* The major and focus areas should be spelt out in full."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* The major and focus areas are case insensitive. e.g. `Computer Science` is the same as `cOmpUter scienCe`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* This feature currently only supports majors and focus areas listed below. Support for other majors and focus areas will come beyond v2.0."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Major:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Computer Science"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Computer Engineering"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Focus area:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Algorithms and Theory"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Artificial Intelligence"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Software Engineering"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Default user profile is set to `Computer Science` major with no focus area."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* `setup m/Computer Engineering`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* `setup m/Computer Science f/Software Engineering`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// end::setup[]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d Adding modules: `add`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Adds the specified modules to the list of modules that you have taken or want to take for the specified year and semester. +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Format: `add y/YEAR s/SEMESTER c/MODULE_CODE...`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* `add y/1 s/1 c/MA1101R`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* `add y/1 s/1 c/CS1231 c/CS1101S`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "An observable change can be seen in the Taken Modules Panel after successfully adding a module, like shown below:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Before:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "image::AddBefore.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "After:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "image::AddAfter.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "From the input list of modules, a subset of it which will be added to the planner are modules that does not fall under any of the following criterias: +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "1. Modules not offered by NUS +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "2. Modules not in the planner +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "3. Modules which one of its preclusions exist in the planner +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "4. Two or more modules equivalent (preclusions) to each other +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "5. Modules which prerequisites are not fulfilled in the previous semesters"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Deleting modules : `delete`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Deletes the specified modules from list of current or future modules for the specified year and semester. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Format: `delete c/MODULE_CODE...`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* `delete c/CS1010`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* `delete c/CS1231 c/MA1521`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Consider a module planner stocked with the modules CS1010 and CS1231 in year 1 semester 1, and the modules CS2030"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "and CS2040 in year 1 semester 2. If `delete c/CS1010` is executed, CS1010 is removed, as well as the modules CS2030"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "and CS2040 in year 1 semester 2 since they have CS1010 as a prerequisite."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "You can see the change in the Taken Modules Panel in the before and after images."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[cols\u003d\"^,^\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|*Before* | *After*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "| image:DeleteBefore.png[width\u003d\"300\"] | image:DeleteAfter.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Finding information on a module : `find`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Retrieves the information of the specified module. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Format: `find c/MODULE_CODE`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* `find c/CS1010`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "You should see the module information for CS1010 in the Multipurpose Panel."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "image::find.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// tag::goto[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Going to a different year and semester : `goto`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Changes the view to the specified year and semester. +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Format: `goto y/YEAR s/SEMESTER`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* `goto y/1 s/1`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The change can be seen in Taken Modules Panel in the before and after images."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "[cols\u003d\"^,^\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|*Before* | *After*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|image:GoToBefore.png[width\u003d\"300\"] | image:GoToAfter.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "// end::goto[]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Listing modules : `list`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "If a valid year is supplied, shows a list of all modules that you have added to that year. If no year is supplied, shows a list of all modules that you have added to every year. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Format: `list [y/YEAR]`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* The list of modules will be automatically updated upon adding or deleting module(s)."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* If a valid year is supplied but no modules have been added to the specified year, will show an empty list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* If no year is supplied and no modules have been added to any year, will show an empty list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* `list y/1` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Lists all modules taken in year 1, both semester 1 and 2 (if they exist)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Lists all modules taken in every year, from year 1 semester 1 to year 4 semester 2 (if they exist)."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "// tag::status[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d Getting status update : `status`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "Shows how many core and general education module credits that you have taken and how many credits that you need to take. +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Format: `status`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "You could see the status displayed on MultiPurpose Panel as shown below:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "image::StatusIllustration.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "// end::status[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "// tag::suggest[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Suggesting modules : `suggest`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "If a valid year and semester are supplied, suggests a list of modules that you are available to take in the specified year and semester, based on modules that you have added. A module is available for you if:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* You have fulfilled (added to ModulePlanner) all the prerequisites of the module in the semester(s) prior to the one you specified."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* You have not fulfilled (added to ModulePlanner) any preclusions to the module in any semester (including semester(s) after the one you specified)."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* You have not fulfilled (added to ModulePlanner) the module in any semester (including semester(s) after the one you specified)."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The list of modules is sorted, with core modules being on top, followed by general education modules and unrestricted electives modules."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Format: `suggest y/YEAR s/SEMESTER`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* The list of suggested modules will be automatically updated upon adding or deleting module(s)."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* This feature currently only supports *Computer Science* major. If user profile is set to other major through \u003c\u003cSetting user profile : `setup`, `setup`\u003e\u003e command,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "this feature will only give you generic module suggestion sorted in a lexicographical order."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* The list of suggested modules will not be automatically updated after changing major through `setup`. You have to re-execute `suggest` to update the list."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* Support for other majors will come in v2.0."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* `suggest y/1 s/1`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* `suggest y/4 s/2`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "// end::suggest[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Restores Module Planner to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Undoable commands: those commands that modify the Module Planner\u0027s content (`add`, `delete`, and `clear`)."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* `delete c/CS1010` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "`undo` (reverses the `delete c/CS1010` command) +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* `goto y/1 s/1` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* `delete c/CS1010` +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "`undo` (reverses the `delete c/CS1010` command) +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* `delete c/CS1010` +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "`undo` (reverses the `delete c/CS1010` command) +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "`redo` (reapplies the `delete c/CS1010` command) +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* `delete c/CS1010` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* `delete c/CS1010` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "`undo` (reverses the `delete c/CS1010` command) +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "`redo` (reapplies the `delete c/CS1010` command) +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d Clearing all modules : `clear`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Clears all modules added into Module Planner and the module suggestion. +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Module Planner data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Module Planner folder."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Add* `add y/YEAR s/SEMESTER c/MODULE_CODE...` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "e.g. `add y/1 s/1 c/CS1231 c/CS1101S`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Delete* : `delete c/MODULE_CODE...` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "e.g. `delete c/CS1231 c/MA1521`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Find* : `find c/MODULE_CODE` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "e.g. `find c/CS1O10`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Goto* : `goto y/YEAR s/SEMESTER` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "e.g. `goto y/1 s/1`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* *List* : `list [y/YEAR]` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "e.g. `list y/1`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* *Setup* : `setup m/MAJOR [f/FOCUS_AREA]` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "e.g. `setup m/computer science f/machine learning`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* *Status* : `status`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* *Suggest* : `suggest y/YEAR s/SEMESTER` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "e.g. `suggest y/1 s/1`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 24,
      "GabrielYik": 95,
      "rongjiecomputer": 67,
      "-": 147,
      "Hilda-Ang": 63
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Runs all tests in the `seedu.planner.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Runs all non-GUI tests in the `seedu.planner`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 111
    }
  },
  {
    "path": "docs/stylesheets/gh-pages.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@import url(https://fonts.googleapis.com/css?family\u003dMontserrat|Open+Sans);"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@import \"asciidoctor.css\"; /* Default asciidoc style framework - important */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/* Custom block: details */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    border-left: .25rem solid rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: .5rem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/* Overrides for asciidoctor.css */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #0074c7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "h1,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.link,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "h2,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "h2 \u003e a.link,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "h3,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "h3 \u003e a.link,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle \u003e a.link,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title \u003e a.link,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "h4,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "h4 \u003e a.link,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "h5,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "h5 \u003e a.link,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "h6,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "h6 \u003e a.link {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #e46c0a;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/* Overrides coderay syntx highlight */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".CodeRay .directive {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    color: #bf0000 !important;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".CodeRay .predefined-type {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    color: #256cb3 !important;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".CodeRay .reserved, .CodeRay .keyword {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    color: #ffa500 !important;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ".CodeRay .type {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    color: #008b8b !important;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content \u003e .title,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock \u003e .title,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .title,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock \u003e .title,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock \u003e .title,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock \u003e .title,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".stemblock \u003e .title,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".openblock \u003e .title,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph \u003e.title,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock \u003e .title,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock \u003e .title,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock \u003e .title,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".videoblock \u003e .title,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".dlist \u003e .title,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".olist \u003e .title,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".ulist \u003e .title,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".qlist \u003e .title,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist \u003e .title {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgb(197, 90, 17);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        background-color: #f6f6f6;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        border-top: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer-text {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        color: #595959;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        line-height: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "/* Utilities */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 62.5rem;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "/* Colors */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-light {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #f8f9fa;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-lighter {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fbfbfb;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "/* Navbar */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: nowrap;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1rem;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px 1rem;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.3rem;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #595959;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:hover,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:focus {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:hover,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:focus {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:hover,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:focus {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px transparent solid;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link.active {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px #e46c0a solid;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .nav-link.active {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 0;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar \u003e .container {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: 1rem;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0.8125rem 0rem;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: 0.9375rem;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.25rem;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand img {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 1.4rem;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0rem 0.4rem;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.7rem;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand img {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 2.3rem;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-nav {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-grow: 1;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    align-items: center;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".nav-link {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0px;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1rem 1rem;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "/* Do not display site header on print mediums */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    #seedu-header {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    #site-header {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 17,
      "-": 214
    }
  },
  {
    "path": "docs/team/gabrielyik.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d Gabriel Yik - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d Project: ModulePlanner"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "This is a project portfolio about a team project that I have completed recently."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The product born from this effort is called ModulePlanner."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d About Project"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "ModulePlanner is an desktop application that helps Computer Science students in the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "National University of Singapore to plan their modules throughout their academic journey."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "It is built on top of an existing application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "It has a graphical user interface but the user interacts with it mainly through the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "command line interface (keyboard only)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "The main features are the adding and deleting of modules, as well as the suggesting of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "new modules that the user can take based on their academic requirements."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "Over the next few sections, I will describe my role and contributions to the project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d Role"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* UI in-charge"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Major Enhancement"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Enhance Delete Command*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** The `delete` command allows the deletion of modules from ModulePlanner."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** When modules are deleted, modules that have the former as one of their prerequisites are"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   deleted too. This continues until no more modules are deleted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** This enhanced command is better than a simple delete which only deletes modules specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   without any awareness of other modules that depend on them."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** The automatic removal of invalid modules in ModulePlanner assures the user that whatever"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   they see in ModulePlanner is up-to-date."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** The user too does not have to manually look through modules that have their prerequisites"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   violated, hence saving them time and effort."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Minor Enhancements"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Setup Command*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Co-authored the `setup` command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** `setup` asks the user to input to their major and optionally their focus areas."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   This gives ModulePlanner the necessary information to tailor the modules suggested to the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Find and Goto Commands*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** The `find` command allows retrieval of module information."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** The `goto` command allows switching between the different year-semester user interface (ui) views."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *UI and Associated Behaviours*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Added a column to display suggested modules and another to display"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   results of the `find` and `status` commands."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Updated the application icon to fit ModulePlanner."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d\u003d Other Contributions"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *README*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Updated to reflect what ModulePlanner is and how it can solve the user\u0027s problems"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   in planning their modules."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *User Guide*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Updated with information on how to use the `delete`, `find` and `goto` commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Ordered some of the commands in the User Guide alphabetically to make it easier"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   for the user to find the command they are looking for. The other commands are"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   ordered based on when they are meant to be used (placed by my teammate Rong Jie)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Developer Guide*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Updated with descriptions on how the `delete` command is implemented, why it was"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   so, and any alternative implementations considered."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Updated the PowerPoints of the diagrams (except for the ones that fall under"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   my teammates\u0027 features) in the Developer Guide to reflect the structure and behaviour"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   of ModulePlanner."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Pull Requests Reviews*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Reviewed the pull requests of my teammates."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Areas checked include: coding style, index errors, possible regressions to other"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   components and the pros and cons of adding new classes and structure."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Examples with non-trivial comments:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   https://github.com/CS2103-AY1819S1-T16-4/main/pull/114[[1]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   https://github.com/CS2103-AY1819S1-T16-4/main/pull/174[[2]]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   https://github.com/CS2103-AY1819S1-T16-4/main/pull/189[[3]]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   https://github.com/CS2103-AY1819S1-T16-4/main/pull/190[[4]]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   https://github.com/CS2103-AY1819S1-T16-4/main/pull/199[[5]]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Github Issue Tracker*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Added new issues that arose from offline team discussions and bug discoveries."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Assigned teammates to the corresponding bug reports from other teams."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Github Projects Board*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Managed frequently during the earlier parts of the project when lots of ideas and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   changes were happening."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Added in important notes like the team coding standard, the team workflow and to-dos."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Github Releases*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Managed the releases of `v1.2` and `v1.3`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "* *Report Bugs and Offered Suggestions for Others*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Found and reported bugs for another team working on the same project."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "** Suggestions were also offered to improve their application."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d Contributions to Code"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|_The link below brings you to my code contribution dashboard. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "  They showcase my ability to write code that is readable and maintainable._"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "include::https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dgabrielyik[Code Contributions]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|_Given below are some sections I contributed to the User Guide. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "  They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlabelledUi]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "include::../UserGuide.adoc[tag\u003dgoto]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|_Given below are some sections I contributed to the Developer Guide. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "  They showcase my ability to write technical documentation and the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "  technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgoto]"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 135
    }
  },
  {
    "path": "docs/team/hilda-ang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d Hilda Anggraeni - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d PROJECT: ModulePlanner"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "This project portfolio showcases the contributions I have made in a team project under the module *CS2103T: Software Engineering*. I worked in a team of four Computer Science students to develop a product named *ModulePlanner*, which is built on top of an existing software (AddressBook - Level 4)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*ModulePlanner* is a desktop application made to help Computer Science and Computer Engineering students in National University of Singapore plan their modules for their entire candidature periods. It is designed to be used mainly through a Command Line Interface (CLI), although it also provides a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "The main features include:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Suggesting available modules based on major requirements and modules\u0027 prerequisites."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Adding and deleting modules to or from the planner."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "|_Given below are enhancements I implemented for the product and other contributions I made to the team. They showcase my abilities in software engineering and in working with a team._"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* *Major enhancement*: added the ability to *suggest available modules to the user*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** What it does: allows the user to see the modules he/she is available to take in each semester, based on the modules he/she has added to the planner."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Justification: This feature helps the user plan modules by generating and listing available modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Highlights: This is the main feature of our application. It required a careful consideration of several design alternatives and implementation choices. The implementation was challenging as it interacted with various components and other commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Pull requests: https://github.com/CS2103-AY1819S1-T16-4/main/pull/78[#78], https://github.com/CS2103-AY1819S1-T16-4/main/pull/81[#81], https://github.com/CS2103-AY1819S1-T16-4/main/pull/125[#125], https://github.com/CS2103-AY1819S1-T16-4/main/pull/146[#146], https://github.com/CS2103-AY1819S1-T16-4/main/pull/160[#160], https://github.com/CS2103-AY1819S1-T16-4/main/pull/191[#191]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* *Minor enhancement*: added the ability to *list modules that the user has taken*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** What it does: allows user to see the modules he/she has added to all years or to a specific year."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Justifications: This feature helps the user to quickly check what module(s) he/she has added to the planner."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Pull requests: https://github.com/CS2103-AY1819S1-T16-4/main/pull/33[#33], https://github.com/CS2103-AY1819S1-T16-4/main/pull/68[#68], https://github.com/CS2103-AY1819S1-T16-4/main/pull/114[#114], https://github.com/CS2103-AY1819S1-T16-4/main/pull/143[#143], https://github.com/CS2103-AY1819S1-T16-4/main/pull/189[#189], https://github.com/CS2103-AY1819S1-T16-4/main/pull/195[#195]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dhilda-ang]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** Recorded each of the user stories as an issue (examples: https://github.com/CS2103-AY1819S1-T16-4/main/issues/11[1], https://github.com/CS2103-AY1819S1-T16-4/main/issues/12[2], https://github.com/CS2103-AY1819S1-T16-4/main/issues/13[3])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** Assigned team members to issues and issues to milestones (examples: https://github.com/CS2103-AY1819S1-T16-4/main/issues/39[1], https://github.com/CS2103-AY1819S1-T16-4/main/issues/73[2], https://github.com/CS2103-AY1819S1-T16-4/main/issues/74[3])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** Set a deadline for each milestone on Github"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** Refactored AddressBook to ModulePlanner (Pull requests https://github.com/CS2103-AY1819S1-T16-4/main/pull/113[#113], https://github.com/CS2103-AY1819S1-T16-4/main/pull/129[#129])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** Rewrote tests for shared classes (Pull requests https://github.com/CS2103-AY1819S1-T16-4/main/pull/147[#147], https://github.com/CS2103-AY1819S1-T16-4/main/pull/201[#201])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** Removed year and semester parameters from setup command (Pull request https://github.com/CS2103-AY1819S1-T16-4/main/pull/161[#161])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** Modified User Guide to be relevant to current project (Pull requests https://github.com/CS2103-AY1819S1-T16-4/main/pull/6[#6], https://github.com/CS2103-AY1819S1-T16-4/main/pull/67[#67])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** Added description about the implementation of `suggest` and `list` commands in Developer Guide (Pull requests https://github.com/CS2103-AY1819S1-T16-4/main/pull/82[#82], https://github.com/CS2103-AY1819S1-T16-4/main/pull/210[#210])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** PRs reviewed with non-trivial review comments (Pull requests https://github.com/CS2103-AY1819S1-T16-4/main/pull/65[#65], https://github.com/CS2103-AY1819S1-T16-4/main/pull/136[#136], https://github.com/CS2103-AY1819S1-T16-4/main/pull/202[#202])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** Reported bugs for other team in the class (examples: https://github.com/CS2103-AY1819S1-W14-1/main/issues/193[1], https://github.com/CS2103-AY1819S1-W14-1/main/issues/200[2], https://github.com/CS2103-AY1819S1-W14-1/main/issues/223[3])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** Integrated a Github plugin (Coveralls) for code coverage checking to the team repo (Pull request https://github.com/CS2103-AY1819S1-T16-4/main/pull/144[#144])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "*** Configured repo to be compatible with RepoSense by adding a config file (Pull request https://github.com/CS2103-AY1819S1-T16-4/main/pull/124[#124])"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsuggest]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlist]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsuggest]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlist]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hilda-Ang": 77
    }
  },
  {
    "path": "docs/team/romaromama.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d Rezky Arizaputra  - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d PROJECT: ModulePlanner"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "This is a project portfolio about a team project called ModulePlanner which I took part in."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "ModulePlanner is a desktop application currently designed for Computer Science students of National University of Singapore"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "to help them plan for their modules."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "The main interface used to interact with the app is through the Command Line Interface (CLI), but the result of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "the interactions are presented in the Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d Role"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Developer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d Major Enhancements"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Implemented the `add` command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** What it does: Allows the user to add modules to the planner after passing several checkings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "*** These checkings are based from realistic limitations implemented on taking modules in NUS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Justification: Prevents the user to have an invalid study plan"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Highlight: It takes realistic considerations such as not allowing to take 2 equivalent modules on the same semester"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "and not allowing to add modules which prerequisites has not been fulfilled."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d Minor Enhancement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Added UI for displaying `status` command result"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Implemented `status` command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** What it does: Allows the user to keep track of their progress in the planner"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Justification: Prevents the user to take unnecessary modules"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Hightlight: Takes into account the focus area of the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d Code Contribution"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dRomaRomama[Code Contribution]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d\u003d Other Contributions"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Updated documentations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Updated User Guide section \u0027add\u0027 and \u0027delete\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Updated Developer Guide section Add feature, Status Feature, and appendix C"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Added images used for the sections above"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Enhancement to feature implemented by other teammates"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Implement the ability to group preclusions and prerequisites into equivalent classes"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "(https://github.com/CS2103-AY1819S1-T16-4/main/pull/174[#174])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Refactor shared classes"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "** Refactor events classes"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "(https://github.com/CS2103-AY1819S1-T16-4/main/pull/216[#216])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "* Reported bugs in some teammates\u0027 codes"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadd]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstatus]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dadd]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstatus]"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 75
    }
  },
  {
    "path": "docs/team/rongjiecomputer.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d Loo Rong Jie - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T16-4/main/blob/master"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d PROJECT: ModulePlanner"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "This is a project portfolio about a team project called Module Planner when taking CS2103T,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Software Engineering."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "Module Planner is a desktop module planning application to help National University of Singapore (NUS) Computer Science students"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "figuring out what modules in order to graduate. The user interacts with it using a Command Line"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "The main features are the adding and deleting of modules, as well as the suggesting of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "new modules that the user can take based on their academic requirements."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d Role"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Developer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Storage code owner"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d Major enhancement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Implement mechanism to retrieve NUS academic major and module information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** What it does: Pre-process academic major and module information from https://nusmods.com[NUSMods],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "convert it into JSON format and package it into the JAR file for use of the application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Justification: All main commands in Module Planner (`add`, `delete`, `suggest` and `status`) rely on"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "information about NUS academic majors and modules to function."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "** Highlight:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** This requires a clear understanding of the types of information about academic major and module"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "as well as how they relate with each other so that they can be represented as well-designed classes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Scripting experience is needed to pre-process the data from external sources so that it can be easily"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "manipulated in application code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "*** Need to strike a balance between the potential implementation complexity of other commands and the accuracy"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "of the processed data to meet NUS students\u0027 expectation."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d Minor enhancements"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Implement the ability to sort module suggestion based on user\u0027s academic major requirement."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "(https://github.com/CS2103-AY1819S1-T16-4/main/pull/190[#190])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Implement the ability to read and write module planner data in JSON file format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Co-author `setup` command with Gabriel Yik to initialize user\u0027s academic major and focus areas."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d Code contributed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003drongjiecomputer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d Other contributions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d Community"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Reviewed teammates\u0027 pull requests (examples:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "https://github.com/CS2103-AY1819S1-T16-4/main/pull/199[#199])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Contributed to forum discussions (examples:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "https://github.com/nus-cs2103-AY1819S1/forum/issues/46#issuecomment-424655417[#46],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "https://github.com/nus-cs2103-AY1819S1/forum/issues/115#issuecomment-432646664[#115],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "https://github.com/nus-cs2103-AY1819S1/forum/issues/122#issuecomment-433412750[#122])"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Reported bugs and suggestions for other teams in the class (examples:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-1/main/issues/151[#151],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-1/main/issues/157[#157])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d\u003d\u003d Tools:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Integrated CI services (Travis and Appveyor) to the project (https://github.com/CS2103-AY1819S1-T16-4/main/pull/2[#2])"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "* Integrated Netlify service into PR workflow so that reviewer can review documentation changes easily."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|_Given below are some of the sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsetup]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|_Given below are some of the sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstorage]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmoduleinfo]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsetup]"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 84,
      "Hilda-Ang": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/planner/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.storage.JsonModulePlannerStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.storage.ModulePlannerStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Module Planner ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlannerStorage modulePlannerStorage \u003d new JsonModulePlannerStorage("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            userPrefs.getModulePlannerFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        storage \u003d new StorageManager(modulePlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s planner book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * The data from the sample planner book will be used instead if {@code storage}\u0027s planner book is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * or an empty planner book will be used instead if errors occur when reading {@code storage}\u0027s planner book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Optional\u003cReadOnlyModulePlanner\u003e modulePlannerOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ReadOnlyModulePlanner initialModulePlanner;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            modulePlannerOptional \u003d storage.readModulePlanner();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (!modulePlannerOptional.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a empty ModulePlanner\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            initialModulePlanner \u003d modulePlannerOptional.orElse(new ModulePlanner());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ModulePlanner\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            initialModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return new ModelManager(initialModulePlanner, userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        logger.info(\"Starting Module Planner \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Module Planner ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 42,
      "-": 162,
      "Hilda-Ang": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private String appTitle \u003d \"Module Planner\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath.toAbsolutePath(), o.userPrefsFilePath.toAbsolutePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String LOG_FILE \u003d \"moduleplanner.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 2,
      "-": 125
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_NOT_OFFERED_MODULES \u003d \"Not offered module(s): %1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETERS \u003d \"Invalid parameters\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 2,
      "rongjiecomputer": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/model/ModulePlannerChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.semester.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Indicates the ModulePlanner in the model has changed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModulePlannerChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public final ReadOnlyModulePlanner data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModulePlannerChangedEvent(ReadOnlyModulePlanner data) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cSemester\u003e semesters \u003d data.getSemesters();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            sb.append(semester.toString() + \" : \" + semester.getModules().size() + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 31
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/storage/DataSavingExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataSavingExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataSavingExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/AddEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * An event that moves the current ui view to the period"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * where the module(s) is/are added."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class AddEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public final int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public AddEvent(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 2,
      "GabrielYik": 23
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/ClearEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * An event that clears all data from the ui."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ClearEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 14
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Indicates a request for App termination."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/FindEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * An event to display information of a module in response to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * the {@code Find} command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class FindEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final Module module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public FindEvent(Module module) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Module getModule() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 2,
      "GabrielYik": 24
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/GoToEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * An event to switch the year semester view in the ui."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class GoToEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public GoToEvent(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 24
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/ListEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * An event to display list of modules taken in response to list command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class ListEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // indicates that user requested to see list of taken modules for all years"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final int ALL_YEARS \u003d -1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public ListEvent(int year) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 2,
      "GabrielYik": 6,
      "Hilda-Ang": 18
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewResultAvailableEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/ShowHelpRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowHelpRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/StatusEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.course.DegreeRequirement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * An event to display the progress of the user in response to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * the {@code Status} command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class StatusEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private ObservableMap\u003cDegreeRequirement, int[]\u003e statusMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public StatusEvent(ObservableMap\u003cDegreeRequirement, int[]\u003e statusMap) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        this.statusMap \u003d statusMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableMap\u003cDegreeRequirement, int[]\u003e getStatusMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return statusMap; }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 8,
      "GabrielYik": 17,
      "rongjiecomputer": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/SuggestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * An event to display list of modules available in response to suggest command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class SuggestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final ObservableList\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public SuggestEvent(ObservableList\u003cModule\u003e moduleList, int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 2,
      "GabrielYik": 7,
      "Hilda-Ang": 24
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns any one element of the collection."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param items The collection"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param \u003cE\u003e The runtime type of the elements in the collection"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return Any one element of the collection"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static \u003cE\u003e Optional\u003cE\u003e getAnyOne(Collection\u003cE\u003e items) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (items.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cE\u003e list \u003d new ArrayList\u003c\u003e(items);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return Optional.of(list.get(0));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if both collections have the same items, irregardless of order."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param items1 The first collection"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param items2 The second collection"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param \u003cE\u003e The runtime type of the elements in the collections"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the both collections have the same items, irregardless of order,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *  else false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static \u003cE\u003e boolean areEqualIgnoreOrder(Collection\u003cE\u003e items1, Collection\u003cE\u003e items2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireAllNonNull(items1, items1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return items1.stream().allMatch(x -\u003e items2.stream().anyMatch(x::equals))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                \u0026\u0026 items2.stream().allMatch(y -\u003e items1.stream().anyMatch(y::equals));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Takes the elements in a collection and combines them into a string"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * with each element separated by a whitespace."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The class of the element has to override the {@code toString()} method"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * for this method to work properly."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param collection The collection"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param \u003cE\u003e The runtime type of the collection"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The string containing all the elements in the collection"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static \u003cE\u003e String convertCollectionToString(Collection\u003cE\u003e collection) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(collection);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (E e : collection) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            list.add(e.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Collections.sort(list);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (String s : list) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            sb.append(s + \" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return sb.toString().trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Formats the {@code message} with the String associated with the {@code collection}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param message The message"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param collection The collection"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param \u003cE\u003e The runtime type of the collection"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The formatted message"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static \u003cE\u003e String formatMessage(String message, Collection\u003cE\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireAllNonNull(message, collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return String.format(message, convertCollectionToString(collection));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 74,
      "rongjiecomputer": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import com.google.common.base.Charsets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import com.google.common.io.Resources;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.MainApp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static ObjectMapper getObjectMapper() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return objectMapper;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Extract JSON file from resource and deserialize its content."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param path The path string of the resource file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static \u003cT\u003e T readJsonResourceFile(String path, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        URL resource \u003d MainApp.class.getResource(path);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String text \u003d Resources.toString(resource, Charsets.UTF_8);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return fromJsonString(text, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 29,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/Pair.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A convenience class to represent a pair of values."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class Pair {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final Object first;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final Object second;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Pair(Object first, Object second) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.first \u003d first;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.second \u003d second;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Object getFirst() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return first;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Object getSecond() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return second;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof Pair)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Pair pair \u003d (Pair) other;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return first.equals(pair.first) \u0026\u0026 second.equals(pair.second);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 37
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String ALL_LETTERS_AND_WHITESPACE_REGEX \u003d \"[a-zA-Z]+( +[a-zA-Z]+)*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String ALL_NUMBERS_REGEX \u003d \"[0-9]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if the String, which is a number, can be parsed by {@code Integer#parseInt}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param s The String"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the String can be parsed, false otherwise"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean isParsableInteger(String s) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            Integer.parseInt(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if the String contains only alphabets."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param s The String"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the String contains only alphabets, false otherwise"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean containsOnlyLettersAndWhiteSpace(String s) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return s.trim().matches(ALL_LETTERS_AND_WHITESPACE_REGEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if the String contains only numbers."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param s The String"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the String contains only numbers"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean containsOnlyNumbers(String s) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return s.matches(ALL_NUMBERS_REGEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if two strings are equal while ignoring their cases."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param s1 The first string"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param s2 The second string"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if both strings are equal while ignoring their case,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *  false otherwise"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean areEqualIgnoreCase(String s1, String s2) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireAllNonNull(s1, s2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return s1.toLowerCase().trim().equals(s2.toLowerCase().trim());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Capitalizes the first letter of each word in the {@code sentence}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * and ensures that the other letters are not."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param sentence The sentence"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The sentence with each word having its first"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *  letter capitalized"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static String capitalizeSentence(String sentence) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String[] words \u003d sentence.split(\" \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (String word : words) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (containsOnlyLettersAndWhiteSpace(word)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                word \u003d capitalizeWord(word);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                sb.append(word + \" \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return sb.toString().trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Capitalizes the first letter of the {@code word}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * If the word is made up of a single letter,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * the letter itself is capitalized."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param word The word"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The word with each first letter capitalized"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static String capitalizeWord(String word) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (word.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return word.toUpperCase();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            String capitalizedWord \u003d word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return capitalizedWord.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 104,
      "rongjiecomputer": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /** Returns an unmodifiable view of the list of taken modules for a specific index*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    ObservableList\u003cModule\u003e getTakenModulesForIndex(int index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /** Returns an unmodifiable view of the list of available modules */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getAvailableModules();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /** Returns an unmodifiable view of the list of taken modules */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    ObservableList\u003cModule\u003e getTakenModules();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 5,
      "rongjiecomputer": 4,
      "-": 20,
      "Hilda-Ang": 4
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.parser.ModulePlannerParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final ModulePlannerParser modulePlannerParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlannerParser \u003d new ModulePlannerParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            Command command \u003d modulePlannerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getTakenModulesForIndex(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return model.getTakenModulesForIndex(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getAvailableModules() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return model.getAvailableModules();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getTakenModules() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return model.getTakenModules();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 15,
      "rongjiecomputer": 8,
      "-": 34,
      "Hilda-Ang": 9
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.areEqualIgnoreOrder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.convertCollectionToString;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.formatMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.AddEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.util.ModuleUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "//@@author RomaRomama"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " * Add a module to the module planner"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \": Add current/future modules to the module planner. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_CODE + \"MODULE CODE... \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_YEAR + \"2 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_SEMESTER + \"2 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_CODE + \"CS3244 \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added Module(s): %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_EQUIVALENT \u003d \"Following module(s) are equivalent: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_EXISTED_MODULES \u003d \"Following module(s) already exist in the planner: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_PRECLUDED_MODULES \u003d \"Following module(s) have some of their preclusions\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \" not fulfilled in the planner: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_UNFULFILLED \u003d \"Following module(s) have their prerequisites not fulfilled\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \" in the planner: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private final int semesterIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private final Set\u003cModule\u003e modulesToAdd;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Add module method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public AddCommand(Set\u003cModule\u003e modules, int index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        requireAllNonNull(modules, index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        semesterIndex \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modulesToAdd \u003d new HashSet\u003c\u003e(modules);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        message \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Retrieves all modules not offered from the set based on the model."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param model Model used"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return List of modules not offered"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private List\u003cModule\u003e retrieveNotOfferedModules(Model model) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e notOfferedModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module m : modulesToAdd) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (!model.isModuleOffered(m)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                notOfferedModules.add(m);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return notOfferedModules;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Retrieves all modules from the set that exist in the model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param model Model used"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return List of existing modules"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private List\u003cModule\u003e retrieveExistingModules(Model model) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e existingModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module m : modulesToAdd) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (model.hasModule(m)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                existingModules.add(m);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return existingModules;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Retrieves all precluded modules from the set based from the model."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param model Model used"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return List of precluded modules"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private Set\u003cModule\u003e retrievePrecludedModules(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        Set\u003cModule\u003e precludedModules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module m : modulesToAdd) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            List\u003cModuleInfo\u003e preclusions \u003d m.getPreclusions();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            for (ModuleInfo preclusion: preclusions) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                if (model.hasModule(new Module(preclusion.getCode()))) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    precludedModules.add(m);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return precludedModules;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Retrieves all equivalent modules from the set."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return all grouping of equivalent modules with more than 1 member"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private List\u003cList\u003cModule\u003e\u003e retrieveEquivalentModules() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return ModuleUtil.findModuleEquivalences(new ArrayList\u003c\u003e(modulesToAdd));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Retrieves all modules from the set which some of their prerequisites has not been fulfilled in the Model."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param model Model used"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return List of all unfulfilled modules"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private List\u003cModule\u003e retrieveUnfulfilledModules(Model model) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e unfulfilledModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e upToIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        while (i \u003c semesterIndex) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            upToIndex.addAll(model.getTakenModulesForIndex(i));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module m : modulesToAdd) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (!ModuleUtil.hasFulfilledAllPrerequisites(upToIndex, m)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                unfulfilledModules.add(m);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return unfulfilledModules;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Remove modules not offered from the set."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param model Model used"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @throws CommandException if all modules in the set are not offered"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void removeNotOfferedModules(Model model) throws CommandException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e notOfferedModules \u003d retrieveNotOfferedModules(model);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!notOfferedModules.isEmpty()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            boolean areAllModulesOffered \u003d notOfferedModules.size() \u003d\u003d modulesToAdd.size();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            message +\u003d formatMessage(Messages.MESSAGE_NOT_OFFERED_MODULES, notOfferedModules) + \"\\n\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (areAllModulesOffered) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                throw new CommandException(message.trim());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                modulesToAdd.removeAll(notOfferedModules);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Remove all existing modules from the set."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param model Model used"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @throws CommandException if all modules in the set already exist in the model"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void removeExistingModules(Model model) throws CommandException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e existingModules \u003d retrieveExistingModules(model);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!existingModules.isEmpty()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            boolean areAllModulesExist \u003d existingModules.size() \u003d\u003d modulesToAdd.size();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            message +\u003d formatMessage(MESSAGE_EXISTED_MODULES, existingModules) + \"\\n\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (areAllModulesExist) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                throw new CommandException(message.trim());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                modulesToAdd.removeAll(existingModules);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Remove all precluded modules."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param model Model used"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @throws CommandException if all modules in the set is precluded"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void removePrecludedModules(Model model) throws CommandException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        Set\u003cModule\u003e precludedModules \u003d retrievePrecludedModules(model);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!precludedModules.isEmpty()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            boolean areAllModulesPrecluded \u003d precludedModules.size() \u003d\u003d modulesToAdd.size();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            message +\u003d formatMessage(MESSAGE_PRECLUDED_MODULES, precludedModules) + \"\\n\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (areAllModulesPrecluded) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                throw new CommandException(message.trim());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                modulesToAdd.removeAll(precludedModules);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Remove all equivalent modules."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @throws CommandException if no single modules in the set"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void removeEquivalentModules() throws CommandException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cList\u003cModule\u003e\u003e equivalentModules \u003d retrieveEquivalentModules();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!equivalentModules.isEmpty()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            int numberOfModules \u003d 0;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            for (List\u003cModule\u003e equivalence : equivalentModules) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                numberOfModules +\u003d equivalence.size();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                sb.append(\"(\").append(convertCollectionToString(equivalence)).append(\") \");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            boolean areAllModuleNonSingle \u003d numberOfModules \u003d\u003d modulesToAdd.size();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            message +\u003d String.format(MESSAGE_EQUIVALENT, sb.toString().trim()) + \"\\n\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (areAllModuleNonSingle) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                throw new CommandException(message.trim());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                for (List\u003cModule\u003e equivalence : equivalentModules) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    modulesToAdd.removeAll(equivalence);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Remove all unfulfilled modules."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param model Model used"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @throws CommandException if all modules in the set is unfulfilled"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void removeUnfulfilledModules(Model model) throws CommandException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e unfulfilledModules \u003d retrieveUnfulfilledModules(model);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!unfulfilledModules.isEmpty()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            boolean areAllModuleUnfulfilled \u003d unfulfilledModules.size() \u003d\u003d modulesToAdd.size();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            message +\u003d formatMessage(MESSAGE_UNFULFILLED, unfulfilledModules) + \"\\n\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (areAllModuleUnfulfilled) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                throw new CommandException(message.trim());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                modulesToAdd.removeAll(unfulfilledModules);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        removeNotOfferedModules(model);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        removeExistingModules(model);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        removePrecludedModules(model);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        removeEquivalentModules();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        removeUnfulfilledModules(model);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        model.addModules(modulesToAdd, semesterIndex);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        model.commitModulePlanner();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        String successMessage \u003d formatMessage(MESSAGE_SUCCESS, modulesToAdd);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        message \u003d successMessage + \"\\n\" + message;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        EventsCenter.getInstance().post(new AddEvent(semesterIndex));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return new CommandResult(message.trim());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!(other instanceof AddCommand)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        AddCommand command \u003d (AddCommand) other;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return areEqualIgnoreOrder(modulesToAdd, command.modulesToAdd)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                \u0026\u0026 semesterIndex \u003d\u003d command.semesterIndex;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 281,
      "GabrielYik": 5,
      "rongjiecomputer": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.ui.ClearEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Clears the planner book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module planner has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.resetData(new ModulePlanner());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.commitModulePlanner();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        EventsCenter.getInstance().post(new ClearEvent());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 4,
      "rongjiecomputer": 4,
      "-": 17,
      "Hilda-Ang": 4
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.areEqualIgnoreOrder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.formatMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Deletes a module identified using its module code from the module planner."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \": Deletes the module identified using it\u0027s module code.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_CODE + \"MODULE CODE... \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_CODE + \"CS2103T \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULES_SUCCESS \u003d \"Deleted Module(s): %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_NON_EXISTENT_MODULES \u003d \"Non-existent modules: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteCommand.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final Set\u003cModule\u003e modulesToDelete;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public DeleteCommand(Set\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        modulesToDelete \u003d new HashSet\u003c\u003e(modules);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        message \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assert message.equals(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        removeNonExistentModules(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        model.deleteModules(modulesToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        model.commitModulePlanner();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String successMessage \u003d formatMessage(MESSAGE_DELETE_MODULES_SUCCESS, modulesToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        message \u003d successMessage + \"\\n\" + message;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new CommandResult(message.trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Removes the modules that are not in the {@code model}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The modules are checked against the {@code model} to see if they"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * are present."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param model The model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws CommandException if all modules to be deleted do not exist"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void removeNonExistentModules(Model model) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e nonExistentModules \u003d collectNonExistentModules(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!nonExistentModules.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            boolean areAllModulesNonExistent \u003d nonExistentModules.size() \u003d\u003d modulesToDelete.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            message +\u003d formatMessage(MESSAGE_NON_EXISTENT_MODULES, nonExistentModules) + \"\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (areAllModulesNonExistent) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                logger.fine(\"In delete command: \" + nonExistentModules + \" non existent\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                throw new CommandException(message.trim());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                modulesToDelete.removeAll(nonExistentModules);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Collects the modules that do not exist in {@code model}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param model The model where the modules are stored"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The modules that do not exist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private List\u003cModule\u003e collectNonExistentModules(Model model) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e nonExistentModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Module m : modulesToDelete) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (!model.hasModule(m)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                nonExistentModules.add(m);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return nonExistentModules;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof DeleteCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return areEqualIgnoreOrder(modulesToDelete, command.modulesToDelete);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 1,
      "GabrielYik": 114,
      "rongjiecomputer": 4
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Module Planner as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 5,
      "-": 17,
      "Hilda-Ang": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_NOT_OFFERED_MODULES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.getAnyOne;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.FindEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A class representing the {@code find} command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \": Retrieves information about the specified module. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_CODE + \"CS1010 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Retrieved module information for %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FindCommand.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Module moduleToFind;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public FindCommand(Module moduleToFind) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.moduleToFind \u003d moduleToFind;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!model.isModuleOffered(moduleToFind)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            logger.fine(\"In find command: \" + moduleToFind + \" not offered\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new CommandException(String.format("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    MESSAGE_NOT_OFFERED_MODULES, moduleToFind));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e finalizedModules \u003d model.finalizeModules(Set.of(moduleToFind));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Module finalizedModule \u003d getAnyOne(finalizedModules).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        EventsCenter.getInstance().post(new FindEvent(finalizedModule));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, moduleToFind));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof FindCommand)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        FindCommand command \u003d (FindCommand) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return moduleToFind.equals(command.moduleToFind);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 2,
      "GabrielYik": 72
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/GoToCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.convertYearAndSemesterToIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.isValidSemester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.isValidYear;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.ui.GoToEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A class representing the {@code goto} command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Goes from one tab to another.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_YEAR + \"1\" + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_SEMESTER + \"2\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String SHOWING_GOTO_MESSAGE \u003d \"Go to Y%1$sS%2$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GoToCommand.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final int semester;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Constructs a {@code GoToCommand}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param year The year to go to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param semester The semester in the year to go to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public GoToCommand(int year, int semester) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!isValidYear(year) || !isValidSemester(semester)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            logger.fine(\"In goto command: year \" + year + \" or semester \" + semester + \" invalid\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int tabIndex \u003d convertYearAndSemesterToIndex(year, semester);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        EventsCenter.getInstance().post(new GoToEvent(tabIndex));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new CommandResult(String.format(SHOWING_GOTO_MESSAGE, year, semester));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof GoToCommand)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        GoToCommand command \u003d (GoToCommand) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return this.year \u003d\u003d command.year \u0026\u0026 this.semester \u003d\u003d command.semester;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 80
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.VALUE_NOT_AVAILABLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.isValidYear;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.ListEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Lists all modules the user has taken for all years or for a specific year."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List modules taken for all years \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"or for a specific year. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_YEAR + \"1 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL \u003d \"Listed all modules taken.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS_YEAR \u003d \"Listed all modules taken for year %1$s.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(ListCommand.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates a ListCommand to list taken modules for all years or for a specific year."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ListCommand(int year) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logger.info(\"starting execution of list command\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // Lists modules taken for all years if no parameter year is supplied."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (year \u003d\u003d VALUE_NOT_AVAILABLE) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            model.listTakenModulesAll();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            logger.info(\"listed modules for all years\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            EventsCenter.getInstance().post(new ListEvent(year));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!isValidYear(year)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            logger.warning(\"error in list command execution due to invalid year\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // Lists modules taken for a specific year if a valid year is supplied."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.listTakenModulesForYear(year);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logger.info(\"listed modules for year \" + year);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        EventsCenter.getInstance().post(new ListEvent(year));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS_YEAR, year));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u0026\u0026 year \u003d\u003d ((ListCommand) other).year);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 1,
      "rongjiecomputer": 4,
      "Hilda-Ang": 74
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Reverts the {@code model}\u0027s planner book to its previously undone state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!model.canRedoModulePlanner()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.redoModulePlanner();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 5,
      "-": 22,
      "Hilda-Ang": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/SetUpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_FOCUS_AREA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.FocusArea;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.Major;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Sets up the user profile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class SetUpCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setup\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_MAJOR_CONSTRAINTS \u003d \"The major should contain only alphabets.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_FOCUS_AREA_CONSTRAINTS \u003d \"The focus area should contain only alphabets\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final String MESSAGE_INVALID_MAJOR \u003d \"Invalid major (%s)\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final String MESSAGE_INVALID_FOCUS_AREAS \u003d \"All focus area(s) are invalid\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_SET_UP_SUCCESS \u003d \"Set up complete.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Your User Profile\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Major: %1$s\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Focus Areas(s): %2$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \": Sets up your user profile.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_MAJOR + \"MAJOR \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"[\" + PREFIX_FOCUS_AREA + \"FOCUS AREA]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_MAJOR + \"Computer Science \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_FOCUS_AREA + \"Software Engineering \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            + PREFIX_FOCUS_AREA + \"Artificial Intelligence\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String major;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Set\u003cString\u003e focusAreas;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public SetUpCommand(String major, Set\u003cString\u003e focusAreas) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.focusAreas \u003d focusAreas;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String errorMsg \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Major mappedMajor \u003d Major.mapMajor(major);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (mappedMajor \u003d\u003d Major.UNKNOWN) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            errorMsg +\u003d String.format(MESSAGE_INVALID_MAJOR, major);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Set\u003cFocusArea\u003e mappedFocusAreas \u003d FocusArea.filterFocusAreas(focusAreas);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (!focusAreas.isEmpty() \u0026\u0026 mappedFocusAreas.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            errorMsg +\u003d String.format(MESSAGE_INVALID_FOCUS_AREAS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (errorMsg.length() \u003e 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            throw new CommandException(errorMsg);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        model.setUpUserProfile(mappedMajor, mappedFocusAreas);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                MESSAGE_SET_UP_SUCCESS, mappedMajor, CollectionUtil.convertCollectionToString(mappedFocusAreas)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof SetUpCommand)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        SetUpCommand command \u003d (SetUpCommand) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return this.major.equals(command.major)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                \u0026\u0026 this.focusAreas.equals(command.focusAreas);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 67,
      "rongjiecomputer": 23,
      "Hilda-Ang": 4
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/StatusCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.StatusEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.course.DegreeRequirement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " * Display the credit count status of the user in the planner"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class StatusCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"status\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the progress of\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \"the user and the required credit\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \"in each degree requirements\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \"Example: University Level Requirement: 8/20\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \"Foundation: 4/36...\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Status displayed\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        ObservableMap\u003cDegreeRequirement, int[]\u003e statusMap \u003d model.getStatus();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        EventsCenter.getInstance().post(new StatusEvent(statusMap));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 38
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/SuggestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.isValidIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.SuggestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Shows all modules that the user is available to take for a particular year and semester."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"suggest\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Show modules the user is available to take. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_YEAR + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_SEMESTER + \"1 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showed all available modules for specified year and semester.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(SuggestCommand.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates a SuggestCommand to list modules available for specified year and semester."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public SuggestCommand(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logger.info(\"starting execution of suggest command\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!isValidIndex(index)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            logger.warning(\"error in suggest command execution due to invalid index\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.suggestModules(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logger.info(\"suggested modules for index \" + index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        EventsCenter.getInstance().post(new SuggestEvent(model.getAvailableModules(), index));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                || (other instanceof SuggestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u0026\u0026 index \u003d\u003d ((SuggestCommand) other).index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 1,
      "Hilda-Ang": 70
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Reverts the {@code model}\u0027s planner book to its previous state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!model.canUndoModulePlanner()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.undoModulePlanner();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 5,
      "-": 22,
      "Hilda-Ang": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "//@@author RomaRomama"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * and temporarily return a String (Module code) object  for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR, PREFIX_SEMESTER, PREFIX_CODE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!argMultimap.containsAllPrefixes(PREFIX_YEAR, PREFIX_SEMESTER, PREFIX_CODE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        Set\u003cModule\u003e codes \u003d ParserUtil.parseModuleCodes(argMultimap.getAllValues(PREFIX_CODE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return new AddCommand(codes, IndexUtil.convertYearAndSemesterToIndex(year, semester));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 34,
      "GabrielYik": 2,
      "rongjiecomputer": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.ParserUtil.MESSAGE_EXTRA_PREFIX_VALUE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (values.size() \u003e 1 \u0026\u0026 CliSyntax.isPrefixLimitedToOne(prefix)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    MESSAGE_EXTRA_PREFIX_VALUE, prefix));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String getPreamble() throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean containsAllPrefixes(Prefix... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Prefix prefix : prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (!getValue(prefix).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks the number of values that are associated with the {@code prefix}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param prefix The prefix which values are to be counted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The number of values"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public int checkPrefixValueCount(Prefix prefix) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cString\u003e values \u003d argMultimap.get(prefix);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (values \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return values.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 35,
      "rongjiecomputer": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Prefix PREFIX_CODE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Prefix PREFIX_SEMESTER \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Prefix PREFIX_MAJOR \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Prefix PREFIX_FOCUS_AREA \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final Set\u003cPrefix\u003e prefixesLimitedToOne \u003d Set.of("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            PREFIX_YEAR, PREFIX_SEMESTER, PREFIX_MAJOR);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean isPrefixLimitedToOne(Prefix prefix) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return prefixesLimitedToOne.stream().anyMatch(x -\u003e x.equals(prefix));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 13,
      "rongjiecomputer": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A parser that parse an input argument and creates a DeleteCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteCommandParser.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                args, PREFIX_CODE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!argMultimap.containsAllPrefixes(PREFIX_CODE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            logger.fine(\"In delete command parser: no module code supplied\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e modules \u003d ParserUtil.parseModuleCodes(argMultimap.getAllValues(PREFIX_CODE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new DeleteCommand(modules);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 45
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.getAnyOne;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A parser that parses an argument for the {@code FindCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_EXTRA_PREFIX_VALUES \u003d \"Extra values for prefix %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FindCommandParser.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                args, PREFIX_CODE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!argMultimap.containsAllPrefixes(PREFIX_CODE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            logger.fine(\"In fine command parser: no module code supplied\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            String errorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(errorMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (argMultimap.checkPrefixValueCount(PREFIX_CODE) !\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            String errorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    String.format(MESSAGE_EXTRA_PREFIX_VALUES, PREFIX_CODE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            logger.fine(\"In fine command parser: extra module code supplied\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(errorMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e modules \u003d ParserUtil.parseModuleCodes(List.of(argMultimap.getValue(PREFIX_CODE).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Module module \u003d getAnyOne(modules).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new FindCommand(module);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 49
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/GoToCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A parser that parses an argument for the {@code GoToCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class GoToCommandParser implements Parser\u003cGoToCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GoToCommandParser.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public GoToCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                args, PREFIX_YEAR, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!argMultimap.containsAllPrefixes(PREFIX_YEAR, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            logger.fine(\"In goto command parser: year or semester or both not supplied\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new GoToCommand(year, semester);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 38
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.VALUE_NOT_AVAILABLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Parses input arguments and creates a new ListCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(ListCommandParser.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logger.info(\"parsing arguments for list command \" + args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_YEAR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            logger.warning(\"error in parsing arguments for list command due to invalid command format\" + args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String year \u003d argMultimap.getValue(PREFIX_YEAR).orElse(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (year \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return new ListCommand(VALUE_NOT_AVAILABLE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new ListCommand(ParserUtil.parseYear(year));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 4,
      "Hilda-Ang": 40
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ModulePlannerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.SetUpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.logic.commands.StatusCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ModulePlannerParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return new GoToCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case SetUpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return new SetUpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        case StatusCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            return new StatusCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case SuggestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return new SuggestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 4,
      "GabrielYik": 17,
      "rongjiecomputer": 11,
      "-": 67,
      "Hilda-Ang": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.StringUtil.containsOnlyNumbers;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.StringUtil.isParsableInteger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.SetUpCommand.MESSAGE_FOCUS_AREA_CONSTRAINTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.SetUpCommand.MESSAGE_MAJOR_CONSTRAINTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.model.module.ModuleInfo.MESSAGE_MODULE_CODE_CONSTRAINTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.util.ModuleUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Contains utility methods used for parsing strings in the various Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_INVALID_YEAR \u003d \"Year is not between 1 to 4.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_INVALID_SEMESTER \u003d \"Semester is not between 1 to 2.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_EXTRA_PREFIX_VALUE \u003d \"Input only one value for the prefix %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses the unverified {@code moduleCode} into a module."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param moduleCode The moduleCode"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The module"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if the moduleCode does not meet the constraints"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static Module parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (trimmedModuleCode.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(MESSAGE_MODULE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String upperCasedTrimmedModuleCode \u003d trimmedModuleCode.toUpperCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!ModuleUtil.hasValidCodeFormat(upperCasedTrimmedModuleCode)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(MESSAGE_MODULE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new Module(upperCasedTrimmedModuleCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses the unverified {@code moduleCodes} into a valid List of {@code modules}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Individual module codes are parsed using the method {@link #parseModuleCode(String) parseModuleCode}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if the given {@code moduleCodes} do not meet the constraints."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static Set\u003cModule\u003e parseModuleCodes(Collection\u003cString\u003e moduleCodes) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(moduleCodes);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e modules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (String m : moduleCodes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            modules.add(parseModuleCode(m));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses a major."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The major is checked if it\u0027s in the correct format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param major The major"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The major"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if the major\u0027s format is wrong"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static String parseMajor(String major) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String trimmedMajor \u003d major.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!StringUtil.containsOnlyLettersAndWhiteSpace(trimmedMajor)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(MESSAGE_MAJOR_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return trimmedMajor;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses a focus area."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The major is checked if it\u0027s in the correct format."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param focusArea The focus area"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The focus rea"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if the focus area\u0027s format is wrong"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static String parseFocusArea(String focusArea) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(focusArea);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String trimmedFocusArea \u003d focusArea.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!StringUtil.containsOnlyLettersAndWhiteSpace(trimmedFocusArea)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(MESSAGE_FOCUS_AREA_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return trimmedFocusArea;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses the focus areas."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The focus areas are checked if they\u0027re in the correct format."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Individual focus areas are checked using the method"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * {@link #parseFocusArea(String focusArea) parseFocusArea}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param focusAreas The focus areas"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The {@code Set} of focus areas"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if one of the focus areas\u0027 format is wrong"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static Set\u003cString\u003e parseFocusAreas(Collection\u003cString\u003e focusAreas) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(focusAreas);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        final Set\u003cString\u003e focusAreasSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (String focusArea : focusAreas) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            focusAreasSet.add(parseFocusArea(focusArea));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return focusAreasSet;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the unverified year into a valid year index."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the given year is invalid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static int parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!containsOnlyNumbers(trimmedYear) || !isParsableInteger(trimmedYear)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int yearIndex \u003d Integer.parseInt(trimmedYear);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!IndexUtil.isValidYear(yearIndex)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return yearIndex;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the unverified semester into a valid semester index."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the given semester is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static int parseSemester(String semester) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String trimmedSemester \u003d semester.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!containsOnlyNumbers(trimmedSemester) || !isParsableInteger(trimmedSemester)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int semesterIndex \u003d Integer.parseInt(trimmedSemester);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!IndexUtil.isValidSemester(semesterIndex)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return semesterIndex;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 1,
      "GabrielYik": 100,
      "rongjiecomputer": 4,
      "-": 14,
      "Hilda-Ang": 48
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/SetUpCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_FOCUS_AREA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.SetUpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A parser that parses input arguments and creates a SetUpCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class SetUpCommandParser implements Parser\u003cSetUpCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public SetUpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                args, PREFIX_MAJOR, PREFIX_FOCUS_AREA);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!argMultimap.containsAllPrefixes(PREFIX_MAJOR) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetUpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String major \u003d ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cString\u003e focusAreas \u003d ParserUtil.parseFocusAreas(argMultimap.getAllValues(PREFIX_FOCUS_AREA));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String formattedMajor \u003d StringUtil.capitalizeSentence(major);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cString\u003e formattedFocusAreas \u003d formatFocusAreas(focusAreas);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new SetUpCommand(formattedMajor, formattedFocusAreas);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Capitalizes the first letter of each word in each focus area in {@code focusAreas}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param focusAreas The focus areas"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return Formatted focus areas"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static Set\u003cString\u003e formatFocusAreas(Set\u003cString\u003e focusAreas) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cString\u003e formattedFocusAreas \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (String focusArea : focusAreas) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            formattedFocusAreas.add(StringUtil.capitalizeSentence(focusArea));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return formattedFocusAreas;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 50,
      "Hilda-Ang": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/SuggestCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Parses input arguments and creates a new SuggestCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class SuggestCommandParser implements Parser\u003cSuggestCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(SuggestCommandParser.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SuggestCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and returns a SuggestCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public SuggestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logger.info(\"parsing arguments for suggest command \" + args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_YEAR, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!argMultimap.containsAllPrefixes(PREFIX_YEAR, PREFIX_SEMESTER) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            logger.warning(\"error in parsing arguments for suggest command due to invalid command format\" + args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new SuggestCommand(IndexUtil.convertYearAndSemesterToIndex(year, semester));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hilda-Ang": 43
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.course.DegreeRequirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.FocusArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.Major;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Sets up the user profile."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param major The major"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param focusAreas The focus areas"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    void setUpUserProfile(Major major, Set\u003cFocusArea\u003e focusAreas);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    void resetData(ReadOnlyModulePlanner newData);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /** Returns the ModulePlanner */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    ReadOnlyModulePlanner getModulePlanner();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if the module exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param module The module"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the module with {@code moduleCode} exists, false if not"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if the {@code Module} is offered by the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * relevant educational institution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param module The module"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the module is offered, else false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    boolean isModuleOffered(Module module);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Deletes the modules."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param modules The modules"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    void deleteModules(Set\u003cModule\u003e modules);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Add set of modules into the specified semester"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param modules Set of modules"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param index Index of the semester"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    void addModules(Set\u003cModule\u003e modules, int index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    ObservableMap\u003cDegreeRequirement, int[]\u003e getStatus();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Displays modules that are available to the user in the specified index, in the list of suggested modules."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index An integer between 0 to 7 inclusive, signifying year and semester to be suggested."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    void suggestModules(int index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Displays all modules that user has added in every semester."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    void listTakenModulesAll();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Displays all modules that the user has added to a specified year."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param year A valid integer between 1 to 4 inclusive, signifying year to be listed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    void listTakenModulesForYear(int year);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Retrieves a list containing modules that have been taken (added to ModulePlanner) by the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return An unmodifiable view of modules taken by the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    ObservableList\u003cModule\u003e getTakenModules();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Retrieves the actual module information of the {@code modules}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and finalizes the modules with their actual module information."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Individual modules are finalized using the method"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * {@link ModelManager#finalizeModule(Module) finalizeModule}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules The modules to be finalized"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The modules with their actual module information"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    Set\u003cModule\u003e finalizeModules(Set\u003cModule\u003e modules);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Retrieves an unmodifiable view of the modules taken for (added to) a specified index."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index An integer between 0 to 7 inclusive."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return An unmodifiable list of modules taken for index."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    ObservableList\u003cModule\u003e getTakenModulesForIndex(int index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Retrieves an unmodifiable view of the modules taken for (added to) a specified index."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return An unmodifiable list of all modules that the user is available to take."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    ObservableList\u003cModule\u003e getAvailableModules();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns true if the model has previous planner book states to restore."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    boolean canUndoModulePlanner();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns true if the model has undone planner book states to restore."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    boolean canRedoModulePlanner();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Restores the model\u0027s planner book to its previous state."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    void undoModulePlanner();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Restores the model\u0027s planner book to its previously undone state."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    void redoModulePlanner();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Saves the current planner book state for undo/redo."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    void commitModulePlanner();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 9,
      "GabrielYik": 36,
      "rongjiecomputer": 5,
      "-": 12,
      "Hilda-Ang": 80
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.model.ModulePlanner.MAX_NUMBER_SEMESTERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.model.ModulePlannerChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.course.DegreeRequirement;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.FocusArea;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.Major;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.ModuleType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.user.UserProfile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Represents the in-memory model of the planner book data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final VersionedModulePlanner versionedModulePlanner;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final List\u003cSortedList\u003cModule\u003e\u003e takenModulesPerSemester;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final SortedList\u003cModule\u003e takenModules;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final SortedList\u003cModule\u003e availableModules;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Initializes a ModelManager with the given modulePlanner and userPrefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ModelManager(ReadOnlyModulePlanner modulePlanner, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireAllNonNull(modulePlanner, userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logger.fine(\"Initializing with planner: \" + modulePlanner + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        versionedModulePlanner \u003d new VersionedModulePlanner(modulePlanner);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        takenModulesPerSemester \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_NUMBER_SEMESTERS; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            ObservableList\u003cModule\u003e takenModules \u003d versionedModulePlanner.getTakenModulesForIndex(i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            SortedList\u003cModule\u003e sortedTakenModules \u003d new SortedList\u003c\u003e(takenModules, (x, y) -\u003e x.compareTo(y));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            takenModulesPerSemester.add(sortedTakenModules);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        takenModules \u003d new SortedList\u003c\u003e(versionedModulePlanner.getTakenModules(), (x, y) -\u003e x.compareTo(y));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        availableModules \u003d new SortedList\u003c\u003e(versionedModulePlanner.getAvailableModules());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this(new ModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void setUpUserProfile(Major major, Set\u003cFocusArea\u003e focusAreas) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.setUserProfile(new UserProfile(major, focusAreas));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void resetData(ReadOnlyModulePlanner newData) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.resetData(newData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ReadOnlyModulePlanner getModulePlanner() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return versionedModulePlanner;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void indicateModulePlannerChanged() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        raise(new ModulePlannerChangedEvent(versionedModulePlanner));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return versionedModulePlanner.hasModule(module);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void deleteModules(Set\u003cModule\u003e moduleCodes) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        versionedModulePlanner.deleteModules(moduleCodes);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean isModuleOffered(Module module) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return ModuleInfo.getFromModuleCode(module.getCode()).isPresent();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Retrieves the actual module information of the {@code module}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * from {@code moduleInfo} and {@code finalizes} that module"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * with the actual module information."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param module The module to be finalized"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The module with the actual module information"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Module finalizeModule(Module module) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Optional\u003cModuleInfo\u003e optModuleInfo \u003d ModuleInfo.getFromModuleCode(module.getCode());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (optModuleInfo.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return new Module(ModuleType.PROGRAMME_REQUIREMENTS, optModuleInfo.get());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new Module(\"Unknown\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Set\u003cModule\u003e finalizeModules(Set\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e finalizedModules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Module m : modules) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            finalizedModules.add(finalizeModule(m));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return finalizedModules;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void addModules(Set\u003cModule\u003e modules, int index) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e finalizedModules \u003d finalizeModules(modules);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        versionedModulePlanner.addModules(finalizedModules, index);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public ObservableMap\u003cDegreeRequirement, int[]\u003e getStatus() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return versionedModulePlanner.getStatus();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void suggestModules(int index) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.suggestModules(index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void listTakenModulesAll() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.listTakenModulesAll();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void listTakenModulesForYear(int year) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.listTakenModulesForYear(year);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getTakenModules() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return FXCollections.unmodifiableObservableList(takenModules);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getTakenModulesForIndex(int index) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return FXCollections.unmodifiableObservableList(takenModulesPerSemester.get(index));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getAvailableModules() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return FXCollections.unmodifiableObservableList(availableModules);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean canUndoModulePlanner() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return versionedModulePlanner.canUndo();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean canRedoModulePlanner() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return versionedModulePlanner.canRedo();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void undoModulePlanner() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.undo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void redoModulePlanner() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.redo();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void commitModulePlanner() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.commit();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return versionedModulePlanner.equals(other.versionedModulePlanner);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 10,
      "GabrielYik": 71,
      "rongjiecomputer": 17,
      "-": 26,
      "Hilda-Ang": 101
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ModulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.course.DegreeRequirement;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.course.FocusArea;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.Major;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.MajorDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.course.ModuleDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.semester.Semester;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.user.UserProfile;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.util.ModuleUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Wraps all data at the module planner level."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ModulePlanner implements ReadOnlyModulePlanner {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int MAX_NUMBER_SEMESTERS \u003d 8;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int MAX_SEMESTERS_PER_YEAR \u003d 2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final int ALL_YEARS \u003d -1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(ModulePlanner.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final List\u003cSemester\u003e semesters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private UserProfile userProfile;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final ObservableList\u003cModule\u003e availableModules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final ObservableList\u003cModule\u003e takenModules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private ObservableMap\u003cDegreeRequirement, int[]\u003e statusMap \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private int availableIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private int takenIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Constructs a {@code ModulePlanner} and initializes an array of 8 {@code Semester}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * to store details of each {@code Semester}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModulePlanner() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logger.info(\"initialising a new ModulePlanner\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semesters \u003d new ArrayList\u003c\u003e(MAX_NUMBER_SEMESTERS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        userProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d MAX_NUMBER_SEMESTERS / MAX_SEMESTERS_PER_YEAR; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d MAX_SEMESTERS_PER_YEAR; j++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                semesters.add(new Semester(i, j));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        availableIndex \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        takenIndex \u003d ALL_YEARS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates a {@code ModulePlanner} using the {@code Module}s in the {@code toBeCopied}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModulePlanner(ReadOnlyModulePlanner toBeCopied) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Add one or more module(s) to set of modules taken for the specified semester."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules A set of valid modules to be added"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index   A valid semester"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void addModules(Set\u003cModule\u003e modules, int index) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semesters.get(index).addModules(modules);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        updateAvailableModules();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        updateTakenModules();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        getStatus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Delete one or more module(s) from list of modules taken for the specified semester."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param modules A list of valid modules to be deleted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void deleteModules(Set\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Iterate once to delete the specified modules"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            semester.deleteModules(modules);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         * Delete invalidated modules repeatedly until there are no more changes"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         * to the total number of modules in the module planner"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e deletedModules \u003d new HashSet\u003c\u003e(modules);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int previousModuleCount \u003d countModules();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            for (int index \u003d 0; index \u003c MAX_NUMBER_SEMESTERS; index++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                Semester semester \u003d semesters.get(index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                List\u003cModule\u003e invalidatedModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                invalidateModules(semester, deletedModules, invalidatedModules);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                deleteInvalidatedModules(semester, deletedModules, invalidatedModules);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            int currentModuleCount \u003d countModules();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (currentModuleCount \u003d\u003d previousModuleCount) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (currentModuleCount \u003c previousModuleCount) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                previousModuleCount \u003d currentModuleCount;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        updateAvailableModules();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        updateTakenModules();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        getStatus();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Counts the number of modules in the module planner."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The total number of modules"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private int countModules() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            count +\u003d semester.getModules().size();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if all the modules in {@code semester} have their prerequisites"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * fulfilled. If any of the modules do not, they will be added to"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * {@code invalidatedModules}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param semester           The semester which modules are to be checked"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param deletedModules     The modules to be checked against"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param invalidatedModules The group of modules any of the modules in"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *                           {@code semester} will be added to if it does not fulfill all of"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *                           it\u0027s prerequisites"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void invalidateModules(Semester semester, Set\u003cModule\u003e deletedModules, List\u003cModule\u003e invalidatedModules) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Module module : semester.getModules()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            List\u003cModuleInfo\u003e prerequisites \u003d module.getPrerequisites();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (!prerequisites.isEmpty()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                boolean hasHadPrerequisiteDeleted \u003d prerequisites.stream().anyMatch(x -\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                        deletedModules.stream().anyMatch(y -\u003e x.getCode().equals(y.getCode())));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                if (hasHadPrerequisiteDeleted) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    invalidatedModules.add(module);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Deletes the {@code invalidatedModules} from the modules {@code semester} has."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param semester           The semester which the {@code invalidatedModules} are to be"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *                           deleted from"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param invalidatedModules The invalidated modules"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void deleteInvalidatedModules(Semester semester, Set\u003cModule\u003e deletedModules,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                                          List\u003cModule\u003e invalidatedModules) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!invalidatedModules.isEmpty()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            Set\u003cModule\u003e modulesToDelete \u003d new HashSet\u003c\u003e(invalidatedModules);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            semester.deleteModules(modulesToDelete);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            deletedModules.addAll(modulesToDelete);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if the {@code Module} exists in the module planner."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param module The module to check"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the module exists, false if not"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (semester.containsModule(module)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public UserProfile getUserProfile() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void setUserProfile(UserProfile u) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        userProfile \u003d u;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        getStatus();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public List\u003cSemester\u003e getSemesters() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cSemester\u003e semestersCopy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            Semester semesterCopy \u003d new Semester(semester);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            semestersCopy.add(semesterCopy);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return semestersCopy;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Resets the existing data of this {@code ModulePlanner} with {@code newData}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void resetData(ReadOnlyModulePlanner newData) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        updateAvailableModules();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        updateTakenModules();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setModulesInSemesters(newData.getSemesters());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void setModulesInSemesters(List\u003cSemester\u003e semesters) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_NUMBER_SEMESTERS; i++) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            this.semesters.get(i).setTakenModules(semesters.get(i));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getTakenModulesForIndex(int index) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return FXCollections.unmodifiableObservableList(semesters.get(index).getModules());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Updates {@code modulesTaken} to contain all modules user has taken for all years."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void listTakenModulesAll() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Semester s : semesters) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            modules.addAll(s.getModules());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        takenIndex \u003d ALL_YEARS;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setTakenModules(modules);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Updates {@code modulesTaken} to contain all modules user has taken in a specified year."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param year An integer between 1 to 4 inclusive."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void listTakenModulesForYear(int year) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int[] indices \u003d IndexUtil.getIndicesFromYear(year);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (int i \u003d 0; i \u003c indices.length; i++) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            modules.addAll(semesters.get(indices[i]).getModules());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        takenIndex \u003d year;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setTakenModules(modules);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getTakenModules() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return takenModules;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Updates {@code takenModules} according to the latest displayed list upon add or delete command."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void updateTakenModules() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(\"updating list of taken modules\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (takenIndex \u003d\u003d ALL_YEARS) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            listTakenModulesAll();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            listTakenModulesForYear(takenIndex);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Replaces the contents of the internal {@code takenModules} list with the given list of {@code Module}s."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * List of modules supplied must not contain duplicates."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setTakenModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        takenModules.setAll(modules);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Updates the list of modules available based on given index and stores the index for add and delete commands."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param index An integer from 0 to 7 inclusive indicating the year and semester to suggest."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void suggestModules(int index) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        availableIndex \u003d index;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        updateAvailableModules();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getAvailableModules() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        updateAvailableModules();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return availableModules;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Updates internal list of available {@code Module}s based on stored index."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void updateAvailableModules() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(\"updating list of available modules\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setAvailableModules(generateAvailableModules(availableIndex));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Replaces the contents of the internal {@code availableModules} list with the given list of {@code Module}s."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * List of modules supplied must not contain duplicates."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setAvailableModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        availableModules.setAll(modules);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Get a list of all {@code Module}s user can take based on the {@code Module}s user has taken."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param index An integer from 0 to 7 inclusive to inidcate the current year and semester to suggest."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return A list of {@code Module}s the user is available to take."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private List\u003cModule\u003e generateAvailableModules(int index) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e modulesAvailable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e modulesTaken \u003d getAllModulesTaken();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e modulesTakenBeforeIndex \u003d getAllModulesTakenBeforeIndex(index);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e allModules \u003d getAllModulesFromStorage();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Module m : allModules) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (ModuleUtil.isModuleAvailable(modulesTaken, modulesTakenBeforeIndex, m)) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                modulesAvailable.add(m);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        sortAvailableModules(modulesAvailable, userProfile);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return modulesAvailable;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author rongjiecomputer"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Sort {@code modulesAvailable} based on the information in {@code userProfile}."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private void sortAvailableModules(List\u003cModule\u003e modulesAvailable, UserProfile userProfile) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Major major \u003d userProfile.getMajor();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        MajorDescription majorDescription \u003d MajorDescription.getFromMajor(major).orElse(new MajorDescription());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Note: Collections.sort uses stable sort when sorting objects, which we are exploiting here so that"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // we can chain our sorting and still making sure that the order created by each comparator is preserved."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        //"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // The order of comparators you applied to the list matters!"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Step 1. If we have the information for this major, we stop immediately."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        logger.info(String.format(\"Requirements for user\u0027s major (%s) found. Prioritize modules start with %s.\","
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                major, majorDescription.getPrefixes()));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cString\u003e prefixes \u003d new ArrayList\u003c\u003e(majorDescription.getPrefixes());"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Add GE module prefixes for consideration as well."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        prefixes.addAll(List.of(\"GER\", \"GEQ\", \"GES\", \"GET\", \"GEH\"));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Step 2. Move modules that matches prefixes to the front of available module list."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Comparator\u003cModule\u003e moveFacultyModuleToFront \u003d (Module lhs, Module rhs) -\u003e {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return Integer.compare("
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                    ModuleUtil.rankModuleCodePrefixes(lhs.getCode(), prefixes),"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                    ModuleUtil.rankModuleCodePrefixes(rhs.getCode(), prefixes));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        };"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Collections.sort(modulesAvailable, moveFacultyModuleToFront);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Step 3. Move more prioritized modules to the front of available module list."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Comparator\u003cModule\u003e moveImportantModuleToFront \u003d (Module lhs, Module rhs) -\u003e {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return Integer.compare("
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                    ModuleUtil.rankModuleCodeFromPriorityList(lhs.getCode(), majorDescription.getModules()),"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                    ModuleUtil.rankModuleCodeFromPriorityList(rhs.getCode(), majorDescription.getModules())"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            );"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        };"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Collections.sort(modulesAvailable, moveImportantModuleToFront);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // @@author Hilda-Ang"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Combines the list of {@code Module}s taken from every {@code Semester}."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return A list of all {@code Module}s the user has taken."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private List\u003cModule\u003e getAllModulesTaken() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModule\u003e modulesTaken \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (Semester s : semesters) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            modulesTaken.addAll(s.getModules());"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return modulesTaken;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Combines the list of {@code Module}s taken for every {@code Semester} before current index."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index The current index user is at."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return A list of all {@code Module}s the user has taken until the specified index."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private List\u003cModule\u003e getAllModulesTakenBeforeIndex(int index) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModule\u003e modulesTaken \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (int i \u003d 0; i \u003c index; i++) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            modulesTaken.addAll(semesters.get(i).getModules());"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return modulesTaken;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Get a list of all {@code Module}s data retrieved from external party"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and stored internally in {@code ModulePlanner}."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return A list of all {@code Module}s in the storage."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private List\u003cModule\u003e getAllModulesFromStorage() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logger.info(\"retrieving all modules data from storage\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModuleInfo[] allModuleInfo \u003d ModuleInfo.getModuleInfoList();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModule\u003e allModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (ModuleInfo mi : allModuleInfo) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            Module m \u003d new Module(mi.getCode());"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            allModules.add(m);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return allModules;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private Optional\u003cModuleDescription\u003e getModuleDescription(String code) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return MajorDescription.getModuleCode(userProfile.getMajor(), code);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Count the number of modules fulfilling degree requirement which is not"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * a University Level Requirement or Breadth and Depth."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param degreeRequirement the degree requirement"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return the number of modules fulfilling that degree requirement"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private int countProgrammeRequirement(DegreeRequirement degreeRequirement) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module m : getAllModulesTaken()) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            Optional\u003cModuleDescription\u003e moduleDescription \u003d getModuleDescription(m.getCode());"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (moduleDescription.isPresent()"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    \u0026\u0026 moduleDescription.get().getRequirement().equals(degreeRequirement)) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                count +\u003d m.getCreditCount();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Count the number of general education modules and insert it into the credit mapping."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void mapGeneralEducation() {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module m : getAllModulesTaken()) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (m.toString().startsWith(\"GER\") || m.toString().startsWith(\"GEQ\")"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                || m.toString().startsWith(\"GET\") || m.toString().startsWith(\"GEH\")"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                || m.toString().startsWith(\"GES\")) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                count +\u003d m.getCreditCount();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        statusMap.put(DegreeRequirement.UNIVERSITY_LEVEL_REQUIREMENTS, new int[] {count});"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Insert the number of foundation modules to the credit mapping."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void mapFoundation() {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int numOfFoundation \u003d countProgrammeRequirement(DegreeRequirement.FOUNDATION);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        statusMap.put(DegreeRequirement.FOUNDATION, new int[] {numOfFoundation});"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Insert the number of mathematics modules to the credit mapping."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void mapMathematics() {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int numOfMathematics \u003d countProgrammeRequirement(DegreeRequirement.MATHEMATICS);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        statusMap.put(DegreeRequirement.MATHEMATICS, new int[] {numOfMathematics});"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Insert the number of science modules to the credit mapping."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void mapScience() {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int numOfScience \u003d countProgrammeRequirement(DegreeRequirement.SCIENCE);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        statusMap.put(DegreeRequirement.SCIENCE, new int[] {numOfScience});"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Insert the number of IT professionalism modules to the credit mapping.."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void mapItProfessionalism() {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int numOfItProfessionalism \u003d countProgrammeRequirement("
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                                        DegreeRequirement.IT_PROFESSIONALISM);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        statusMap.put(DegreeRequirement.IT_PROFESSIONALISM, new int[] {numOfItProfessionalism});"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Insert the number of industrial experience requirement modules to the credit mapping."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void mapIndustrialExperienceRequirement() {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int numOfIndExpReq \u003d countProgrammeRequirement(DegreeRequirement.INDUSTRIAL_EXPERIENCE_REQUIREMENT);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        statusMap.put(DegreeRequirement.INDUSTRIAL_EXPERIENCE_REQUIREMENT, new int[] {numOfIndExpReq});"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Count the number of Team Project Modules and insert to the credit mapping."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void mapTeamProject() {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int numOfTeamProject \u003d 0;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module m : getAllModulesTaken()) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            Optional\u003cModuleDescription\u003e moduleDescription \u003d getModuleDescription(m.getCode());"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (moduleDescription.isPresent()"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    \u0026\u0026 moduleDescription.get().getRequirement().equals(DegreeRequirement.BREATH_AND_DEPTH)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    \u0026\u0026 moduleDescription.get().getFocusAreas().isEmpty()) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                numOfTeamProject +\u003d m.getCreditCount();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        statusMap.put(DegreeRequirement.TEAM_PROJECT, new int[] {numOfTeamProject});"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Count the number of the user\u0027s focus area requirement and insert to the credit mapping."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private void mapFocusAreasRequirement() {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cFocusArea\u003e focusAreas \u003d new ArrayList\u003c\u003e(getUserProfile().getFocusAreas());"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!focusAreas.isEmpty()) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            int[] numOfFocusAreasRequirement \u003d new int[focusAreas.size()];"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            for (Module m : getAllModulesTaken()) {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                Optional\u003cModuleDescription\u003e moduleDescription \u003d getModuleDescription(m.getCode());"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                for (int i \u003d 0; i \u003c focusAreas.size(); i++) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    if (moduleDescription.isPresent()"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                            \u0026\u0026 moduleDescription.get().getRequirement().equals(DegreeRequirement.BREATH_AND_DEPTH)"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                            \u0026\u0026 !moduleDescription.get().getFocusAreas().isEmpty()"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                            \u0026\u0026 moduleDescription.get().getFocusAreas().get(0).equals(focusAreas.get(i))) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                        numOfFocusAreasRequirement[i] +\u003d m.getCreditCount();"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            statusMap.put(DegreeRequirement.FOCUS_AREA_REQUIREMENTS, numOfFocusAreasRequirement);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Maps each requirements to the number of modules fulfilling it in the planner"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return the mapping"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public ObservableMap\u003cDegreeRequirement, int[]\u003e getStatus() {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        mapGeneralEducation();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        mapFoundation();"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        mapMathematics();"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        mapScience();"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        mapItProfessionalism();"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        mapIndustrialExperienceRequirement();"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        mapTeamProject();"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        mapFocusAreasRequirement();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return statusMap;"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                || (other instanceof ModulePlanner // instanceof handles nulls"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u0026\u0026 semesters.equals(((ModulePlanner) other).semesters));"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return semesters.hashCode();"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 140,
      "GabrielYik": 267,
      "rongjiecomputer": 51,
      "Hilda-Ang": 132
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ReadOnlyModulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.semester.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.user.UserProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents an unmodifiable view of a {@code ModulePlanner}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public interface ReadOnlyModulePlanner {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns user profile object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Do not modify the content of the object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    UserProfile getUserProfile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns an unmodifiable view of the {@code Semester}s."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return An {@code ObservableList} of the {@code Semester}s"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    List\u003cSemester\u003e getSemesters();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns all {@code Module}s taken in the {@code Semester} wrapped in an"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * {@code ObservableList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param index An integer between 0 to 7 inclusive, signifying a year and semester."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return A list of modules taken in the semester."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getTakenModulesForIndex(int index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Retrieves all {@code Module}s available wrapped in an {@code ObservableList}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return An {@code ObservableList} containing all the {@code Module}s available to be taken."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getAvailableModules();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Retrieves {@code Module}s taken wrapped in an {@code ObservableList}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return An {@code ObservableList} containing he {@code Module}s that user has taken."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getTakenModules();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 51,
      "rongjiecomputer": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private Path modulePlannerFilePath \u003d Paths.get(\"data\", \"modulePlanner.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Path getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return modulePlannerFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void setModulePlannerFilePath(Path modulePlannerFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.modulePlannerFilePath \u003d modulePlannerFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                \u0026\u0026 modulePlannerFilePath.toAbsolutePath().equals(o.modulePlannerFilePath.toAbsolutePath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return Objects.hash(guiSettings, modulePlannerFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + modulePlannerFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 8,
      "-": 59,
      "Hilda-Ang": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/VersionedModulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A {@code ModulePlanner} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class VersionedModulePlanner extends ModulePlanner {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final List\u003cReadOnlyModulePlanner\u003e modulePlannerStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public VersionedModulePlanner(ReadOnlyModulePlanner initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        modulePlannerStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        modulePlannerStateList.add(new ModulePlanner(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Saves a copy of the current {@code ModulePlanner} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        modulePlannerStateList.add(new ModulePlanner(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        modulePlannerStateList.subList(currentStatePointer + 1, modulePlannerStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Restores the planner book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        resetData(modulePlannerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Restores the planner book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        resetData(modulePlannerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns true if {@code undo()} has planner book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns true if {@code redo()} has planner book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return currentStatePointer \u003c modulePlannerStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof VersionedModulePlanner)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        VersionedModulePlanner otherVersionedModulePlanner \u003d (VersionedModulePlanner) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return super.equals(otherVersionedModulePlanner)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                \u0026\u0026 modulePlannerStateList.equals(otherVersionedModulePlanner.modulePlannerStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedModulePlanner.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 22,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/course/CreditRequired.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "package seedu.planner.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " * Enum to store the amount of credits need to achieved for each Degree Requirement."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public enum CreditRequired {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    UNIVERSITY_LEVEL_REQUIREMENTS(20),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    FOUNDATION(36),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    MATHEMATICS(12),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    SCIENCE(4),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    IT_PROFESSIONALISM(12),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    INDUSTRIAL_EXPERIENCE_REQUIREMENT(12),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    TEAM_PROJECT(8),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    FOCUS_AREA_REQUIREMENT(12);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private int required;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    CreditRequired(int required) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.required \u003d required;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public int getRequired() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return required;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 19,
      "rongjiecomputer": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/course/DegreeRequirement.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Enum to describe the programme requirement of a module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public enum DegreeRequirement {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    UNIVERSITY_LEVEL_REQUIREMENTS(\"University Level Requirements\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    FOUNDATION(\"Foundation\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    MATHEMATICS(\"Mathematics\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    SCIENCE(\"Science\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    IT_PROFESSIONALISM(\"IT Professionalism\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    INDUSTRIAL_EXPERIENCE_REQUIREMENT(\"Industrial Experience Requirement\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    TEAM_PROJECT(\"Team Project\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    FOCUS_AREA_REQUIREMENTS(\"Focus Area Requirements\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    BREATH_AND_DEPTH(\"Breadth and Depth\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    DegreeRequirement(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 7,
      "rongjiecomputer": 20
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/course/FocusArea.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonEnumDefaultValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the focus areas of computer science students."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * These focus areas are applicable only to new cohorts from AY2015-16 onwards."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public enum FocusArea {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ALGORITHMS_AND_THEORY(\"Algorithms and Theory\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ARTIFICIAL_INTELLIGENCE(\"Artificial Intelligence\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // COMPUTER_GRAPHICS_AND_GAMES(\"Computer Graphics and Games\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // COMPUTER_SECURITY(\"Computer Security\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // DATABASE_SYSTEMS(\"Database Systems\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // MULTIMEDIA_INFORMATION_RETRIEVAL(\"Multimedia Information Retrieval\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // NETWORKING_AND_DISTRIBUTED_SYSTEMS(\"Networking and Distributed Systems\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // PARALLEL_COMPUTING(\"Parallel Computing\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // PROGRAMMING_LANGUAGES(\"Programming Languages\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    SOFTWARE_ENGINEERING(\"Software Engineering\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @JsonEnumDefaultValue"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    UNKNOWN(\"Unknown\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    FocusArea(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Converts the focus area from a {@code String} to a {@code FocusArea}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Note: Case-insensitive"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param focusArea The focus area as a {@code String}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @return The focus area as a {@code FocusArea}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static FocusArea mapFocusArea(String focusArea) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (FocusArea fa : FocusArea.values()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (fa.toString().equalsIgnoreCase(focusArea)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                return fa;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return FocusArea.UNKNOWN;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Converts a set of strings to a set of matching {@code FocusArea}, skip those that are invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Note: Case-insensitive"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static Set\u003cFocusArea\u003e filterFocusAreas(Set\u003cString\u003e focusArea) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Set\u003cFocusArea\u003e result \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (String fa : focusArea) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            FocusArea mappedFocusArea \u003d mapFocusArea(fa);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (mappedFocusArea !\u003d UNKNOWN) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                result.add(mappedFocusArea);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 23,
      "rongjiecomputer": 46
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/course/Major.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonEnumDefaultValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the majors of students."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Currently, there is only one field present since our target audience"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * is Computer Science students."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public enum Major {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    COMPUTER_SCIENCE(\"Computer Science\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    COMPUTER_ENGINEERING(\"Computer Engineering\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @JsonEnumDefaultValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    UNKNOWN(\"Unknown\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    Major(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Converts the major from a {@code String} to a {@code Major}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Note: Case-insensitive"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param major The major as a {@code String}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @return The major as a {@code Major}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static Major mapMajor(String major) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (Major m : Major.values()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (m.toString().equalsIgnoreCase(major)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                return m;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return Major.UNKNOWN;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 24,
      "rongjiecomputer": 19
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/course/MajorDescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import com.google.common.base.Charsets;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import com.google.common.collect.ImmutableMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import com.google.common.io.Resources;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.MainApp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Class to describe requirements of a Major."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class MajorDescription {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final TypeReference\u003cHashMap\u003cMajor, MajorDescription\u003e\u003e MAP_TYPE_REF \u003d new TypeReference\u003c\u003e() {};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private static final String DEFAULT_FILE_PATH \u003d \"/data/majorDescription.json\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private static final MajorDescriptionRetriever instance \u003d new MajorDescriptionRetriever(DEFAULT_FILE_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private Major major;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private List\u003cModuleDescription\u003e modules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private List\u003cString\u003e facultyModuleCodePrefixes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Default constructor for JSON deserialization."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public MajorDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        facultyModuleCodePrefixes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public MajorDescription(Major major, List\u003cModuleDescription\u003e modules) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Class to retrieve mapping of major to module descriptions in JSON file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Adapted from seedu.planner.model.ModuleInfo.ModuleInfoRetriever."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private static class MajorDescriptionRetriever {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        private static Logger logger \u003d LogsCenter.getLogger(MajorDescriptionRetriever.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        private ImmutableMap\u003cMajor, MajorDescription\u003e majorToMajorDescriptionMap;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        private MajorDescriptionRetriever(String path) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                URL resource \u003d MainApp.class.getResource(path);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                String text \u003d Resources.toString(resource, Charsets.UTF_8);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                Map\u003cMajor, MajorDescription\u003e mutableMap \u003d JsonUtil.getObjectMapper().readValue(text, MAP_TYPE_REF);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                majorToMajorDescriptionMap \u003d ImmutableMap.copyOf(mutableMap);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                logger.warning(\"Unable to read majorDescription file. Start with an empty map.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                ImmutableMap.Builder\u003cMajor, MajorDescription\u003e builder \u003d ImmutableMap.builder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                majorToMajorDescriptionMap \u003d builder.build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        public Optional\u003cMajorDescription\u003e getFromMajor(Major major) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (majorToMajorDescriptionMap.containsKey(major)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                return Optional.of(majorToMajorDescriptionMap.get(major));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Major getMajor() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns a list of {@code ModuleDescription} pre-sorted according to decreasing importance."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public List\u003cModuleDescription\u003e getModules() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns a list of module code prefixes for this major."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public List\u003cString\u003e getPrefixes() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return facultyModuleCodePrefixes;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static Optional\u003cMajorDescription\u003e getFromMajor(Major major) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return instance.getFromMajor(major);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static Optional\u003cModuleDescription\u003e getModuleCode(Major major, String code) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        Optional\u003cMajorDescription\u003e optMajorDescription \u003d MajorDescription.getFromMajor(major);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (optMajorDescription.isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            List\u003cModuleDescription\u003e listModuleDescription \u003d optMajorDescription.get().getModules();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            for (ModuleDescription moduleDescription: listModuleDescription) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                if (moduleDescription.getCode().equals(code)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    return Optional.of(moduleDescription);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (!(other instanceof MajorDescription)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        MajorDescription otherMajor \u003d (MajorDescription) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return major.equals(otherMajor.major) \u0026\u0026 modules.equals(otherMajor.modules);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 62,
      "rongjiecomputer": 65
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/course/ModuleDescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Class to describe properties of a Module when taken by a Major."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * See also {@link MajorDescription}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class ModuleDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private DegreeRequirement requirement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private List\u003cFocusArea\u003e focusAreas;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Default constructor for JSON deserialization."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ModuleDescription() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        focusAreas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public ModuleDescription(String code, DegreeRequirement requirement) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this(code, requirement, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public ModuleDescription(String code, DegreeRequirement requirement, List\u003cFocusArea\u003e focusAreas) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.requirement \u003d requirement;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.focusAreas \u003d focusAreas;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public DegreeRequirement getRequirement() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return requirement;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public List\u003cFocusArea\u003e getFocusAreas() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return focusAreas;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (!(other instanceof ModuleDescription)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleDescription otherModule \u003d (ModuleDescription) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return code.equals(otherModule.code)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            \u0026\u0026 requirement.equals(otherModule.requirement)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            \u0026\u0026 focusAreas.equals(otherModule.focusAreas);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 4,
      "rongjiecomputer": 57
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/Module.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import com.google.common.collect.ImmutableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Temporary {@code Module} class placeholder."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class Module implements Comparable\u003cModule\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ModuleType type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ModuleInfo information;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Creates a new {@code Module}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * This {@code Module} does not have all its"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * attributes initialised and is meant to be used"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * as a lightweight and convenient object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param code The {@code Module} code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Module(String code) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        type \u003d ModuleType.PROGRAMME_REQUIREMENTS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        information \u003d ModuleInfo.getFromModuleCode(code).orElse(new ModuleInfo(code));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Creates a {@code Module}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param type The {@code ModuleType}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param information The {@code ModuleInfo}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Module(ModuleType type, ModuleInfo information) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.information \u003d information;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Gets the (@code Module) information."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return the (@code Module) information."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public ModuleInfo getInfo() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return information;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Gets the {@code Module} code."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The {@code Module} code"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return information.getCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Gets the {@code Module} name."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The {@code Module} name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return information.getName();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Gets the {@code Module} description."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return information.getDescription();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Gets the {@code ModuleType}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The {@code ModuleType}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleType getType() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return ModuleType.PROGRAMME_REQUIREMENTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Gets the {@code Module} credit count."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The {@code Module} credit count"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public float getCreditCount() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return information.getCreditCount();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Gets the {@code Module} preclusions."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The {@code Module} preclusions"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPreclusions() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return information.getPreclusions();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Gets the {@code Module} prerequisites."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The {@code Module} prerequisites"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPrerequisites() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return information.getPrerequisites();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public int compareTo(Module other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return getCode().compareTo(other.getCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Module module \u003d (Module) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return information.equals(module.information);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return getCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return Objects.hash(type, information);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 9,
      "GabrielYik": 109,
      "rongjiecomputer": 15,
      "Hilda-Ang": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/ModuleInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import com.google.common.base.Preconditions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import com.google.common.collect.ImmutableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import com.google.common.collect.ImmutableMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Represents an immutable {@code ModuleInfo} class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * REQUIRES: Module code is globally unique, no two ModuleInfo object has the same module code."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleInfo {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_MODULE_CODE_CONSTRAINTS \u003d \"Module codes should be of the format VW(X)1234(YZ).\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"VW refers to a prefix like CS or CG that describes the type of the module.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"(X) refers to an optional prefix add-on.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"1234 refers to a sequence of positive numbers.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"(YZ) refers to an optional postfix.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final String MESSAGE_MODULE_CODE_NOT_FOUND \u003d \"Module code not found in database.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static final String DEFAULT_FILE_PATH \u003d \"/data/moduleInfo.json\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // An object that is initialized from JSON file and act like a const data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static final ModuleInfoRetriever instance \u003d new ModuleInfoRetriever(DEFAULT_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Represents module credit."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The type is set to be float because"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * some modules can have non-integer module credits."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private float creditCount;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonProperty(\"preclusions\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String[] preclusions;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonProperty(\"prerequisites\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String[] prerequisites;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ImmutableList\u003cModuleInfo\u003e precluModuleInfo;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ImmutableList\u003cModuleInfo\u003e prereqModuleInfo;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private boolean finalized \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Default constructor required by JSON parser."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleInfo() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Constructs a {@code ModuleInfo} from a given module code."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param code A valid module code."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleInfo(String code) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Class to retrieve {@code ModuleInfo} from JSON file packaged in JAR file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static class ModuleInfoRetriever {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        private static Logger logger \u003d LogsCenter.getLogger(ModuleInfoRetriever.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        private ImmutableMap\u003cString, ModuleInfo\u003e codeToModuleInfoMap;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        private ModuleInfo[] moduleInfoList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfoRetriever(String path) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                moduleInfoList \u003d JsonUtil.readJsonResourceFile(path, ModuleInfo[].class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                finalizeModuleInfo(moduleInfoList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                logger.warning(\"Problem while reading from resource file. \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                    + \"Will be starting with an empty module database\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                moduleInfoList \u003d new ModuleInfo[] {};"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         *  Map module code to {@code ModuleInfo}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         * @param moduleCode Module code"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        public Optional\u003cModuleInfo\u003e getFromModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (codeToModuleInfoMap.containsKey(moduleCode)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                return Optional.\u003cModuleInfo\u003eof(codeToModuleInfoMap.get(moduleCode));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         * Takes in a list of {@code ModuleInfo}s deserialzied by JSON parser and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         * finalize {@code ModuleInfo}s\u0027 internal structure."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         * @param moduleInfo List of {@code ModuleInfo}s deserialized by JSON parser."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        public void finalizeModuleInfo(ModuleInfo[] moduleInfo) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            ImmutableMap.Builder\u003cString, ModuleInfo\u003e builder \u003d ImmutableMap.builder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            for (ModuleInfo mInfo : moduleInfo) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                builder.put(mInfo.getCode(), mInfo);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            codeToModuleInfoMap \u003d builder.build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            for (ModuleInfo mInfo : moduleInfo) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                mInfo.finalize(codeToModuleInfoMap);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public float getCreditCount() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return creditCount;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPrerequisites() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Preconditions.checkState(finalized);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return prereqModuleInfo;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPreclusions() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Preconditions.checkState(finalized);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return precluModuleInfo;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Initialize internal lists of prerequisite and preclusion {@code ModuleInfo}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param map An immutable map that maps module code to {@code ModuleInfo}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private void finalize(ImmutableMap\u003cString, ModuleInfo\u003e map) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Preconditions.checkState(!finalized);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        prereqModuleInfo \u003d Arrays.stream(prerequisites)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .map(code -\u003e map.get(code))"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .filter(mInfo -\u003e mInfo !\u003d null)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .collect(ImmutableList.toImmutableList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        precluModuleInfo \u003d Arrays.stream(preclusions)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .map(code -\u003e map.get(code))"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .filter(mInfo -\u003e mInfo !\u003d null)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .collect(ImmutableList.toImmutableList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        finalized \u003d true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static ModuleInfo[] getModuleInfoList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return instance.moduleInfoList;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *  Map module code to {@code ModuleInfo}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param moduleCode Module code"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static Optional\u003cModuleInfo\u003e getFromModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return instance.getFromModuleCode(moduleCode);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return code.hashCode();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (!(other instanceof ModuleInfo)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo otherModuleInfo \u003d (ModuleInfo) other;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return code.equals(otherModuleInfo.code);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String str \u003d \"ModuleInfo(\" + code + \") {\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (prereqModuleInfo.size() \u003e 0) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            str +\u003d \" prereq:\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            for (ModuleInfo prereq : prereqModuleInfo) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                str +\u003d \" \" + prereq.code;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (precluModuleInfo.size() \u003e 0) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            str +\u003d \" preclu:\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            for (ModuleInfo preclu : precluModuleInfo) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                str +\u003d \" \" + preclu.code;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return str + \" }\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 68,
      "rongjiecomputer": 161
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/ModuleType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the degree requirements of a Computer Science programme."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public enum ModuleType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    UNIVERSITY_LEVEL_REQUIREMENTS(\"University Level Requirements\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    UNRESTRICTED_ELECTIVES(\"Unrestricted Electives\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PROGRAMME_REQUIREMENTS(\"Programme Requirements\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_FOUNDATION(\"PR Foundation\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_BREADTH_AND_DEPTH(\"PR Breadth and Depth\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_INDUSTRIAL_EXPERIENCE(\"PR Industrial Experience\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_IT_PROFESSIONALISM(\"PR IT Professionalism\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_MATHEMATICS_AND_SCIENCE(\"PR Mathematics and Science\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_MODULE_TYPE \u003d \"Not a known module type.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ModuleType(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Create {@code ModuleType} enum object from module type string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param name The name of module type."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static ModuleType fromString(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (ModuleType type : ModuleType.values()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (type.name.equalsIgnoreCase(name)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                return type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        throw new IllegalValueException(MESSAGE_UNKNOWN_MODULE_TYPE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 26,
      "rongjiecomputer": 18
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/semester/Semester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Represents a Semester in the module planner."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Holds the list of modules taken and the list of modules available for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * that semester."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A semester can be characterised by the year it is in, and whether it is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * the first or second semester in that year."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // Basic information"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // Modules lists"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ObservableList\u003cModule\u003e takenModules;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Constructs a {@code Semester}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param year  A valid year"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param index A valid index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public Semester(int year, int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.takenModules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Constructs a {@code Semester} with the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * modules from {@code semester}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param semester The semester which modules are used"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *                 to construct the new semester"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Semester(Semester semester) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        year \u003d semester.getYear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        index \u003d semester.getIndex();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        takenModules \u003d semester.getModulesAsCopy();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Adds one or more module(s) to the set of modules taken."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param modules A non-empty set of modules to be added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void addModules(Set\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        takenModules.addAll(modules);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Deletes one or more module(s) from set of modules taken if present."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param modules A non-empty set of modules to be deleted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void deleteModules(Set\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Module m : modules) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            takenModules.remove(m);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Checks if the module with is taken or planned to take in the semester."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param module The module"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the module exists, false if not"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean containsModule(Module module) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return takenModules.stream().anyMatch(module::equals);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns the list of modules taken in this semester."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return A list of modules taken"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getModules() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return takenModules;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Replaces all the current modules taken in {@code this}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * with the modules taken in {@code semester}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param semester The semester which modules taken are"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *                 used as replacement"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void setTakenModules(Semester semester) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        takenModules.clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        takenModules.addAll(semester.getModules());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Copies the modules of {@code this} and"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * returns them in an {@code ObservableList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The copied modules of {@code this} wrapped"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * in an {@code ObservableList}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getModulesAsCopy() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e modulesTakenCopy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Module module : takenModules) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            Module moduleCopy \u003d new Module(module.getCode());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            modulesTakenCopy.add(moduleCopy);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return FXCollections.observableList(modulesTakenCopy);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * {@code Semester} produced by JSON deserialization seems to rearrange {@code Module}s"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * in arbitrary order regardless of the original order in JSON file."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Use this function to check equality for this situation."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private boolean slowUnorderEquals(ObservableList\u003cModule\u003e otherTakenModules) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        HashSet\u003cModule\u003e lhs \u003d new HashSet\u003c\u003e(takenModules);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        HashSet\u003cModule\u003e rhs \u003d new HashSet\u003c\u003e(otherTakenModules);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return lhs.equals(rhs);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                || (other instanceof Semester // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u0026\u0026 index \u003d\u003d ((Semester) other).getIndex()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u0026\u0026 year \u003d\u003d ((Semester) other).getYear()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                \u0026\u0026 slowUnorderEquals(((Semester) other).takenModules));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return takenModules.hashCode();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return \"Year \" + year + \" | Semester \" + index;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 4,
      "GabrielYik": 85,
      "rongjiecomputer": 24,
      "Hilda-Ang": 48
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/user/UserProfile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.course.FocusArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.course.Major;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the profile of the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class UserProfile {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final Major major;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final List\u003cFocusArea\u003e focusAreas;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public UserProfile() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this(Major.COMPUTER_SCIENCE, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Copy constructor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public UserProfile(UserProfile copy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.major \u003d copy.major;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.focusAreas \u003d new ArrayList\u003c\u003e(copy.focusAreas);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public UserProfile(Major major, List\u003cFocusArea\u003e focusAreas) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.focusAreas \u003d focusAreas;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public UserProfile(Major major, Set\u003cFocusArea\u003e focusAreas) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.focusAreas \u003d new ArrayList\u003c\u003e(focusAreas);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Collections.sort(this.focusAreas);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns the major."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The major"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Major getMajor() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns the focus areas."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The focus areas"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public List\u003cFocusArea\u003e getFocusAreas() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return focusAreas;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return other \u003d\u003d this || ((other instanceof UserProfile)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                \u0026\u0026 major \u003d\u003d ((UserProfile) other).major"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                \u0026\u0026 focusAreas \u003d\u003d ((UserProfile) other).focusAreas);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 67
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/util/IndexUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Contains utility methods for handling year, semester, and indexing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class IndexUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int VALUE_NOT_AVAILABLE \u003d -1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int NUM_OF_SEMESTER_IN_YEAR \u003d 2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks that the given year is valid, i.e. is between 1 to 4."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param year Year to be checked."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the given year is valid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean isValidYear(int year) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return year \u003e 0 \u0026\u0026 year \u003c 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks that the given semester is valid, i.e. is either 1 or 2."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param semester Semester to be checked."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the given semester is valid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean isValidSemester(int semester) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return semester \u003d\u003d 1 || semester \u003d\u003d 2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks that the given index is valid, i.e. is between 0 and 7 inclusive."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index Index to be checked."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the given index is valid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static boolean isValidIndex(int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d 7;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Converts the given year and semester to an index between 0 and 7,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * e.g. year 1 semester 1 will be converted to index 0,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * year 1 semester 2 will be converted to index 1,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * and year 2 semester 1 will be converted to index 2."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param year An integer between 1 to 4."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param semester An integer between 1 to 2."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The resulting index between 0 to 7."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static int convertYearAndSemesterToIndex(int year, int semester) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!isValidYear(year) || !isValidSemester(semester)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return VALUE_NOT_AVAILABLE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return year * NUM_OF_SEMESTER_IN_YEAR - NUM_OF_SEMESTER_IN_YEAR + semester - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Converts an index to the corresponding year and semester"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * wrapped in a {@code Pair}, with the year being the first"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * value and the semester being the second."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * If the index is not valid (not between 0 and 7), a"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * {@code Pair} is returned with both inner fields set to 0."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param index The index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The corresponding year and semester as a Pair"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static Pair convertIndexToYearAndSemester(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!isValidIndex(index)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return new Pair(0, 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int year \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int semester \u003d 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        while (index \u003e\u003d 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            index -\u003d 2;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            year++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        semester +\u003d index;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new Pair(year, semester);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static int[] getIndicesFromYear(int year) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int[] indices \u003d new int[2];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int indexZero \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int indexOne \u003d 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (year \u003d\u003d 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            indices[indexZero] \u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            indices[indexOne] \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        } else if (year \u003d\u003d 2) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            indices[indexZero] \u003d 2;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            indices[indexOne] \u003d 3;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        } else if (year \u003d\u003d 3) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            indices[indexZero] \u003d 4;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            indices[indexOne] \u003d 5;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        } else if (year \u003d\u003d 4) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            indices[indexZero] \u003d 6;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            indices[indexOne] \u003d 7;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            indices[indexZero] \u003d VALUE_NOT_AVAILABLE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            indices[indexOne] \u003d VALUE_NOT_AVAILABLE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return indices;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 37,
      "Hilda-Ang": 74
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/util/ModuleUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.ModuleDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Helper functions for handling module."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private static final String MODULE_CODE_REGEX \u003d \"^[A-Z]{2,3}\\\\d{4}[A-Z]{0,2}$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if the module code format is valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the module code format valid"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean hasValidCodeFormat(String code) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return code.matches(MODULE_CODE_REGEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static boolean hasNotTakenModule(List\u003cModule\u003e modulesTaken, Module moduleToCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return !modulesTaken.contains(moduleToCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //@@author RomaRomama"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Checks if any of the prerequisites for the given {@code Module} have been taken."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param modulesTaken  List of {@code Module}s that the user had taken."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param moduleToCheck The {@code Module} to be checked."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return True if all the prerequisites have been taken."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static boolean hasFulfilledAllPrerequisites(List\u003cModule\u003e modulesTaken, Module moduleToCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModuleInfo\u003e prerequisites \u003d moduleToCheck.getPrerequisites();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cList\u003cModuleInfo\u003e\u003e groupedByEquivalence \u003d groupModuleInfosByEquivalence(prerequisites);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (List\u003cModuleInfo\u003e equivalence : groupedByEquivalence) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            boolean isOneNotContained \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            for (ModuleInfo moduleInfo : equivalence) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                Module toModule \u003d new Module(moduleInfo.getCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                if (modulesTaken.contains(toModule)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    isOneNotContained \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (isOneNotContained) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks if none of the preclusions for the given {@code Module} has been taken."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modulesTaken  List of {@code Module}s that the user had taken."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param moduleToCheck The {@code Module} to be checked."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if none of the preclusions have been taken."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static boolean hasNotFulfilledAnyPreclusions(List\u003cModule\u003e modulesTaken, Module moduleToCheck) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModuleInfo\u003e preclusions \u003d moduleToCheck.getPreclusions();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (ModuleInfo p : preclusions) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            Module m \u003d new Module(p.getCode());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            if (modulesTaken.contains(m)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks if the module can be taken by user, i.e all the prerequisites have been taken"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and none of the preclusions have been taken."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modulesTaken List of {@code Module}s that the user had taken."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param module       moduleToCheck The {@code Module} to be checked."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if all the prerequisites are fulfilled and no preclusion has been fulfilled."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static boolean isModuleAvailable(List\u003cModule\u003e modulesTaken, List\u003cModule\u003e modulesTakenBeforeIndex,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                                            Module module) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return hasNotTakenModule(modulesTaken, module)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u0026\u0026 hasFulfilledAllPrerequisites(modulesTakenBeforeIndex, module)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u0026\u0026 hasNotFulfilledAnyPreclusions(modulesTaken, module);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author rongjiecomputer"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns true if {@code moduleCode} matches {@code prefix} and moduleCode[len(prefix)] is a digit."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cp\u003eREQUIRES:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cli\u003e{@code moduleCode} must starts with alphabets and ends with digits."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cli\u003e{@code prefix} must contains alphabets only."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static boolean matchModuleCodePrefix(String moduleCode, String prefix) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return moduleCode.startsWith(prefix) \u0026\u0026 Character.isDigit(moduleCode.charAt(prefix.length()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns true if {@code moduleCode} matches any prefix in {@code prefixes}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cp\u003eREQUIRES:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cli\u003e{@code moduleCode} must starts with alphabets and ends with digits."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cli\u003eAll prefix in {@code prefixes} must contains alphabets only."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static boolean matchModuleCodePrefixes(String moduleCode, List\u003cString\u003e prefixes) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return prefixes.stream().anyMatch(prefix -\u003e matchModuleCodePrefix(moduleCode, prefix));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Give {@code moduleCode} a ranking based on {@code prefixes}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * If {@code moduleCode} matches prefix i (starts from 0), returns i,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cp\u003eREQUIRES:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cli\u003e{@code moduleCode} must starts with alphabets and ends with digits."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003cli\u003eAll prefix in {@code prefixes} must contains alphabets only."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static int rankModuleCodePrefixes(String moduleCode, List\u003cString\u003e prefixes) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        int rank \u003d 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (String prefix : prefixes) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (matchModuleCodePrefix(moduleCode, prefix)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            rank++;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return rank;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Give {@code moduleCode} a ranking based on its position in {@code priorityList}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static int rankModuleCodeFromPriorityList(String moduleCode, List\u003cModuleDescription\u003e priorityList) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        int rank \u003d 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (ModuleDescription m : priorityList) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (m.getCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            rank++;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return rank;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //@@author RomaRomama"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Extracts the equivalent modules of the head of the list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param modules list of modules"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return List of all modules equivalent to the head"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private static List\u003cModuleInfo\u003e extractHeadEquivalent(List\u003cModuleInfo\u003e modules) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        Iterator\u003cModuleInfo\u003e iter1 \u003d modules.iterator();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModuleInfo\u003e equivalence \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        while (iter1.hasNext()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            ModuleInfo current \u003d iter1.next();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (equivalence.isEmpty()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                equivalence.add(current);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                List\u003cModuleInfo\u003e preclusions \u003d equivalence.get(0).getPreclusions();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                if (preclusions.contains(current)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    equivalence.add(current);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return equivalence;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Finds all equivalent moduleinfos from a given set of moduleinfos."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param moduleInfoList List of {@code ModuleInfo}s."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return The equivalence classes without the single ones."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private static List\u003cList\u003cModuleInfo\u003e\u003e findModuleInfoEquivalences(List\u003cModuleInfo\u003e moduleInfoList) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModuleInfo\u003e copyModuleInfoList \u003d new ArrayList\u003c\u003e(moduleInfoList);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cList\u003cModuleInfo\u003e\u003e equivalenceSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        while (copyModuleInfoList.size() \u003e 0) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            List\u003cModuleInfo\u003e equivalence \u003d extractHeadEquivalent(copyModuleInfoList);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            copyModuleInfoList.removeAll(equivalence);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (equivalence.size() \u003e 1) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                equivalenceSet.add(equivalence);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return equivalenceSet;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Returns the grouping of equivalent moduleinfos and also include single moduleinfos."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param moduleInfoList List of (@code ModuleInfo)s."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return The equivalence classes including the single ones."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private static List\u003cList\u003cModuleInfo\u003e\u003e groupModuleInfosByEquivalence(List\u003cModuleInfo\u003e moduleInfoList) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModuleInfo\u003e copyModuleInfoList \u003d new ArrayList\u003c\u003e(moduleInfoList);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cList\u003cModuleInfo\u003e\u003e allEquivalence \u003d findModuleInfoEquivalences(moduleInfoList);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (List\u003cModuleInfo\u003e equivalence : allEquivalence) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            copyModuleInfoList.removeAll(equivalence);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (ModuleInfo singleModule : copyModuleInfoList) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            List\u003cModuleInfo\u003e singleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            singleList.add(singleModule);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            allEquivalence.add(singleList);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return allEquivalence;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * A module version for finding the equivalence classes."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param moduleList List of (@code Modules)."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return Equivalence classes without the single ones."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static List\u003cList\u003cModule\u003e\u003e findModuleEquivalences(List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModuleInfo\u003e toModuleInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            toModuleInfo.add(module.getInfo());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cList\u003cModuleInfo\u003e\u003e toModuleInfoList \u003d ModuleUtil.findModuleInfoEquivalences(toModuleInfo);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cList\u003cModule\u003e\u003e toModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (List\u003cModuleInfo\u003e moduleInfoList : toModuleInfoList) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            List\u003cModule\u003e toModule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            for (ModuleInfo moduleInfo : moduleInfoList) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                toModule.add(new Module(moduleInfo.getCode()));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            toModuleList.add(toModule);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return toModuleList;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 138,
      "GabrielYik": 18,
      "rongjiecomputer": 62,
      "Hilda-Ang": 49
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedModule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.module.ModuleType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "content": "// @@author rongjicomputer"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * JSON serializable {@code Module} class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonAdaptedModule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Default constructor for JSON deserialization."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public JsonAdaptedModule() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param module {@code Module} to be converted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public JsonAdaptedModule(Module module) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.type \u003d module.getType().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.moduleCode \u003d module.getCode();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Convert to {@code Module} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Optional\u003cModuleInfo\u003e optionalModuleInfo \u003d ModuleInfo.getFromModuleCode(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (!optionalModuleInfo.isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            throw new IllegalValueException(ModuleInfo.MESSAGE_MODULE_CODE_NOT_FOUND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return new Module(ModuleType.fromString(type), optionalModuleInfo.get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "rongjiecomputer": 46
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedSemester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.semester.Semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// @@author rongjiecomputer"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * JSON serializable {@code Semester} class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonAdaptedSemester {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final String MESSAGE_DUPLCIATE_MODULE \u003d \"Duplicate module(s) in a semester.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // Indicator of whether user has passed the index"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private boolean hasBeenTaken;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // Modules lists"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private List\u003cJsonAdaptedModule\u003e modulesTaken \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Default constructor. For JSON Deserialization."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    JsonAdaptedSemester() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param sem {@code Semester} to be converted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    JsonAdaptedSemester(Semester sem) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        index \u003d sem.getIndex();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        year \u003d sem.getYear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        modulesTaken \u003d sem.getModules().stream().map("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            m -\u003e new JsonAdaptedModule(m)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Convert to {@code Semester} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Semester toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Set\u003cModule\u003e modulesTaken \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : this.modulesTaken) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            Module toModelType \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (modulesTaken.contains(toModelType)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLCIATE_MODULE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            modulesTaken.add(toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Semester sem \u003d new Semester(year, index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        sem.addModules(modulesTaken);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return sem;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 2,
      "rongjiecomputer": 62
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonModulePlannerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// @@author rongjiecomputer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Represents a storage for {@link seedu.planner.model.ModulePlanner}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonModulePlannerStorage implements ModulePlannerStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(JsonModulePlannerStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public JsonModulePlannerStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Path getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return readModulePlanner(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Similar to {@link #readModulePlanner()}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            logger.info(\"ModulePlanner file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Optional\u003cJsonSerializableModulePlanner\u003e jsonModulePlanner;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            jsonModulePlanner \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                    filePath, JsonSerializableModulePlanner.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            logger.info(\"Data format error found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (jsonModulePlanner.isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                return Optional.\u003cReadOnlyModulePlanner\u003eof(jsonModulePlanner.get().toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        saveModulePlanner(modulePlanner, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Similar to {@link #saveModulePlanner(ReadOnlyModulePlanner)}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        requireNonNull(modulePlanner);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModulePlanner(modulePlanner), filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 92
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonSerializableModulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.FocusArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.Major;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.semester.Semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.user.UserProfile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// @@author rongjiecomputer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * An Immutable {@link ModulePlanner} that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonSerializableModulePlanner {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Duplicate module(s) across semesters.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final String MESSAGE_INVALID_MAJOR \u003d \"Invalid major in user profile.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final String MESSAGE_INVALID_FOCUS_AREA \u003d \"Invalid focus area(s) in user profile.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private List\u003cJsonAdaptedSemester\u003e semesters;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private UserProfile userProfile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Default constructor for JSON serialization."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public JsonSerializableModulePlanner() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        semesters \u003d new ArrayList\u003c\u003e(ModulePlanner.MAX_NUMBER_SEMESTERS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        userProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Conversion."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public JsonSerializableModulePlanner(ReadOnlyModulePlanner src) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        semesters.addAll(src.getSemesters().stream().map(JsonAdaptedSemester::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        userProfile \u003d src.getUserProfile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Converts this moduleplanner into the model\u0027s [@code ModulePlanner] object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ModulePlanner toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModulePlanner planner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cSemester\u003e semesters \u003d new ArrayList\u003c\u003e(ModulePlanner.MAX_NUMBER_SEMESTERS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // To check duplicate modules across semesters"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        HashSet\u003cModule\u003e modules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (JsonAdaptedSemester jsonSem : this.semesters) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            Semester sem \u003d jsonSem.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (sem.getModules().stream().anyMatch(m -\u003e modules.contains(m))) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            sem.getModules().stream().forEach(m -\u003e modules.add(m));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            semesters.add(sem);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (userProfile.getMajor() \u003d\u003d Major.UNKNOWN) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_MAJOR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (userProfile.getFocusAreas().contains(FocusArea.UNKNOWN)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_FOCUS_AREA);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        planner.setModulesInSemesters(semesters);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        planner.setUserProfile(userProfile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 81
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 4,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/ModulePlannerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// @@author rongjiecomputer"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Represents a storage for {@link seedu.planner.model.ModulePlanner}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public interface ModulePlannerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    Path getModulePlannerFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns ModulePlanner data as a {@link ReadOnlyModulePlanner}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner() throws DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @see #readModulePlanner()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Saves the given {@link ReadOnlyModulePlanner} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param modulePlanner cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    void saveModulePlanner(ReadOnlyModulePlanner modulePlanner) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @see #saveModulePlanner(ReadOnlyModulePlanner)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 43
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.model.ModulePlannerChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public interface Storage extends ModulePlannerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    Path getModulePlannerFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner() throws DataConversionException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    void saveModulePlanner(ReadOnlyModulePlanner modulePlanner) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Saves the current version of the Module Planner to the hard disk."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    void handleModulePlannerChangedEvent(ModulePlannerChangedEvent mpce);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 2,
      "rongjiecomputer": 15,
      "-": 22,
      "Hilda-Ang": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.model.ModulePlannerChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private ModulePlannerStorage modulePlannerStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public StorageManager(ModulePlannerStorage modulePlannerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.modulePlannerStorage \u003d modulePlannerStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModulePlanner methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Path getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return modulePlannerStorage.getModulePlannerFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner() throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return readModulePlanner(modulePlannerStorage.getModulePlannerFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return modulePlannerStorage.readModulePlanner(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        saveModulePlanner(modulePlanner, modulePlannerStorage.getModulePlannerFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        modulePlannerStorage.saveModulePlanner(modulePlanner, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void handleModulePlannerChangedEvent(ModulePlannerChangedEvent event) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            saveModulePlanner(event.data);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 6,
      "rongjiecomputer": 42,
      "-": 41,
      "Hilda-Ang": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Represents a storage for {@link seedu.planner.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Saves the given {@link seedu.planner.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 8,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/FindModulePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A ui for the find module panel that is displayed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * on the right of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * This panel corresponds to the {@code find} command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class FindModulePanel extends ModuleDescription {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String FXML \u003d \"FindModulePanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label divider;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label fullDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public FindModulePanel(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        super(module, FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        divider.setText(System.lineSeparator());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        fullDescription.setText(\"Full Description\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        description.setText(module.getDescription());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof FindModulePanel)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        FindModulePanel panel \u003d (FindModulePanel) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return module.equals(panel.module);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 50
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.commons.events.ui.ListEvent.ALL_YEARS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.model.ModulePlanner.MAX_NUMBER_SEMESTERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.ui.ModuleListPanel.TIMELESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.AddEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.ui.ClearEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.FindEvent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.ui.GoToEvent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.ListEvent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.StatusEvent;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.SuggestEvent;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private List\u003cModuleListPanel\u003e takenModuleListPanels;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ModuleListPanel timelessTakenModuleListPanel;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ModuleListPanel timelessSuggestedModuleListPanel;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private FindModulePanel timelessMultiPurposePanel;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private VBox takenModulesPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private VBox suggestedModulesPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private StackPane multiPurposePanelPlaceholder;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        initTakenModulesPanels();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        initSuggestedModulesPanel();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        initListedModulesPanel();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getModulePlannerFilePath());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Initialises an empty taken modules panel and all the taken modules panels"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * with taken modules if any."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The taken modules placeholder is then initialised with the empty taken"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * modules panel."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void initTakenModulesPanels() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        takenModuleListPanels \u003d new ArrayList\u003c\u003e(MAX_NUMBER_SEMESTERS + 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (int semesterIndex \u003d 0; semesterIndex \u003c MAX_NUMBER_SEMESTERS; semesterIndex++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            ObservableList\u003cModule\u003e modules \u003d logic.getTakenModulesForIndex(semesterIndex);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            ModuleListPanel takenModuleListPanel \u003d new ModuleListPanel(modules,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    semesterIndex, ModulePanelType.TAKEN);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            takenModuleListPanels.add(semesterIndex, takenModuleListPanel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        timelessTakenModuleListPanel \u003d new ModuleListPanel(FXCollections.emptyObservableList(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                ModulePanelType.TAKEN);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        timelessTakenModuleListPanel.setSubTitle(TIMELESS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setPlaceholder(takenModulesPlaceholder, timelessTakenModuleListPanel);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Initialises the listed modules panel. The listed modules panel is a variation"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * of the taken modules panel, whereby the former collates taken modules from semesters"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * within a year or within all years."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private void initListedModulesPanel() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ObservableList\u003cModule\u003e modules \u003d logic.getTakenModules();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModuleListPanel takenModuleListPanel \u003d new ModuleListPanel(modules, ModulePanelType.TAKEN);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        takenModuleListPanels.add(MAX_NUMBER_SEMESTERS, takenModuleListPanel);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assert takenModuleListPanels.size() \u003d\u003d 9;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Initialises an empty suggested modules panel."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The suggested modules placeholder is then initialised with the empty suggested"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * mdoules panel."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void initSuggestedModulesPanel() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        timelessSuggestedModuleListPanel \u003d new ModuleListPanel(FXCollections.emptyObservableList(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                ModulePanelType.SUGGESTED);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        timelessSuggestedModuleListPanel.setSubTitle(TIMELESS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setPlaceholder(suggestedModulesPlaceholder, timelessSuggestedModuleListPanel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Sets the placeholder with new information. Any existing"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * children of {@code pane} are removed and the {@code part}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * is added to {@code pane} as a child."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param pane The pane"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param part The part"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setPlaceholder(Pane pane, UiPart\u003cRegion\u003e part) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        pane.getChildren().clear();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        pane.getChildren().add(part.getRoot());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleAddEvent(AddEvent event) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int indexToGoTo \u003d event.getIndex();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModuleListPanel panel \u003d takenModuleListPanels.get(indexToGoTo);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setPlaceholder(takenModulesPlaceholder, panel);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleGoToEvent(GoToEvent event) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModuleListPanel panel \u003d takenModuleListPanels.get(event.getIndex());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setPlaceholder(takenModulesPlaceholder, panel);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleFindEvent(FindEvent event) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        FindModulePanel panel \u003d new FindModulePanel(event.getModule());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setPlaceholder(multiPurposePanelPlaceholder, panel);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleClearEvent(ClearEvent event) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        clearTakenModulesPanel();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        clearSuggestedModulesPanel();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        clearMultiPurposePanel();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void clearTakenModulesPanel() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setPlaceholder(takenModulesPlaceholder, timelessTakenModuleListPanel);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void clearSuggestedModulesPanel() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setPlaceholder(suggestedModulesPlaceholder, timelessSuggestedModuleListPanel);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void clearMultiPurposePanel() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        multiPurposePanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleSuggestEvent(SuggestEvent event) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModuleListPanel panel \u003d new ModuleListPanel(event.getModuleList(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                event.getIndex(), ModulePanelType.SUGGESTED);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setPlaceholder(suggestedModulesPlaceholder, panel);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleListEvent(ListEvent event) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModuleListPanel panel \u003d takenModuleListPanels.get(MAX_NUMBER_SEMESTERS);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (event.getYear() \u003d\u003d ALL_YEARS) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            panel.setSubTitle(\"All years\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            panel.setSubTitle(\"Year \" + event.getYear());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setPlaceholder(takenModulesPlaceholder, panel);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleStatusEvent(StatusEvent event) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        StatusPanel panel \u003d new StatusPanel(event.getStatusMessage());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setPlaceholder(multiPurposePanelPlaceholder, panel);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 6,
      "GabrielYik": 179,
      "rongjiecomputer": 8,
      "-": 157,
      "Hilda-Ang": 17
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ModuleCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleCard extends ModuleDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String FXML \u003d \"ModuleCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleCard(Module module) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        super(module, FXML);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return module.equals(card.module);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 34
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ModuleDescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * This class is meant to be subclassed since it does not specify"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * its corresponding fxml file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleDescription extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label moduleName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label moduleType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label creditCount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label preclusion;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private FlowPane preclusions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label prerequisite;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private FlowPane prerequisites;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleDescription(Module module, String fxml) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleCode.setText(module.getCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleName.setText(module.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleType.setText(\"Fulfils: \" + module.getType().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        creditCount.setText(\"Modular Credits: \" + Float.toString(module.getCreditCount()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModuleInfo\u003e preclusionList \u003d module.getPreclusions();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (ModuleInfo m : preclusionList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            preclusions.getChildren().add(new Label(m.getCode()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        preclusion.setText(\"Preclusion\" + getCorrectGrammar(preclusionList.size()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModuleInfo\u003e prerequisiteList \u003d module.getPrerequisites();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (ModuleInfo m : prerequisiteList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            prerequisites.getChildren().add(new Label(m.getCode()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        prerequisite.setText(\"Prerequisite\" + getCorrectGrammar(prerequisiteList.size()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Gives the correct grammar structure (singular or plural) for the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * {@code preclusion} and {@code prerequisite} labels depending"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * on the number of items they will be representing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param count The non-negative number of items"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The correct grammar structure"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String getCorrectGrammar(int count) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return \": none\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } else if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return \": \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } else if (count \u003e 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return \"s: \";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 86
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ModuleListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.convertIndexToYearAndSemester;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.util.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Panel containing a list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String TIMELESS \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String YEAR \u003d \"Year \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String DIVIDER \u003d \" | \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String SEMESTER \u003d \"Semester \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label subTitle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList, int index, ModulePanelType type) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setHeader(index, type);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setConnections(moduleList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList, ModulePanelType type) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setHeader(type);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setConnections(moduleList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Sets the sub title with {@code text}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param text The text"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void setSubTitle(String text) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        subTitle.setText(text);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setConnections(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListPanel.ModuleListViewCell());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setHeader(int index, ModulePanelType type) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Pair yearSemesterPair \u003d convertIndexToYearAndSemester(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int year \u003d (int) yearSemesterPair.getFirst();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int semester \u003d (int) yearSemesterPair.getSecond();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        title.setText(\"Modules \" + type.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        subTitle.setText(YEAR + year + DIVIDER + SEMESTER + semester);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setHeader(ModulePanelType type) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        title.setText(\"Modules \" + type.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        subTitle.setText(TIMELESS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                setGraphic(new ModuleCard(module).getRoot());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 100
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ModulePanelType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the type of module panels."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public enum ModulePanelType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    TAKEN(\"Taken\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    SUGGESTED(\"Suggested\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ModulePanelType(String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 20
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.model.ModulePlannerChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void handleModulePlannerChangedEvent(ModulePlannerChangedEvent event) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 3,
      "rongjiecomputer": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/StatusPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import javafx.beans.binding.StringBinding;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.course.CreditRequired;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.course.DegreeRequirement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " * Panel to display the user\u0027s progress status."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class StatusPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private static final String FXML \u003d \"StatusPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private Label header;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private Label statusMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public StatusPanel(ObservableMap\u003cDegreeRequirement, int[]\u003e statusMap) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        header.setText(\"Status:\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        statusMessage.textProperty().bind(new StringBinding() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                bind(statusMap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            protected String computeValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                sb.append(formatNonFocusArea(statusMap));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                if (statusMap.containsKey(DegreeRequirement.FOCUS_AREA_REQUIREMENTS)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    sb.append(formatFocusArea(statusMap));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                return sb.toString().trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Formats the string that shows status for non-Focus Area related modules."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param statusMap The status mapping"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return String showing the progress for non-Focus Area related modules."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private String formatNonFocusArea(ObservableMap\u003cDegreeRequirement, int[]\u003e statusMap) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        DegreeRequirement[] dr \u003d DegreeRequirement.values();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        CreditRequired[] cr \u003d CreditRequired.values();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        while (i \u003c cr.length - 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            DegreeRequirement degreeRequirement \u003d dr[i];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            CreditRequired creditRequired \u003d cr[i];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            int[] creditAchieved \u003d statusMap.get(degreeRequirement);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            sb.append(degreeRequirement.toString()).append(\": \").append(creditAchieved[0]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            sb.append(\"/\").append(creditRequired.getRequired()).append(\"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Formats the string that shows status for Focus Area modules that the user need to take."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param statusMap The status mapping"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @return String showing the progress for Focus Area modules that the user need to take."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private String formatFocusArea(ObservableMap\u003cDegreeRequirement, int[]\u003e statusMap) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        DegreeRequirement focusAreaRequirements \u003d DegreeRequirement.FOCUS_AREA_REQUIREMENTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        CreditRequired focusAreaRequiredCredits \u003d CreditRequired.FOCUS_AREA_REQUIREMENT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int[] focusAreasAchieved \u003d statusMap.get(focusAreaRequirements);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        while (j \u003c focusAreasAchieved.length) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            sb.append(focusAreaRequirements.toString()).append(\" \").append(j + 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            sb.append(\": \").append(focusAreasAchieved[j]).append(\"/\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            sb.append(focusAreaRequiredCredits.getRequired()).append(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            j++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 85
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Stops the UI. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/module_planner.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 9,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 4,
      "-": 101
    }
  },
  {
    "path": "src/main/resources/data/majorDescription.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"COMPUTER_SCIENCE\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"major\" : \"COMPUTER_SCIENCE\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"facultyModuleCodePrefixes\": ["
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"CS\", \"CP\", \"IS\", \"IT\", \"MA\", \"ES\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modules\" : [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS1010\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"FOUNDATION\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS1231\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"FOUNDATION\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS2030\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"FOUNDATION\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS2040\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"FOUNDATION\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS2100\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"FOUNDATION\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS2103T\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS2105\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"FOUNDATION\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS2106\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"FOUNDATION\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3230\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"INDUSTRIAL_EXPERIENCE_REQUIREMENT\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CP3880\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"INDUSTRIAL_EXPERIENCE_REQUIREMENT\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CP3200\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"INDUSTRIAL_EXPERIENCE_REQUIREMENT\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CP3202\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"INDUSTRIAL_EXPERIENCE_REQUIREMENT\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"IS4010\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"INDUSTRIAL_EXPERIENCE_REQUIREMENT\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CP3200\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"INDUSTRIAL_EXPERIENCE_REQUIREMENT\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CP3107\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"INDUSTRIAL_EXPERIENCE_REQUIREMENT\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"IS1103\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"IT_PROFESSIONALISM\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS2101\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"IT_PROFESSIONALISM\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"ES2660\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"IT_PROFESSIONALISM\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"MA1521\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"MATHEMATICS\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"MA1101R\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"MATHEMATICS\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"ST2334\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"MATHEMATICS\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"PC1221\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"SCIENCE\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"PC1221X\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"SCIENCE\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3203\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3216\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3217\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3281\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3282\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3230\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3236\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4231\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4232\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4234\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3233\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4257\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5230\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5234\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5236\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5237\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5238\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5330\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ALGORITHMS_AND_THEORY\" ]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3243\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3244\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4243\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4244\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4246\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4248\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4216\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4220\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5209\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5215\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5228\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5242\","
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5247\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5340\","
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5339\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"ARTIFICIAL_INTELLIGENCE\" ]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3219\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4211\","
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4218\","
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4239\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3216\","
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3217\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3226\","
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3234\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS3882\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4217\","
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS4271\","
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5219\","
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\" : \"CS5232\","
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\" : \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\" : [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"code\": \"CS5272\","
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"requirement\": \"BREATH_AND_DEPTH\","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"focusAreas\": [ \"SOFTWARE_ENGINEERING\" ]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 289
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".tab-header-background {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".tab:selected {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     -fx-background-color: green;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     -fx-border-color: green;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".tab:selected .focus-indicator {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-border-color: green"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     -fx-background-color: green;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     -fx-border-color: green;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".scroll-pane .viewport {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     -fx-control-inner-background: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".scroll-bar:vertical {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "#preclusions, #prerequisites {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "#preclusions .label, #prerequisites .label {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "#moduleDescription .label {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "#moduleDescription .label-header {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".moduleDescription_label_big {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".moduleDescription_label_small {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".moduleListPanel_title {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-size: 25px;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-text-fill: orange;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-padding: 0 0 0 10;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ".moduleListPanel_subTitle {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-text-fill: #D3D3D3;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    -fx-padding: 8 0 0 0;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 81,
      "-": 347
    }
  },
  {
    "path": "src/main/resources/view/FindModulePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003cVBox fx:id\u003d\"moduleDescription\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cHBox prefWidth\u003d\"340.0\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"moduleDescription_label_big\" text\u003d\"code\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleName\" styleClass\u003d\"moduleDescription_label_big\" text\u003d\"name\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cLabel fx:id\u003d\"moduleType\" styleClass\u003d\"moduleDescription_label_small\" text\u003d\"module type\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cLabel fx:id\u003d\"creditCount\" styleClass\u003d\"moduleDescription_label_small\" text\u003d\"credit count\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cHBox fillHeight\u003d\"false\" minWidth\u003d\"340.0\" prefWidth\u003d\"340.0\" spacing\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003cLabel fx:id\u003d\"preclusion\" minWidth\u003d\"-Infinity\" styleClass\u003d\"moduleDescription_label_small\" text\u003d\"preclusions\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"preclusions\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cHBox fillHeight\u003d\"false\" minWidth\u003d\"340.0\" prefWidth\u003d\"340.0\" spacing\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003cLabel fx:id\u003d\"prerequisite\" minWidth\u003d\"-Infinity\" styleClass\u003d\"moduleDescription_label_small\" text\u003d\"prerequisites\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"prerequisites\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cLabel fx:id\u003d\"divider\" text\u003d\"divider\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cLabel fx:id\u003d\"fullDescription\" styleClass\u003d\"moduleDescription_label_big\" text\u003d\"full description\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"moduleDescription_label_small\" text\u003d\"module description\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 34
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    \u003cImage url\u003d\"@/images/help.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        \u003cImage url\u003d\"@/images/module_planner.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            \u003cVBox scaleShape\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.29797979797979796, 0.5\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                  \u003cVBox fx:id\u003d\"takenModulesPlaceholder\" minWidth\u003d\"340.0\" prefWidth\u003d\"340.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                  \u003cVBox fx:id\u003d\"suggestedModulesPlaceholder\" minWidth\u003d\"340.0\" prefWidth\u003d\"340.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                  \u003cScrollPane fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"multiPurposePanelPlaceholder\" prefWidth\u003d\"340.0\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                              \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 15,
      "-": 46,
      "Hilda-Ang": 21
    }
  },
  {
    "path": "src/main/resources/view/ModuleCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_big_label\" text\u003d\"module code\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        \u003cLabel fx:id\u003d\"moduleName\" styleClass\u003d\"cell_big_label\" text\u003d\"module name\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003cLabel fx:id\u003d\"moduleType\" styleClass\u003d\"cell_small_label\" text\u003d\"module type\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cLabel fx:id\u003d\"creditCount\" styleClass\u003d\"cell_small_label\" text\u003d\"credit count\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003cHBox prefHeight\u003d\"17.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "               \u003cLabel fx:id\u003d\"preclusion\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_small_label\" text\u003d\"preclusions\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "               \u003cFlowPane fx:id\u003d\"preclusions\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003cHBox prefHeight\u003d\"17.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "               \u003cLabel fx:id\u003d\"prerequisite\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_small_label\" text\u003d\"prerequisites\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "               \u003cFlowPane fx:id\u003d\"prerequisites\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 50
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"moduleListPanel_title\" text\u003d\"Title\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         \u003cLabel fx:id\u003d\"subTitle\" styleClass\u003d\"moduleListPanel_subTitle\" text\u003d\"Subtitle\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "  \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 16
    }
  },
  {
    "path": "src/main/resources/view/StatusPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003cVBox fx:id\u003d\"statusPanel\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"moduleListPanel_title\" text\u003d\"Status\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    \u003cLabel fx:id\u003d\"statusMessage\" styleClass\u003d\"moduleDescription_label_big\" text\u003d\"Status Message\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 10
    }
  },
  {
    "path": "src/test/data/JsonModulePlannerStorageTest/NotJsonFormatModulePlanner.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Invalid Json file!"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1
    }
  },
  {
    "path": "src/test/data/JsonModulePlannerStorageTest/invalidAndValidModuleModulePlanner.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"semesters\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"invalid\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"invalid\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"Programme Requirements\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"CS1231\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"userProfile\" : {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"major\" : \"COMPUTER_SCIENCE\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 53
    }
  },
  {
    "path": "src/test/data/JsonModulePlannerStorageTest/invalidModuleModulePlanner.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"semesters\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"invalid\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"CS1231\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"userProfile\" : {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"major\" : \"COMPUTER_SCIENCE\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 50
    }
  },
  {
    "path": "src/test/data/JsonSerializableModulePlannerTest/duplicateModuleAcrossSemesters.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"semesters\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"Programme Requirements\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"CS1231\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"Programme Requirements\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"CS1231\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"userProfile\" : {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"major\" : \"COMPUTER_SCIENCE\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 53
    }
  },
  {
    "path": "src/test/data/JsonSerializableModulePlannerTest/duplicateModuleSingleSemester.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"semesters\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"Programme Requirements\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"CS1231\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"Programme Requirements\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"CS1231\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"userProfile\" : {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"major\" : \"COMPUTER_SCIENCE\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 53
    }
  },
  {
    "path": "src/test/data/JsonSerializableModulePlannerTest/invalidFocusArea.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"semesters\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"userProfile\" : {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"major\" : \"COMPUTER_SCIENCE\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"focusAreas\" : [ \"invalid\" ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 47
    }
  },
  {
    "path": "src/test/data/JsonSerializableModulePlannerTest/invalidMajor.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"semesters\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"userProfile\" : {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"major\" : \"invalid\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 47
    }
  },
  {
    "path": "src/test/data/JsonSerializableModulePlannerTest/invalidModuleModulePlanner.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"semesters\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"invalid\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"CS1231\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"userProfile\" : {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"major\" : \"COMPUTER_SCIENCE\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 50
    }
  },
  {
    "path": "src/test/data/JsonSerializableModulePlannerTest/typicalModulePlanner.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"semesters\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"Programme Requirements\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"CS1231\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"Programme Requirements\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"CS1010\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 1,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"Programme Requirements\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"CS2030\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"type\" : \"Programme Requirements\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      \"moduleCode\" : \"CS2040\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 2,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 3,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 1,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"index\" : 2,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"year\" : 4,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"hasBeenTaken\" : false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"modulesTaken\" : [ ]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  \"userProfile\" : {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"major\" : \"COMPUTER_SCIENCE\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    \"focusAreas\" : [ ]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 59
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\": \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\": 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "  \"modulePlannerFilePath\": \"modulePlanner.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Hilda-Ang": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "  \"modulePlannerFilePath\" : \"modulePlanner.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "Hilda-Ang": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/planner/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/planner/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.storage.JsonSerializableModulePlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.testutil.TestUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    protected Supplier\u003cReadOnlyModulePlanner\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyModulePlanner\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            createDataFileWithData(new JsonSerializableModulePlanner(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        userPrefs.setModulePlannerFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns a defensive copy of the planner book data stored inside the storage file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModulePlanner readStorageModulePlanner() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return new ModulePlanner(storage.readModulePlanner().get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            throw new AssertionError(\"Data is not in the ModulePlanner format.\", dce);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return storage.getModulePlannerFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Model copy \u003d new ModelManager(model.getModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Creates an JSON file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            JsonUtil.saveJsonFile(data, filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 18,
      "-": 88,
      "Hilda-Ang": 10
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Module Planner\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/module_planner.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 1,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.areEqualIgnoreOrder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.convertCollectionToString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.formatMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.getAnyOne;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void getAnyOne_nonEmptyCollection_returnAnyOneElement() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cInteger\u003e set \u003d Set.of(1, 2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Optional\u003cInteger\u003e one \u003d Optional.of(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Optional\u003cInteger\u003e two \u003d Optional.of(2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Optional\u003cInteger\u003e any \u003d getAnyOne(set);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(one.equals(any) || two.equals(any));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void getAnyOne_emptyCollection_returnEmptyOptional() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(Optional.empty(), getAnyOne(Set.of()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void areEqualIgnoreOrder_orderedIdenticalCollections_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cInteger\u003e list1 \u003d List.of(1, 2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cInteger\u003e list2 \u003d List.of(1, 2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(areEqualIgnoreOrder(list1, list2));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void areEqualIgnoreOrder_unorderedIdenticalCollections_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cInteger\u003e list1 \u003d List.of(1, 2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cInteger\u003e list2 \u003d List.of(2, 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(areEqualIgnoreOrder(list1, list2));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void areEqualIgnoreOrder_differentCollections_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cInteger\u003e list1 \u003d List.of(1, 2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cInteger\u003e list2 \u003d List.of(2, 3);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(areEqualIgnoreOrder(list1, list2));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void areEqualIgnoreOrder_emptyCollections_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(areEqualIgnoreOrder(List.of(), Set.of()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void areEqualIgnoreOrder_notIdenticalCollections_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cInteger\u003e list1 \u003d List.of(1, 2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cInteger\u003e list2 \u003d List.of(3);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(areEqualIgnoreOrder(list1, list2));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void convertCollectionToString_nonEmptyCollection_returnsString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(convertCollectionToString(List.of(1, 2, 3, 4)), \"1 2 3 4\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void convertCollectionToString_emptyCollection_returnsEmptyString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(convertCollectionToString(List.of()), \"\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void convertCollectionToString_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        convertCollectionToString(null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void formatMessage_nonNullArgsGiven() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cInteger\u003e list \u003d List.of(1, 2, 3);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(\"Hello 1 2 3\", formatMessage(\"Hello %1$s\", list));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(\"Hello\", formatMessage(\"Hello\", list));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void formatMessage_nullMessageGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        formatMessage(null, List.of(1, 2));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void formatMessage_nullCollectionGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        formatMessage(\"Hello\", null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void formatMessage_allNullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        formatMessage(null, null);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 105,
      "rongjiecomputer": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.StringUtil.areEqualIgnoreCase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.StringUtil.capitalizeSentence;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.StringUtil.containsOnlyLettersAndWhiteSpace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.StringUtil.containsOnlyNumbers;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.StringUtil.isParsableInteger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //------------- Tests for isParsableInteger -----------------------------"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void isParsableInteger_notParsableNumber_returnsTrue() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(isParsableInteger(\"111111111111111111111\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(isParsableInteger(\"-111111111111111111111\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void isParsableInteger_parsableNumber_returnsFalse() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(isParsableInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(isParsableInteger(Long.toString(Integer.MIN_VALUE - 1)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(isParsableInteger(String.valueOf(5)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(isParsableInteger(String.valueOf(-5)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //------------- Tests for containsOnlyLettersAndWhiteSpace ----------------"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void containsOnlyLettersAndWhiteSpace_validArg_returnsTrue() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // No space"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(containsOnlyLettersAndWhiteSpace(\"Software\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // One space"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(containsOnlyLettersAndWhiteSpace(\"Software Engineering\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Two spaces"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(containsOnlyLettersAndWhiteSpace(\"Software  Engineering\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Space on right"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(containsOnlyLettersAndWhiteSpace(\"Software \"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Space on left"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(containsOnlyLettersAndWhiteSpace(\" Software \"));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void containsOnlyLettersAndWhiteSpace_invalidArg_returnsFalse() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // One space no letters"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(containsOnlyLettersAndWhiteSpace(\" \"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Two spaces no letters"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(containsOnlyLettersAndWhiteSpace(\"  \"));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Empty String"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(containsOnlyLettersAndWhiteSpace(\"\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void containsOnlyLettersAndWhiteSpace_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        containsOnlyLettersAndWhiteSpace(null);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //-------------- Tests for containsOnlyNumbers ------------------"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void containsOnlyNumbers_allNumbers_returnsTrue() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(containsOnlyNumbers(\"123\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void containsOnlyNumbers_someOrNoNumbers_returnsFalse() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(containsOnlyNumbers(\"12A\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(containsOnlyNumbers(\"12 \"));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(containsOnlyNumbers(\"12[\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(containsOnlyNumbers(\"ABC\"));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(containsOnlyNumbers(\" \"));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void containsOnlyNumbers_emptyString_returnsFalse() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(containsOnlyNumbers(\"\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //-------------- Tests for areEqualIgnoreCase -------------------"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void areEqualIgnoreCase_nonEmptyStrings_returnsTrue() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Both same case"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(areEqualIgnoreCase(\"Pathfinder\", \"Pathfinder\"));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Both difference case"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(areEqualIgnoreCase(\"Pathfinder\", \"PaThFiNdEr\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void areEqualIgnoreCase_differentStrings_returnsFalse() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(areEqualIgnoreCase(\"Pathfinder\", \"Routefinder\"));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(areEqualIgnoreCase(\"Pathfinder\", \"\"));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void areEqualIgnoreCase_emptyStrings_returnsTrue() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Both empty strings"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(areEqualIgnoreCase(\"\", \"\"));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // One empty one with only whitespace"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(areEqualIgnoreCase(\" \", \"\"));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void areEqualIgnoreCase_nullGivenOne_throwsNullPointerException() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        areEqualIgnoreCase(\"pluto\", null);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void areEqualIgnoreCase_nullGivenBoth_throwsNullPointerException() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        areEqualIgnoreCase(null, null);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //-------------- Tests for capitalizeSentence -------------------"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void capitalizeSentence_validArg_returnsCorrectString() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // All small case"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(capitalizeSentence(\"mars pathfinder\"), \"Mars Pathfinder\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // All big case"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(capitalizeSentence(\"MARS PATHFINDER\"), \"Mars Pathfinder\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // All single letters"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(capitalizeSentence(\"m p\"), \"M P\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // White space"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(capitalizeSentence(\" \"), \"\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Empty string"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(capitalizeSentence(\"\"), \"\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void capitalizeSentence_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        capitalizeSentence(null);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 135,
      "rongjiecomputer": 1,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String clearCommand \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertCommandSuccess(clearCommand, ClearCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertHistoryCorrect(clearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void listModules_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logic.getTakenModules().remove(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getTakenModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logic.getTakenModulesForIndex(0).remove(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getAvailableModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logic.getAvailableModules().remove(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *      - {@code expectedModel}\u0027s planner book was saved to the storage file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 10,
      "-": 107,
      "Hilda-Ang": 19
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_CS0000;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_MODULE_CS0000;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_INDEX_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_INDEX_ZERO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1231;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS2030;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.testutil.ModulePlannerBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "//@@author RomaRomama"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private Set\u003cModule\u003e moduleToAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        ModulePlanner modulePlanner \u003d new ModulePlannerBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                .withModule(VALID_MODULE_CS1010)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        model \u003d new ModelManager(modulePlanner, new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        expectedModel \u003d new ModelManager(modulePlanner, new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void execute_emptyPrerequisiteModuleAdded_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //Add Module with No prerequisite."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        moduleToAdd \u003d Set.of(new Module(\"GER1000\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(moduleToAdd, VALID_INDEX_ZERO);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, \"GER1000\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        expectedModel.addModules(moduleToAdd, VALID_INDEX_ZERO);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        expectedModel.commitModulePlanner();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertCommandSuccess(addCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void execute_nonEmptyPrerequisiteModuleAdded_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //Add Module with prerequisite."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        moduleToAdd \u003d Set.of(VALID_MODULE_CS2030);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(moduleToAdd, VALID_INDEX_ONE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        expectedModel.addModules(moduleToAdd, VALID_INDEX_ONE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        expectedModel.commitModulePlanner();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertCommandSuccess(addCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void execute_notOfferedModuleNotAdded_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //Doesn\u0027t add modules not offered and mentions which modules are not offered."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        moduleToAdd \u003d Set.of(INVALID_MODULE_CS0000);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(moduleToAdd, VALID_INDEX_ZERO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NOT_OFFERED_MODULES, INVALID_MODULE_CODE_CS0000);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertCommandFailure(addCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void execute_existedModuleNotAdded_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //Doesn\u0027t add existing modules into the planner and mentions which modules have existed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        moduleToAdd \u003d Set.of(VALID_MODULE_CS1010);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(moduleToAdd, VALID_INDEX_ONE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_EXISTED_MODULES, VALID_MODULE_CODE_CS1010);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertCommandFailure(addCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void execute_precludedModuleNotAdded_throwsCommandException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //Doesn\u0027t add precluded modules into the planner and mentions which modules have its preclusion taken."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        moduleToAdd \u003d Set.of(new Module(\"CS1010E\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(moduleToAdd, VALID_INDEX_ZERO);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_PRECLUDED_MODULES, \"CS1010E\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertCommandFailure(addCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void execute_equivalentModulesNotAdded_throwsCommandException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //Doesn\u0027t add equivalent modules into the planner and mentions which modules are equivalent."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        moduleToAdd \u003d Set.of(VALID_MODULE_CS1231, new Module(\"MA1100\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(moduleToAdd, VALID_INDEX_ONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_EQUIVALENT, \"(CS1231 MA1100)\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertCommandFailure(addCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void execute_unfulfilledModuleNotAdded_throwsCommandException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //Doesn\u0027t add modules with unfulfilled prerequisite in the planner and"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //mentions which modules are they."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        moduleToAdd \u003d Set.of(VALID_MODULE_CS2030);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(moduleToAdd, VALID_INDEX_ZERO);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_UNFULFILLED, VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertCommandFailure(addCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void execute_allPosibilities_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //Do all the above simultaneously"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        moduleToAdd \u003d Set.of(new Module(\"MA1301\"), new Module(\"CS1010E\"), INVALID_MODULE_CS0000,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                new Module(\"MA1301X\"), new Module (\"CS3230\"), VALID_MODULE_CS2030,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                new Module(\"GER1000\"), VALID_MODULE_CS1010);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(moduleToAdd, VALID_INDEX_ONE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, VALID_MODULE_CODE_CS2030 + \" GER1000\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + \"\\n\" + String.format(Messages.MESSAGE_NOT_OFFERED_MODULES, INVALID_MODULE_CODE_CS0000)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + \"\\n\" + String.format(AddCommand.MESSAGE_EXISTED_MODULES, VALID_MODULE_CODE_CS1010)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + \"\\n\" + String.format(AddCommand.MESSAGE_PRECLUDED_MODULES, \"CS1010E\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + \"\\n\" + String.format(AddCommand.MESSAGE_EQUIVALENT, \"(MA1301 MA1301X)\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + \"\\n\" + String.format(AddCommand.MESSAGE_UNFULFILLED, \"CS3230\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        expectedModel.addModules(Set.of(VALID_MODULE_CS2030, new Module(\"GER1000\")), VALID_INDEX_ONE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        expectedModel.commitModulePlanner();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertCommandSuccess(addCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 143
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void execute_emptyModulePlanner_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        expectedModel.commitModulePlanner();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void execute_nonEmptyModulePlanner_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        expectedModel.resetData(new ModulePlanner());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        expectedModel.commitModulePlanner();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 6,
      "-": 22,
      "Hilda-Ang": 9
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_FOCUS_AREA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS1010 \u003d \"CS1010\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS1231 \u003d \"CS1231\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2030 \u003d \"CS2030\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2040 \u003d \"CS2040\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Module VALID_MODULE_CS1010 \u003d new Module(VALID_MODULE_CODE_CS1010);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Module VALID_MODULE_CS1231 \u003d new Module(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Module VALID_MODULE_CS2030 \u003d new Module(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Module VALID_MODULE_CS2040 \u003d new Module(VALID_MODULE_CODE_CS2040);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Module VALID_MODULE_CS2103T \u003d new Module(VALID_MODULE_CODE_CS2103T);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String INVALID_MODULE_CODE_CS0000 \u003d \"CS0000\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Module INVALID_MODULE_CS0000 \u003d new Module(INVALID_MODULE_CODE_CS0000);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_MODULE_CODE_DESC_CS1010 \u003d \" \" + PREFIX_CODE + VALID_MODULE_CODE_CS1010;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_MODULE_CODE_DESC_CS1231 \u003d \" \" + PREFIX_CODE + VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_MODULE_CODE_DESC_CS2030 \u003d \" \" + PREFIX_CODE + VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_MODULE_CODE_DESC_CS2040 \u003d \" \" + PREFIX_CODE + VALID_MODULE_CODE_CS2040;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String INVALID_MODULE_CODE_DESC_CS0000 \u003d \" \" + PREFIX_CODE + INVALID_MODULE_CODE_CS0000;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final int VALID_YEAR_ONE \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int VALID_YEAR_TWO \u003d 2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final int VALID_SEMESTER_ONE \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_YEAR_DESC_ONE \u003d \" \" + PREFIX_YEAR + VALID_YEAR_ONE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_SEMESTER_DESC_ONE \u003d \" \" + PREFIX_SEMESTER + VALID_SEMESTER_ONE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final int INVALID_YEAR_FIVE \u003d 5;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final int INVALID_SEMESTER_THREE \u003d 3;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String INVALID_YEAR_DESC_FIVE \u003d \" \" + PREFIX_YEAR + INVALID_YEAR_FIVE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String INVALID_SEMESTER_DESC_THREE \u003d \" \" + PREFIX_SEMESTER + INVALID_SEMESTER_THREE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_MAJOR_CS \u003d \"Computer Science\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_FOCUS_AREA_SE \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static final String VALID_FOCUS_AREA_AI \u003d \"Artificial Intelligence\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String INVALID_MAJOR_SS \u003d \"Sleep Science\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String INVALID_FOCUS_AREA_LD \u003d \"Lucid Dreaming\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_MAJOR_DESC_CS \u003d \" \" + PREFIX_MAJOR + VALID_MAJOR_CS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String VALID_FOCUS_AREA_DESC_SE \u003d \" \" + PREFIX_FOCUS_AREA + VALID_FOCUS_AREA_SE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int VALID_INDEX_ZERO \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int VALID_INDEX_ONE \u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int INVALID_INDEX_EIGHT \u003d 8;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * - the planner book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner expectedModulePlanner \u003d new ModulePlanner(actualModel.getModulePlanner());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            assertEquals(expectedModulePlanner, actualModel.getModulePlanner());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Deletes the first module in {@code model}\u0027s filtered list from {@code model}\u0027s planner book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static void deleteModule(Model model, Module module) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        model.deleteModules(Set.of(module));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.commitModulePlanner();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Retrieves a {@code Module} from the given index of the list {@code takenModules} in the given model,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * or returns {@code null} if the size of the list is less than the given index."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param model The given model to be checked in."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index The given index to retrieve {@code Module} from."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} at given index, or {@code null} if size of list is less than index."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static Module showModuleTakenAtIndex(Model model, int index) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModule\u003e modulesTaken \u003d model.getTakenModules();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (modulesTaken.size() \u003e index) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return modulesTaken.get(index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Retrieves a {@code Module} from the given index of the list {@code availableModules} in the given model,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * or returns {@code null} if the size of the list is less than the given index."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param model The given model to be checked in."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index The given index to retrieve {@code Module} from."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} at given index, or {@code null} if size of list is less than index."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static Module showModuleAvailableAtIndex(Model model, int index) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModule\u003e modulesAvailable \u003d model.getAvailableModules();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (modulesAvailable.size() \u003e index) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return modulesAvailable.get(index);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 52,
      "rongjiecomputer": 6,
      "-": 59,
      "Hilda-Ang": 44
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.formatMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.getAnyOne;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_MODULE_CS0000;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1231;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS2030;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS2040;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.DeleteCommand.MESSAGE_DELETE_MODULES_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.DeleteCommand.MESSAGE_NON_EXISTENT_MODULES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.testutil.ModulePlannerBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModulePlanner mp1 \u003d new ModulePlannerBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .withModule(VALID_MODULE_CS1010)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .withModule(VALID_MODULE_CS1231)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .withModule(VALID_MODULE_CS2030)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        model \u003d new ModelManager(mp1, new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModulePlanner mp2 \u003d new ModulePlannerBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .withModule(VALID_MODULE_CS1010)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .withModule(VALID_MODULE_CS1231)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .withModule(VALID_MODULE_CS2030)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        expectedModel \u003d new ModelManager(mp2, new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_validModule_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e moduleToDelete \u003d Set.of(VALID_MODULE_CS1010);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(moduleToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                MESSAGE_DELETE_MODULES_SUCCESS, getAnyOne(moduleToDelete).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        expectedModel.deleteModules(moduleToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        expectedModel.commitModulePlanner();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_validModules_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e modulesToDelete \u003d Set.of(VALID_MODULE_CS1010, VALID_MODULE_CS1231);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(modulesToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String expectedMessage \u003d formatMessage(MESSAGE_DELETE_MODULES_SUCCESS, modulesToDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        expectedModel.deleteModules(modulesToDelete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        expectedModel.commitModulePlanner();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_nonExistentModule_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Set.of(VALID_MODULE_CS2040));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NON_EXISTENT_MODULES, VALID_MODULE_CS2040);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_validAndNonExistentModule() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e modulesToDelete \u003d Set.of(VALID_MODULE_CS1010, INVALID_MODULE_CS0000, VALID_MODULE_CS2040);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(modulesToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e expectedNonExistentModules \u003d List.of(INVALID_MODULE_CS0000, VALID_MODULE_CS2040);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_MODULES_SUCCESS, VALID_MODULE_CS1010)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                + \"\\n\" + formatMessage(MESSAGE_NON_EXISTENT_MODULES, expectedNonExistentModules);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        expectedModel.deleteModules(Set.of(VALID_MODULE_CS1010));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        expectedModel.commitModulePlanner();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 101
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 7,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_NOT_OFFERED_MODULES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_CS0000;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.FindEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.testutil.ModulePlannerBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModulePlanner modulePlanner \u003d new ModulePlannerBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .withModule(VALID_MODULE_CS1010)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        model \u003d new ModelManager(modulePlanner, new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_validModule_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Module moduleToFind \u003d VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(moduleToFind);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String expectedMessage \u003d String.format(FindCommand.MESSAGE_SUCCESS, moduleToFind.getCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        CommandResult result;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            result \u003d findCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof FindEvent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(eventsCollectorRule.eventsCollector.getSize(), 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_invalidModule_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Module moduleToFind \u003d new Module(INVALID_MODULE_CODE_CS0000);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(moduleToFind);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_NOT_OFFERED_MODULES, moduleToFind));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        findCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 1,
      "GabrielYik": 74
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/GoToCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_SEMESTER_THREE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_YEAR_FIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.GoToCommand.SHOWING_GOTO_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.events.ui.GoToEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class GoToCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_validYearAndSemester_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        GoToCommand goToCommand \u003d new GoToCommand(VALID_YEAR_ONE, VALID_SEMESTER_ONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String expectedMessage \u003d String.format(SHOWING_GOTO_MESSAGE, VALID_YEAR_ONE, VALID_SEMESTER_ONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        CommandResult result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            result \u003d goToCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof GoToEvent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(eventsCollectorRule.eventsCollector.getSize(), 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_invalidYearAndSemester_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        GoToCommand goToCommand \u003d new GoToCommand(INVALID_YEAR_FIVE, INVALID_SEMESTER_THREE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        goToCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_invalidYearAndValidSemester_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        GoToCommand goToCommand \u003d new GoToCommand(INVALID_YEAR_FIVE, VALID_SEMESTER_ONE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        goToCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_validYearAndInvalidSemester_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        GoToCommand goToCommand \u003d new GoToCommand(VALID_YEAR_ONE, INVALID_SEMESTER_THREE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        goToCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 89
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 8,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_YEAR_FIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_TWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.showModuleTakenAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.VALUE_NOT_AVAILABLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_ZERO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.ListEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void execute_listAllYears_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(VALUE_NOT_AVAILABLE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS_ALL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertCommandSuccess(listCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(showModuleTakenAtIndex(model, INDEX_ZERO),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                     getTypicalModulePlanner().getTakenModules().get(INDEX_ZERO));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ListEvent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(eventsCollectorRule.eventsCollector.getSize(), 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void execute_validYearContainsModule_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(VALID_YEAR_ONE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS_YEAR, VALID_YEAR_ONE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertCommandSuccess(listCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(showModuleTakenAtIndex(model, INDEX_ZERO),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                     getTypicalModulePlanner().getTakenModules().get(INDEX_ZERO));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ListEvent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(eventsCollectorRule.eventsCollector.getSize(), 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void execute_validYearContainsNoModule_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(VALID_YEAR_TWO);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS_YEAR, VALID_YEAR_TWO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertCommandSuccess(listCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(showModuleTakenAtIndex(model, INDEX_ZERO),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                     null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ListEvent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(eventsCollectorRule.eventsCollector.getSize(), 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void execute_invalidYear_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(INVALID_YEAR_FIVE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expectMessage(Messages.MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        listCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ListCommand listFirstCommand \u003d new ListCommand(VALID_YEAR_ONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ListCommand listSecondCommand \u003d new ListCommand(VALID_YEAR_TWO);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(listFirstCommand.equals(listFirstCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ListCommand listFirstCommandCopy \u003d new ListCommand(VALID_YEAR_ONE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(listFirstCommand.equals(listFirstCommandCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(listFirstCommand.equals(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(listFirstCommand.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(listFirstCommand.equals(listSecondCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 4,
      "Hilda-Ang": 113
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1231;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.deleteModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        deleteModule(model, VALID_MODULE_CS1010);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        deleteModule(model, VALID_MODULE_CS1231);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.undoModulePlanner();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.undoModulePlanner();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        deleteModule(expectedModel, VALID_MODULE_CS1010);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        deleteModule(expectedModel, VALID_MODULE_CS1231);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        expectedModel.undoModulePlanner();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        expectedModel.undoModulePlanner();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        expectedModel.redoModulePlanner();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        expectedModel.redoModulePlanner();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 7,
      "rongjiecomputer": 7,
      "-": 27,
      "Hilda-Ang": 10
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/SetUpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_FOCUS_AREA_LD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_MAJOR_SS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_FOCUS_AREA_AI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_FOCUS_AREA_SE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MAJOR_CS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.SetUpCommand.MESSAGE_SET_UP_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.FocusArea;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.Major;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class SetUpCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_validArgs_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        SetUpCommand setUpCommand \u003d new SetUpCommand(VALID_MAJOR_CS, Set.of(VALID_FOCUS_AREA_SE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SET_UP_SUCCESS, VALID_MAJOR_CS, VALID_FOCUS_AREA_SE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        expectedModel.setUpUserProfile(Major.COMPUTER_SCIENCE, Set.of(FocusArea.SOFTWARE_ENGINEERING));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertCommandSuccess(setUpCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_validArgsMultipleFocusAreas_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        SetUpCommand setUpCommand \u003d new SetUpCommand(VALID_MAJOR_CS, Set.of(VALID_FOCUS_AREA_SE, VALID_FOCUS_AREA_AI));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SET_UP_SUCCESS, VALID_MAJOR_CS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                VALID_FOCUS_AREA_AI + \" \" + VALID_FOCUS_AREA_SE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        expectedModel.setUpUserProfile(Major.COMPUTER_SCIENCE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                Set.of(FocusArea.SOFTWARE_ENGINEERING, FocusArea.ARTIFICIAL_INTELLIGENCE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertCommandSuccess(setUpCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void execute_validArgsNoFocusAreas_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        SetUpCommand setUpCommand \u003d new SetUpCommand(VALID_MAJOR_CS, Set.of());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SET_UP_SUCCESS, VALID_MAJOR_CS, \"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        expectedModel.setUpUserProfile(Major.COMPUTER_SCIENCE, Set.of());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertCommandSuccess(setUpCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void execute_invalidMajor_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        SetUpCommand setUpCommand \u003d new SetUpCommand(INVALID_MAJOR_SS, Set.of(VALID_FOCUS_AREA_SE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMessage \u003d String.format(SetUpCommand.MESSAGE_INVALID_MAJOR, INVALID_MAJOR_SS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertCommandFailure(setUpCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void execute_invalidFocusAreas_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        SetUpCommand setUpCommand \u003d new SetUpCommand(VALID_MAJOR_CS, Set.of(INVALID_FOCUS_AREA_LD));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMessage \u003d String.format(SetUpCommand.MESSAGE_INVALID_FOCUS_AREAS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertCommandFailure(setUpCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void execute_invalidAndValidFocusAreas_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // If there are some invalid and valid focus areas, invalid focus areas will be ignored."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        SetUpCommand setUpCommand \u003d new SetUpCommand(VALID_MAJOR_CS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                Set.of(INVALID_FOCUS_AREA_LD, VALID_FOCUS_AREA_SE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String expectedMessage \u003d String.format(SetUpCommand.MESSAGE_SET_UP_SUCCESS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                Major.COMPUTER_SCIENCE, FocusArea.SOFTWARE_ENGINEERING);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        expectedModel.setUpUserProfile(Major.COMPUTER_SCIENCE, Set.of(FocusArea.SOFTWARE_ENGINEERING));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertCommandSuccess(setUpCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void execute_duplicateFocusAreas_throwsCommandException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Make sure we can handle multiple focus area strings in different casing but refer to the same focus area."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        SetUpCommand setUpCommand \u003d new SetUpCommand(VALID_MAJOR_CS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                Set.of(VALID_FOCUS_AREA_SE, VALID_FOCUS_AREA_SE.toLowerCase(), VALID_FOCUS_AREA_SE.toUpperCase()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String expectedMessage \u003d String.format(SetUpCommand.MESSAGE_SET_UP_SUCCESS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                Major.COMPUTER_SCIENCE, FocusArea.SOFTWARE_ENGINEERING);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        expectedModel.setUpUserProfile(Major.COMPUTER_SCIENCE, Set.of(FocusArea.SOFTWARE_ENGINEERING));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertCommandSuccess(setUpCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void execute_invalidCombined_throwsCommandException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        SetUpCommand setUpCommand \u003d new SetUpCommand(INVALID_MAJOR_SS, Set.of(INVALID_FOCUS_AREA_LD));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMessage \u003d String.format(String.format(SetUpCommand.MESSAGE_INVALID_MAJOR, INVALID_MAJOR_SS)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + String.format(SetUpCommand.MESSAGE_INVALID_FOCUS_AREAS));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertCommandFailure(setUpCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        SetUpCommand setUpCommand \u003d new SetUpCommand(VALID_MAJOR_CS, Set.of(VALID_FOCUS_AREA_SE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(setUpCommand.equals(setUpCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // same major and focus area -\u003e returns true"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(setUpCommand.equals(new SetUpCommand(VALID_MAJOR_CS, Set.of(VALID_FOCUS_AREA_SE))));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different focus area -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(setUpCommand.equals(new SetUpCommand(VALID_MAJOR_CS, Set.of(VALID_FOCUS_AREA_AI))));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(setUpCommand.equals(null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(setUpCommand.equals(5));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 58,
      "rongjiecomputer": 53,
      "Hilda-Ang": 28
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/StatusCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.StatusEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.testutil.ModulePlannerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class StatusCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        ModulePlanner modulePlanner \u003d new ModulePlannerBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                .withModule(VALID_MODULE_CS1010)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        model \u003d new ModelManager(modulePlanner, new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void execute_statusDisplayed_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        StatusCommand statusCommand \u003d new StatusCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        String expectedMessage \u003d StatusCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        CommandResult result \u003d statusCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof StatusEvent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertEquals(eventsCollectorRule.eventsCollector.getSize(), 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 48
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/SuggestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_INDEX_EIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_INDEX_ZERO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.showModuleAvailableAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_ZERO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.commons.events.ui.SuggestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class SuggestCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        SuggestCommand suggestCommand \u003d new SuggestCommand(VALID_INDEX_ZERO);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertCommandSuccess(suggestCommand, model, commandHistory, SuggestCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(showModuleAvailableAtIndex(model, INDEX_ZERO),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                     getTypicalModulePlanner().getTakenModules().get(INDEX_ZERO));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof SuggestEvent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(eventsCollectorRule.eventsCollector.getSize(), 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        SuggestCommand suggestCommand \u003d new SuggestCommand(INVALID_INDEX_EIGHT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expectMessage(Messages.MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        suggestCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 2,
      "Hilda-Ang": 56
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1231;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.deleteModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        deleteModule(model, VALID_MODULE_CS1010);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        deleteModule(model, VALID_MODULE_CS1231);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        deleteModule(expectedModel, VALID_MODULE_CS1010);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        deleteModule(expectedModel, VALID_MODULE_CS1231);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        expectedModel.undoModulePlanner();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        expectedModel.undoModulePlanner();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 7,
      "rongjiecomputer": 7,
      "-": 28,
      "Hilda-Ang": 5
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_DESC_CS1010;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1231;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_DESC_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_DESC_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_ONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "//@@author RomaRomama"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " * Tests for AddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private Set\u003cModule\u003e moduleSet1 \u003d Set.of(VALID_MODULE_CS1010);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private Set\u003cModule\u003e moduleSet2 \u003d Set.of(VALID_MODULE_CS1010, VALID_MODULE_CS1231);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertParseSuccess(parser, VALID_YEAR_DESC_ONE + VALID_SEMESTER_DESC_ONE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + VALID_MODULE_CODE_DESC_CS1010, new AddCommand(moduleSet1, 0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertParseSuccess(parser, VALID_YEAR_DESC_ONE + VALID_SEMESTER_DESC_ONE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + VALID_MODULE_CODE_DESC_CS1010 + VALID_MODULE_CODE_DESC_CS1231, new AddCommand(moduleSet2, 0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //missing year prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR_ONE + VALID_SEMESTER_DESC_ONE + VALID_MODULE_CODE_DESC_CS1010,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //missing semester prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR_DESC_ONE + VALID_SEMESTER_ONE + VALID_MODULE_CODE_DESC_CS1010,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        //missing code prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR_DESC_ONE + VALID_SEMESTER_DESC_ONE + VALID_MODULE_CS1010,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 56,
      "GabrielYik": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/ArgumentMultimapTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_FOCUS_AREA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ArgumentMultimapTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String commandArg \u003d \"preamble c/CS1010 c/CS1231\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(commandArg, PREFIX_CODE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        argMultimap.put(PREFIX_CODE, \"c/CS2030\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        argMultimap.put(PREFIX_CODE, \"c/CS2040 c/CS2103T\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        argMultimap.put(PREFIX_YEAR, \"y/1\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        argMultimap.put(PREFIX_SEMESTER, \"s/1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        argMultimap.put(PREFIX_SEMESTER, \"s/2\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void put() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(4, argMultimap.getAllValues(PREFIX_CODE).size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(1, argMultimap.getAllValues(PREFIX_YEAR).size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(0, argMultimap.getAllValues(PREFIX_MAJOR).size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void checkPrefixValueCount_prefixPresent() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(4, argMultimap.checkPrefixValueCount(PREFIX_CODE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void checkPrefixValueCount_prefixNotPresent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(0, argMultimap.checkPrefixValueCount(PREFIX_MAJOR));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void containsAllPrefixes_prefixesPresent_returnTrue() throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(argMultimap.containsAllPrefixes(PREFIX_CODE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(argMultimap.containsAllPrefixes(PREFIX_CODE, PREFIX_YEAR));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void containsAllPrefixes_prefixesNotPresent_returnFalse() throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(argMultimap.containsAllPrefixes(PREFIX_FOCUS_AREA));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(argMultimap.containsAllPrefixes(PREFIX_FOCUS_AREA, PREFIX_MAJOR));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void containsAllPrefixes_somePrefixesNotPresent_returnsFalse() throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(argMultimap.containsAllPrefixes(PREFIX_CODE, PREFIX_MAJOR));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void containsAllPrefixes_prefixNotLimitedToOne_throwParseException() throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expectMessage(\"Input only one value for the prefix s/\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        argMultimap.containsAllPrefixes(PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void containsAllPrefixes_somePrefixesNotLimitedToOne_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        thrown.expectMessage(\"Input only one value for the prefix s/\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        argMultimap.containsAllPrefixes(PREFIX_SEMESTER, PREFIX_YEAR);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 85
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void tokenize_oneArgument() throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void tokenize_multipleArguments() throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 16,
      "rongjiecomputer": 1,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/CliSyntaxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class CliSyntaxTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void isPrefixLimitedToOne() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(CliSyntax.isPrefixLimitedToOne(PREFIX_SEMESTER));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(CliSyntax.isPrefixLimitedToOne(PREFIX_YEAR));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(CliSyntax.isPrefixLimitedToOne(PREFIX_MAJOR));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(CliSyntax.isPrefixLimitedToOne(PREFIX_CODE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(CliSyntax.isPrefixLimitedToOne(PREFIX_CODE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 23
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC_CS0000;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_MODULE_CS0000;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_DESC_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS2030;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Set\u003cModule\u003e moduleSet1 \u003d Set.of(VALID_MODULE_CS1010);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Set\u003cModule\u003e moduleSet2 \u003d Set.of(VALID_MODULE_CS1010, VALID_MODULE_CS2030);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Set\u003cModule\u003e moduleSet3 \u003d Set.of(INVALID_MODULE_CS0000);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseSuccess(parser, VALID_MODULE_CODE_DESC_CS1010, new DeleteCommand(moduleSet1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseSuccess(parser, VALID_MODULE_CODE_DESC_CS1010 + VALID_MODULE_CODE_DESC_CS2030,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                new DeleteCommand(moduleSet2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Invalid module but it\u0027s the Delete command that checks for module validity"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseSuccess(parser, INVALID_MODULE_CODE_DESC_CS0000, new DeleteCommand(moduleSet3));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 52
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC_CS0000;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_MODULE_CS0000;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_DESC_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_FOCUS_AREA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.FindCommandParser.MESSAGE_EXTRA_PREFIX_VALUES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseSuccess(parser, VALID_MODULE_CODE_DESC_CS1010, new FindCommand(VALID_MODULE_CS1010));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // Invalid module but it\u0027s the Find command that checks for module validity"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseSuccess(parser, INVALID_MODULE_CODE_DESC_CS0000, new FindCommand(INVALID_MODULE_CS0000));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_FOCUS_AREA + \"Sleep science\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_extraArgs_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String userInput \u003d \" \" + VALID_MODULE_CODE_DESC_CS1010"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                + VALID_MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                String.format(MESSAGE_EXTRA_PREFIX_VALUES, PREFIX_CODE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 52
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/GoToCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_DESC_ONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_DESC_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class GoToCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private GoToCommandParser parser \u003d new GoToCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_validArgs_returnsGoToCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseSuccess(parser, VALID_YEAR_DESC_ONE + VALID_SEMESTER_DESC_ONE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                new GoToCommand(VALID_YEAR_ONE, VALID_SEMESTER_ONE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 32
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/ListCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_YEAR_DESC_FIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_DESC_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.VALUE_NOT_AVAILABLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parse_noFieldPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE, new ListCommand(VALUE_NOT_AVAILABLE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_YEAR_DESC_ONE, new ListCommand(VALID_YEAR_ONE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // invalid year"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, INVALID_YEAR_DESC_FIVE, ParserUtil.MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_YEAR_DESC_ONE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "Hilda-Ang": 41
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/ModulePlannerParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_FOCUS_AREA_DESC_SE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_FOCUS_AREA_SE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_INDEX_ZERO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MAJOR_CS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MAJOR_DESC_CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_DESC_CS1010;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CODE_DESC_CS2040;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_DESC_ONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_ONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_DESC_ONE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_ONE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_ZERO;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModules;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.SetUpCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.StatusCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ModulePlannerParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final ModulePlannerParser parser \u003d new ModulePlannerParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        Set\u003cModule\u003e modules \u003d getTypicalModules();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_WORD + VALID_YEAR_DESC_ONE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + VALID_SEMESTER_DESC_ONE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + VALID_MODULE_CODE_DESC_CS1010"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + VALID_MODULE_CODE_DESC_CS1231"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + VALID_MODULE_CODE_DESC_CS2030"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                + VALID_MODULE_CODE_DESC_CS2040);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(new AddCommand(modules, INDEX_ZERO), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Set\u003cModule\u003e modules \u003d getTypicalModules();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(DeleteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                + VALID_MODULE_CODE_DESC_CS1010"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                + VALID_MODULE_CODE_DESC_CS1231"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                + VALID_MODULE_CODE_DESC_CS2030"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                + VALID_MODULE_CODE_DESC_CS2040);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(new DeleteCommand(modules), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand(FindCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + VALID_MODULE_CODE_DESC_CS1010);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(new FindCommand(CS1010), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseCommand_goTo() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        GoToCommand command \u003d (GoToCommand) parser.parseCommand(GoToCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + VALID_YEAR_DESC_ONE + VALID_SEMESTER_DESC_ONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(new GoToCommand(VALID_YEAR_ONE, VALID_SEMESTER_ONE), command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ListCommand command \u003d (ListCommand) parser.parseCommand(ListCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + VALID_YEAR_DESC_ONE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(new ListCommand(VALID_YEAR_ONE), command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseCommand_setUp() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        SetUpCommand command \u003d (SetUpCommand) parser.parseCommand(SetUpCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + VALID_MAJOR_DESC_CS + VALID_FOCUS_AREA_DESC_SE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(new SetUpCommand(VALID_MAJOR_CS, Set.of(VALID_FOCUS_AREA_SE)), command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseCommand_status() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(parser.parseCommand(StatusCommand.COMMAND_WORD) instanceof StatusCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(parser.parseCommand(StatusCommand.COMMAND_WORD + \" 3\") instanceof StatusCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseCommand_suggest() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        SuggestCommand command \u003d (SuggestCommand) parser.parseCommand(SuggestCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + VALID_YEAR_DESC_ONE + VALID_SEMESTER_DESC_ONE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(new SuggestCommand(VALID_INDEX_ZERO), command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 7,
      "GabrielYik": 6,
      "rongjiecomputer": 10,
      "-": 70,
      "Hilda-Ang": 80
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.areEqualIgnoreOrder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \"CS100#\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String INVALID_MAJOR \u003d \"Computer_Science\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String INVALID_FOCUS_AREA \u003d \"Software-Engineering\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String INVALID_YEAR \u003d \"5\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String INVALID_SEMESTER \u003d \"0\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String VALID_MODULE_CODE_1 \u003d \"CS1000\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String VALID_MODULE_CODE_2 \u003d \"CS2103\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String VALID_MAJOR \u003d \"Computer Science\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String VALID_FOCUS_AREA_1 \u003d \"Artificial Intelligence\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String VALID_FOCUS_AREA_2 \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String VALID_YEAR \u003d \"3\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String VALID_SEMESTER \u003d \"1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseModuleCodes_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleCodes(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseModuleCodes_collectionWithInvalidModuleCodes_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cString\u003e moduleCodes \u003d Arrays.asList(VALID_MODULE_CODE_1, INVALID_MODULE_CODE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleCodes(moduleCodes));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseModuleCodes_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(ParserUtil.parseModuleCodes(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseModuleCodes_collectionWithValidModuleCodes_returnsModuleSet() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Set\u003cModule\u003e actualModules \u003d ParserUtil.parseModuleCodes(Set.of(VALID_MODULE_CODE_1, VALID_MODULE_CODE_2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Set\u003cModule\u003e expectedModules \u003d new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            Set.of(new Module(VALID_MODULE_CODE_1), new Module(VALID_MODULE_CODE_2)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(areEqualIgnoreOrder(actualModules, expectedModules));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseMajor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMajor(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseMajor_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseMajor(INVALID_MAJOR));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseMajor_validValue_returnsMajor() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(VALID_MAJOR, ParserUtil.parseMajor(VALID_MAJOR));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseFocusAreas_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFocusAreas(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseFocusAreas_collectionWithInvalidFocusAreas_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cString\u003e focusAreas \u003d Arrays.asList(VALID_FOCUS_AREA_1, INVALID_FOCUS_AREA);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseFocusAreas(focusAreas));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseFocusAreas_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(ParserUtil.parseFocusAreas(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseFocusAreas_collectionWithValidFocusAreas_returnsFocusAreaSet() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Set\u003cString\u003e actualFocusAreaSet \u003d ParserUtil.parseFocusAreas("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            Arrays.asList(VALID_FOCUS_AREA_1, VALID_FOCUS_AREA_2));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Set\u003cString\u003e expectedFocusAreaSet \u003d new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            Arrays.asList(VALID_FOCUS_AREA_1, VALID_FOCUS_AREA_2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedFocusAreaSet, actualFocusAreaSet);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseYear_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseYear(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseYear_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseYear(INVALID_YEAR));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseYear(\"1a\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseYear_validValueWithoutWhitespace_returnsYear() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int expectedYear \u003d Integer.parseInt(VALID_YEAR);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(VALID_YEAR));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseYear_validValueWithWhitespace_returnsTrimmedYear() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String yearWithWhitespace \u003d WHITESPACE + VALID_YEAR + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int expectedYear \u003d Integer.parseInt(VALID_YEAR);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(yearWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseSemester_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSemester((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseSemester_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseSemester(INVALID_SEMESTER));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseSemester(\"1a\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseSemester_validValueWithoutWhitespace_returnsSemester() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int expectedSemester \u003d Integer.parseInt(VALID_SEMESTER);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedSemester, ParserUtil.parseSemester(VALID_SEMESTER));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseSemester_validValueWithWhitespace_returnsTrimmedSemester() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String semesterWithWhitespace \u003d WHITESPACE + VALID_SEMESTER + WHITESPACE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int expectedSemester \u003d Integer.parseInt(VALID_SEMESTER);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedSemester, ParserUtil.parseSemester(semesterWithWhitespace));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 3,
      "-": 15,
      "Hilda-Ang": 132
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/SetUpCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_FOCUS_AREA_DESC_SE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_FOCUS_AREA_SE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MAJOR_CS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MAJOR_DESC_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.logic.commands.SetUpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class SetUpCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private SetUpCommandParser parser \u003d new SetUpCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_validArgs_returnsGoToCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseSuccess(parser, VALID_MAJOR_DESC_CS + VALID_FOCUS_AREA_DESC_SE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                new SetUpCommand(VALID_MAJOR_CS, Set.of(VALID_FOCUS_AREA_SE)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, SetUpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 30,
      "Hilda-Ang": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/SuggestCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_SEMESTER_DESC_THREE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_YEAR_DESC_FIVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_INDEX_ZERO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_DESC_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_DESC_ONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_ONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class SuggestCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private SuggestCommandParser parser \u003d new SuggestCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_YEAR_DESC_ONE + VALID_SEMESTER_DESC_ONE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            new SuggestCommand(VALID_INDEX_ZERO));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // missing year prefix"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR_ONE + VALID_SEMESTER_DESC_ONE, expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // missing semester prefix"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR_DESC_ONE + VALID_SEMESTER_ONE, expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // invalid year"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, INVALID_YEAR_DESC_FIVE + VALID_SEMESTER_DESC_ONE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            ParserUtil.MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // invalid semester"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR_DESC_ONE + INVALID_SEMESTER_DESC_THREE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            ParserUtil.MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_YEAR_DESC_ONE + VALID_SEMESTER_DESC_ONE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hilda-Ang": 55
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModules;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.testutil.ModulePlannerBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modelManager.hasModule(null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void hasModule_moduleNotInModulePlanner_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(modelManager.hasModule(CS1010));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void hasModule_moduleInModulePlanner_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modelManager.addModules(getTypicalModules(), 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(modelManager.hasModule(CS1010));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getTakenModules_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modelManager.getTakenModules().remove(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getTakenModulesForIndex_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modelManager.getTakenModulesForIndex(0).remove(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getAvailableModules_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        modelManager.getAvailableModules().remove(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner modulePlanner \u003d new ModulePlannerBuilder().withModule(CS1010).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modelManager \u003d new ModelManager(modulePlanner, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(modulePlanner, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different modulePlanner -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentModulePlanner, userPrefs)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentUserPrefs.setModulePlannerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(modulePlanner, differentUserPrefs)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 1,
      "-": 49,
      "Hilda-Ang": 35
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/ModulePlannerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS2030;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS2040;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_ONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_TWO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_ZERO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.testutil.ModulePlannerBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ModulePlannerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final ModulePlanner modulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.resetData(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void resetData_withValidReadOnlyModulePlanner_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner newData \u003d getTypicalModulePlanner();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(newData, modulePlanner);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void addModules_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), 8);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void addModules_validIndex_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(new HashSet\u003c\u003e(modulePlanner.getTakenModulesForIndex(INDEX_ZERO)), getTypicalModules());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void deleteModules_validModule_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModulePlanner modulePlanner \u003d new ModulePlannerBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                .withModuleAt(VALID_MODULE_CS1010, INDEX_ZERO)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                .withModuleAt(VALID_MODULE_CS2030, INDEX_ONE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                .withModuleAt(VALID_MODULE_CS2040, INDEX_ONE)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                .withModuleAt(VALID_MODULE_CS2103T, INDEX_TWO)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        modulePlanner.deleteModules(Set.of(VALID_MODULE_CS1010));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModulePlanner expectedModulePlanner \u003d new ModulePlannerBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(expectedModulePlanner, modulePlanner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.hasModule(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void hasModule_moduleNotInModulePlanner_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(modulePlanner.hasModule(CS1010));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void hasModule_moduleInModulePlanner_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(modulePlanner.hasModule(CS1010));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getTakenModulesForIndex_sameIndex_returnsSameList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getTakenModulesForIndex(INDEX_ZERO),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                     modulePlanner.getTakenModulesForIndex(INDEX_ZERO));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getTakenModulesForIndex_differentIndex_returnsDifferentList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertNotEquals(modulePlanner.getTakenModulesForIndex(INDEX_ZERO),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                        modulePlanner.getTakenModulesForIndex(INDEX_ONE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void listTakenModulesAll_noModulesTaken_sameTakenModulesList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.listTakenModulesAll();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.listTakenModulesAll();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getTakenModules(), differentModulePlanner.getTakenModules());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void listTakenModulesAll_sameModulesTakenInSameYear_sameTakenModulesList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.listTakenModulesAll();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // Add modules to same year same semester"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.listTakenModulesAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // Add modules to same year different semesters"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner1 \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner1.addModules(getTypicalModules(), INDEX_ONE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner1.listTakenModulesAll();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getTakenModules(), differentModulePlanner.getTakenModules());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getTakenModules(), differentModulePlanner1.getTakenModules());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void listTakenModulesAll_sameModulesTakenInDifferentYears_sameTakenModulesList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.listTakenModulesAll();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_TWO);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.listTakenModulesAll();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getTakenModules(), differentModulePlanner.getTakenModules());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void listTakenModulesAll_differentModulesTaken_differentTakenModulesList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.listTakenModulesAll();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_TWO);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.listTakenModulesAll();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertNotEquals(modulePlanner.getTakenModules(), differentModulePlanner.getTakenModules());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void listTakenModulesForYear_noModulesTaken_sameTakenModulesList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.listTakenModulesForYear(INDEX_ONE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.listTakenModulesForYear(INDEX_ONE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getTakenModules(), differentModulePlanner.getTakenModules());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void listTakenModulesForYear_sameModulesTakenInSameYearListSameYear_sameTakenModulesList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.listTakenModulesForYear(INDEX_ONE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // Add modules to same year same semester"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.listTakenModulesForYear(INDEX_ONE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // Add modules to same year different semester"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner1 \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner1.addModules(getTypicalModules(), INDEX_ONE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner1.listTakenModulesForYear(INDEX_ONE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getTakenModules(), differentModulePlanner.getTakenModules());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getTakenModules(), differentModulePlanner1.getTakenModules());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void listTakenModulesForYear_differentModulesTakenInSameYearListSameYear_differentTakenModulesList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.listTakenModulesForYear(INDEX_ONE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.listTakenModulesForYear(INDEX_ONE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertNotEquals(modulePlanner.getTakenModules(), differentModulePlanner.getTakenModules());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void listTakenModulesForYear_sameModulesTakenInSameYearListDifferentYears_differentTakenModulesList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.listTakenModulesForYear(INDEX_ONE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.listTakenModulesForYear(INDEX_TWO);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertNotEquals(modulePlanner.getTakenModules(), differentModulePlanner.getTakenModules());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getTakenModulesForIndex_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.getTakenModulesForIndex(INDEX_ZERO).remove(INDEX_ZERO);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getTakenModules_noModulesTaken_returnsSameList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getTakenModules(), differentModulePlanner.getTakenModules());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getTakenModules_sameModulesTaken_returnsSameList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getAvailableModules(), differentModulePlanner.getAvailableModules());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getTakenModules_differentModulesTaken_returnsDifferentList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertNotEquals(modulePlanner.getAvailableModules(), differentModulePlanner.getAvailableModules());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getAvailableModules_noModulesTaken_returnsSameList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getAvailableModules(), differentModulePlanner.getAvailableModules());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void suggestModules_noModulesTaken_sameAvailableModulesList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.suggestModules(INDEX_ZERO);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.suggestModules(INDEX_ONE);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getAvailableModules(), differentModulePlanner.getAvailableModules());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void suggestModules_sameModulesTakenSuggestSameIndex_sameAvailableModulesList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.suggestModules(INDEX_ZERO);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.suggestModules(INDEX_ZERO);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(modulePlanner.getAvailableModules(), differentModulePlanner.getAvailableModules());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void suggestModules_sameModulesTakenSuggestDifferentIndex_differentAvailableModulesList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.suggestModules(INDEX_ZERO);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.suggestModules(INDEX_ONE);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertNotEquals(modulePlanner.getAvailableModules(), differentModulePlanner.getAvailableModules());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void suggestModules_differentModulesTakenSuggestSameIndex_differentAvailableModulesList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.suggestModules(INDEX_ZERO);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.suggestModules(INDEX_ZERO);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertNotEquals(modulePlanner.getAvailableModules(), differentModulePlanner.getAvailableModules());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getAvailableModules_sameModulesTaken_returnsSameList() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_ZERO);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(modulePlanner.getAvailableModules(), differentModulePlanner.getAvailableModules());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getAvailableModules_differentModulesTaken_returnsDifferentList() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d getTypicalModulePlanner();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertNotEquals(modulePlanner.getAvailableModules(), differentModulePlanner.getAvailableModules());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(getTypicalModules(), INDEX_ONE);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentModulePlanner.addModules(getTypicalModules(), INDEX_ONE);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // same modules in same semester -\u003e returns true"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(modulePlanner.equals(differentModulePlanner));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(modulePlanner.equals(modulePlanner));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(modulePlanner.equals(null));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(modulePlanner.equals(5));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different modules in different semester -\u003e returns false"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(modulePlanner.equals(getTypicalModulePlanner()));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 19,
      "rongjiecomputer": 1,
      "-": 33,
      "Hilda-Ang": 274
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/VersionedModulePlannerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS2030;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.testutil.ModulePlannerBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class VersionedModulePlannerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final ReadOnlyModulePlanner modulePlannerWithCS1010 \u003d new ModulePlannerBuilder().withModule(CS1010).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final ReadOnlyModulePlanner modulePlannerWithCS2030 \u003d new ModulePlannerBuilder().withModule(CS2030).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final ReadOnlyModulePlanner emptyModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void commit_singleModulePlanner_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList(emptyModulePlanner);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.commit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertModulePlannerListStatus(versionedModulePlanner,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Collections.singletonList(emptyModulePlanner),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void commit_multipleModulePlannerPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.commit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertModulePlannerListStatus(versionedModulePlanner,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Arrays.asList(emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                modulePlannerWithCS2030,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void commit_multipleModulePlannerPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedModulePlanner, 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.commit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertModulePlannerListStatus(versionedModulePlanner,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Collections.singletonList(emptyModulePlanner),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void canUndo_multipleModulePlannerPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(versionedModulePlanner.canUndo());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void canUndo_multipleModulePlannerPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedModulePlanner, 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(versionedModulePlanner.canUndo());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void canUndo_singleModulePlanner_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList(emptyModulePlanner);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(versionedModulePlanner.canUndo());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void canUndo_multipleModulePlannerPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedModulePlanner, 2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(versionedModulePlanner.canUndo());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void canRedo_multipleModulePlannerPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedModulePlanner, 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(versionedModulePlanner.canRedo());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void canRedo_multipleModulePlannerPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedModulePlanner, 2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(versionedModulePlanner.canRedo());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void canRedo_singleModulePlanner_returnsFalse() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList(emptyModulePlanner);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(versionedModulePlanner.canRedo());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void canRedo_multipleModulePlannerPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(versionedModulePlanner.canRedo());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void undo_multipleModulePlannerPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.undo();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertModulePlannerListStatus(versionedModulePlanner,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Collections.singletonList(emptyModulePlanner),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                modulePlannerWithCS1010,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Collections.singletonList(modulePlannerWithCS2030));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void undo_multipleModulePlannerPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedModulePlanner, 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.undo();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertModulePlannerListStatus(versionedModulePlanner,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Arrays.asList(modulePlannerWithCS1010, modulePlannerWithCS2030));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void undo_singleModulePlanner_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList(emptyModulePlanner);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertThrows(VersionedModulePlanner.NoUndoableStateException.class, versionedModulePlanner::undo);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void undo_multipleModulePlannerPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedModulePlanner, 2);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertThrows(VersionedModulePlanner.NoUndoableStateException.class, versionedModulePlanner::undo);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void redo_multipleModulePlannerPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedModulePlanner, 1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.redo();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertModulePlannerListStatus(versionedModulePlanner,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Arrays.asList(emptyModulePlanner, modulePlannerWithCS1010),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                modulePlannerWithCS2030,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void redo_multipleModulePlannerPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedModulePlanner, 2);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner.redo();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertModulePlannerListStatus(versionedModulePlanner,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Collections.singletonList(emptyModulePlanner),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                modulePlannerWithCS1010,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                Collections.singletonList(modulePlannerWithCS2030));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void redo_singleModulePlanner_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList(emptyModulePlanner);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertThrows(VersionedModulePlanner.NoRedoableStateException.class, versionedModulePlanner::redo);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void redo_multipleModulePlannerPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                emptyModulePlanner, modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertThrows(VersionedModulePlanner.NoRedoableStateException.class, versionedModulePlanner::redo);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d prepareModulePlannerList(modulePlannerWithCS1010,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner copy \u003d prepareModulePlannerList(modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(versionedModulePlanner.equals(copy));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(versionedModulePlanner.equals(versionedModulePlanner));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(versionedModulePlanner.equals(null));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(versionedModulePlanner.equals(1));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner differentModulePlannerList \u003d prepareModulePlannerList(modulePlannerWithCS2030,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            emptyModulePlanner);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(versionedModulePlanner.equals(differentModulePlannerList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner differentCurrentStatePointer \u003d prepareModulePlannerList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                modulePlannerWithCS1010, modulePlannerWithCS2030);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedModulePlanner, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(versionedModulePlanner.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Asserts that {@code versionedModulePlanner} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * states before {@code versionedModulePlanner#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and states after {@code versionedModulePlanner#currentStatePointer} is equal to"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private void assertModulePlannerListStatus(VersionedModulePlanner versionedModulePlanner,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                                             List\u003cReadOnlyModulePlanner\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                                             ReadOnlyModulePlanner expectedCurrentState,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                                             List\u003cReadOnlyModulePlanner\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(new ModulePlanner(versionedModulePlanner), expectedCurrentState);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        while (versionedModulePlanner.canUndo()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            versionedModulePlanner.undo();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (ReadOnlyModulePlanner expectedModulePlanner : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            assertEquals(expectedModulePlanner, new ModulePlanner(versionedModulePlanner));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            versionedModulePlanner.redo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (ReadOnlyModulePlanner expectedModulePlanner : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            versionedModulePlanner.redo();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            assertEquals(expectedModulePlanner, new ModulePlanner(versionedModulePlanner));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(versionedModulePlanner.canRedo());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedModulePlanner.undo());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates and returns a {@code VersionedModulePlanner} with the {@code modulePlannerStates} added into it, and the"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * {@code VersionedModulePlanner#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private VersionedModulePlanner prepareModulePlannerList(ReadOnlyModulePlanner... modulePlannerStates) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(modulePlannerStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        VersionedModulePlanner versionedModulePlanner \u003d new VersionedModulePlanner(modulePlannerStates[0]);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (int i \u003d 1; i \u003c modulePlannerStates.length; i++) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            versionedModulePlanner.resetData(modulePlannerStates[i]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            versionedModulePlanner.commit();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return versionedModulePlanner;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Shifts the {@code versionedModulePlanner#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedModulePlanner versionedModulePlanner, int count) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            versionedModulePlanner.undo();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hilda-Ang": 299
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/course/MajorDescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class MajorDescriptionTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Create dummy Major Description object to test serialization and deserialization."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private MajorDescription createDummyMajorDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cModuleDescription\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CS1010\", DegreeRequirement.FOUNDATION));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CS1231\", DegreeRequirement.FOUNDATION));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CS2030\", DegreeRequirement.FOUNDATION));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CS2040\", DegreeRequirement.FOUNDATION));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CS2100\", DegreeRequirement.FOUNDATION));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CS2103T\", DegreeRequirement.BREATH_AND_DEPTH,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                List.of(FocusArea.SOFTWARE_ENGINEERING)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CS2105\", DegreeRequirement.FOUNDATION));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CS2106\", DegreeRequirement.FOUNDATION));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CS3230\", DegreeRequirement.INDUSTRIAL_EXPERIENCE_REQUIREMENT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CP3880\", DegreeRequirement.INDUSTRIAL_EXPERIENCE_REQUIREMENT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CP3200\", DegreeRequirement.INDUSTRIAL_EXPERIENCE_REQUIREMENT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CP3202\", DegreeRequirement.INDUSTRIAL_EXPERIENCE_REQUIREMENT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"IS4010\", DegreeRequirement.INDUSTRIAL_EXPERIENCE_REQUIREMENT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CP3200\", DegreeRequirement.INDUSTRIAL_EXPERIENCE_REQUIREMENT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"CP3107\", DegreeRequirement.INDUSTRIAL_EXPERIENCE_REQUIREMENT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modules.add(new ModuleDescription(\"IS1103\", DegreeRequirement.IT_PROFESSIONALISM));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return new MajorDescription(Major.COMPUTER_SCIENCE, modules);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void testSerializationAndDeserialization() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        MajorDescription majorDescription \u003d createDummyMajorDescription();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Map\u003cMajor, MajorDescription\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        map.put(Major.COMPUTER_SCIENCE, majorDescription);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String s \u003d JsonUtil.toJsonString(map);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Map\u003cMajor, MajorDescription\u003e deserialized \u003d JsonUtil.getObjectMapper().readValue(s,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                MajorDescription.MAP_TYPE_REF);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(deserialized, map);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        ModuleDescription cs1010 \u003d new ModuleDescription(\"CS1010\", DegreeRequirement.FOUNDATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        MajorDescription cs \u003d new MajorDescription(Major.COMPUTER_SCIENCE, List.of(cs1010));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertTrue(cs.equals(cs));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(cs.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(cs.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleDescription fakeModuleDescription \u003d new ModuleDescription(\"CS1010\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                DegreeRequirement.IT_PROFESSIONALISM);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        MajorDescription fakeMajorDescription \u003d new MajorDescription(Major.COMPUTER_SCIENCE,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                List.of(fakeModuleDescription));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // different module description list -\u003e false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(cs.equals(fakeMajorDescription));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 18,
      "rongjiecomputer": 66
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/course/ModuleDescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class ModuleDescriptionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        ModuleDescription cs1010 \u003d new ModuleDescription(\"CS1010\", DegreeRequirement.FOUNDATION);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertTrue(cs1010.equals(cs1010));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(cs1010.equals(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(cs1010.equals(5));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        ModuleDescription cs1231 \u003d new ModuleDescription(\"CS1231\", DegreeRequirement.FOUNDATION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(cs1010.equals(cs1231));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // different programme requirement -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        ModuleDescription cs1010Fake \u003d new ModuleDescription(\"CS1010\", DegreeRequirement.IT_PROFESSIONALISM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(cs1010.equals(cs1010Fake));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 3,
      "rongjiecomputer": 27
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/module/ModuleInfoTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class ModuleInfoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void printToString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Sanity check to make sure toString does not crash."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        System.out.println(ModuleInfo.getFromModuleCode(\"CFG1010\").get());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Test module with preclusions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        System.out.println(ModuleInfo.getFromModuleCode(\"GER1000\").get());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Test module with prerequisites"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        System.out.println(ModuleInfo.getFromModuleCode(\"CS2040\").get());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 17
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/module/ModuleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS2040;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void attributes() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Sanity check for various getters and toString methods."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(CS1010.getName(), \"Programming Methodology\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(CS1010.getCode(), \"CS1010\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertTrue(CS1010.getCreditCount() \u003d\u003d 4.0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertTrue(CS1010.getDescription().length() \u003e 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertTrue(CS1010.equals(CS1010));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(CS1010.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(CS1010.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(CS1010.equals(CS2040));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 37
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/semester/SemesterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS2030;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModules;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class SemesterTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final Semester semester \u003d new Semester(1, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void addModulesTaken_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semester.addModules(getTypicalModules());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(new HashSet\u003c\u003e(semester.getModules()), getTypicalModules());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void deleteModules_modulesInSemester_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semester.addModules(getTypicalModules());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Set\u003cModule\u003e modules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modules.add(CS1010);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semester.deleteModules(modules);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(semester.containsModule(CS1010));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(semester.containsModule(CS2030));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void containsModule_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semester.containsModule(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void containsModule_moduleInSemester_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semester.addModules(getTypicalModules());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(semester.containsModule(CS1010));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void containsModule_moduleNotInSemester_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(semester.containsModule(CS1010));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void setModulesTaken_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        semester.setTakenModules(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void setModulesTaken_validSemester_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Semester differentSemester \u003d new Semester(2, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentSemester.addModules(getTypicalModules());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        semester.setTakenModules(differentSemester);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(semester.getModules(), differentSemester.getModules());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getModulesAsCopy_returnsSameModules() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semester.addModules(getTypicalModules());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(semester.getModulesAsCopy(), semester.getModules());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // same index, year, and modules -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(semester.equals(new Semester(1, 0)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(semester.equals(semester));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(semester.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(semester.equals(5));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(semester.equals(new Semester(2, 0)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(semester.equals(new Semester(1, 1)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // different modules -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Semester differentSemester \u003d new Semester(1, 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        differentSemester.addModules(getTypicalModules());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(semester.equals(differentSemester));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 2,
      "Hilda-Ang": 103
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/util/IndexUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.convertIndexToYearAndSemester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.convertYearAndSemesterToIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.getIndicesFromYear;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.isValidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.isValidSemester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.isValidYear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.util.Pair;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class IndexUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void isValidYear_validYear_returnsTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidYear(1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidYear(2));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidYear(3));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidYear(4));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void isValidYear_invalidYear_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(isValidYear(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(isValidYear(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void isValidSemester_validSemester_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidSemester(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidSemester(2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void isValidSemester_invalidSemester_returnsFalse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(isValidSemester(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(isValidSemester(3));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void isValidIndex_validIndex_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidIndex(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidIndex(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidIndex(2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidIndex(3));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidIndex(4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidIndex(5));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidIndex(6));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isValidIndex(7));;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void isValidIndex_invalidIndex_returnsFalse() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(isValidIndex(-1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(isValidIndex(8));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void convertYearAndSemesterToIndex_validValues_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(1, 1), 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(1, 2), 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(2, 1), 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(2, 2), 3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(3, 1), 4);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(3, 2), 5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(4, 1), 6);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(4, 2), 7);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void convertYearAndSemesterToIndex_invalidValues_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // invalid years"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(0, 1), -1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(5, 1), -1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        //invalid semesters"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(1, 0), -1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(convertYearAndSemesterToIndex(1, 3), -1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void convertIndexToYearAndSemester_validIndex_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(convertIndexToYearAndSemester(0), new Pair(1, 1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(convertIndexToYearAndSemester(1), new Pair(1, 2));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(convertIndexToYearAndSemester(2), new Pair(2, 1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(convertIndexToYearAndSemester(4), new Pair(3, 1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(convertIndexToYearAndSemester(6), new Pair(4, 1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void convertIndexToYearAndSemester_invalidIndex_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(convertIndexToYearAndSemester(-1), new Pair(0, 0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertEquals(convertIndexToYearAndSemester(8), new Pair(0, 0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getIndicesFromYear_validYear_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(1)[0], 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(1)[1], 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(2)[0], 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(2)[1], 3);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(3)[0], 4);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(3)[1], 5);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(4)[0], 6);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(4)[1], 7);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getIndicesFromYear_invalidYear_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(0)[0], -1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(0)[1], -1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(5)[0], -1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getIndicesFromYear(5)[1], -1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 18,
      "Hilda-Ang": 102
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/util/ModuleUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.model.util.ModuleUtil.isModuleAvailable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS1231;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS2040;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModules;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "import seedu.planner.model.course.DegreeRequirement;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.ModuleDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void hasValidCodeFormat_validFormat_returnsTrue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CS1010\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CS1010J\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CS1010CS\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CEG1010\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CEG1010J\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void hasValidCodeFormat_invalidFormat_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CS10101\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CSCS1010\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CSCS10101\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CSCS10101JJJ\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void isModuleAvailable_moduleAvailable_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e(getTypicalModules());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // module has no prerequisite"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isModuleAvailable(new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), CS1010));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // module\u0027s prerequisites has been fulfilled"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(isModuleAvailable(modules, modules, CS2103T));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void isModuleAvailable_moduleNotAvailable_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e(getTypicalModules());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // module\u0027s prerequisites have not been fulfilled"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(isModuleAvailable(new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), CS2040));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // module has been taken"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertFalse(isModuleAvailable(modules, modules, CS1231));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author rongjiecomputer"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void matchModuleCodePrefixes() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cString\u003e prefixes \u003d List.of(\"CS\", \"ES\", \"CEG\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Module code in list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertTrue(ModuleUtil.matchModuleCodePrefixes(\"CS1010\", prefixes));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertTrue(ModuleUtil.matchModuleCodePrefixes(\"ES1010\", prefixes));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Module code not in list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(ModuleUtil.matchModuleCodePrefixes(\"AC1000\", prefixes));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Only true if the whole alphabets part of module code is matched."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertTrue(ModuleUtil.matchModuleCodePrefixes(\"CEG1010\", prefixes));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(ModuleUtil.matchModuleCodePrefixes(\"CE1010\", prefixes));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void rankModuleCodePrefixes() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cString\u003e prefixes \u003d List.of(\"CS\", \"CEG\", \"CE\", \"IS\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Module code in list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(ModuleUtil.rankModuleCodePrefixes(\"CS1010\", prefixes), 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Prefix must match alphabets part entirely"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(ModuleUtil.rankModuleCodePrefixes(\"CEG1010\", prefixes), 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(ModuleUtil.rankModuleCodePrefixes(\"CE1010\", prefixes), 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Module code not in list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(ModuleUtil.rankModuleCodePrefixes(\"AC1010\", prefixes), 4);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void rankModuleCodeFromPriorityList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cModuleDescription\u003e priorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        priorityList.add(new ModuleDescription(\"CS1010\", DegreeRequirement.FOUNDATION));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        priorityList.add(new ModuleDescription(\"CS1231\", DegreeRequirement.FOUNDATION));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        priorityList.add(new ModuleDescription(\"CS2030\", DegreeRequirement.FOUNDATION));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Module code in list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(ModuleUtil.rankModuleCodeFromPriorityList(\"CS1010\", priorityList), 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(ModuleUtil.rankModuleCodeFromPriorityList(\"CS2030\", priorityList), 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Module code not in list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(ModuleUtil.rankModuleCodeFromPriorityList(\"CS2040\", priorityList), 3);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(ModuleUtil.rankModuleCodeFromPriorityList(\"GEQ1000\", priorityList), 3);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void findModuleEquivalence() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d List.of(new Module(\"CS1010\"), new Module(\"CS1101S\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        //Empty List"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(ModuleUtil.findModuleEquivalences(new ArrayList\u003c\u003e()), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        //Non-Empty List"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(ModuleUtil.findModuleEquivalences(moduleList),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                List.of(List.of(new Module(\"CS1010\"), new Module(\"CS1101S\"))));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 1,
      "GabrielYik": 30,
      "rongjiecomputer": 61,
      "Hilda-Ang": 33
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/JsonAdaptedModuleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.module.ModuleType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonAdaptedModule cs1010 \u003d new JsonAdaptedModule(CS1010);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(CS1010, cs1010.toModelType());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void toModelType_invalidModuleType_throwsIllegalValueException() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String s \u003d \"{\\\"type\\\": \\\"invalid\\\", \\\"moduleCode\\\": \\\"CS1010\\\"}\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonAdaptedModule module \u003d JsonUtil.fromJsonString(s, JsonAdaptedModule.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String expectedMessage \u003d ModuleType.MESSAGE_UNKNOWN_MODULE_TYPE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void toModelType_invalidModuleCode_throwsIllegalValueException() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String s \u003d \"{\\\"type\\\": \\\"Programme Requirements\\\", \\\"moduleCode\\\": \\\"invalid\\\"}\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonAdaptedModule module \u003d JsonUtil.fromJsonString(s, JsonAdaptedModule.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String expectedMessage \u003d ModuleInfo.MESSAGE_MODULE_CODE_NOT_FOUND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 38
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/JsonModulePlannerStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS2040;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.course.Major;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.user.UserProfile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonModulePlannerStorageTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonModulePlannerStorageTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void readModulePlanner_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        readModulePlanner(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private java.util.Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(String filePath) throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return new JsonModulePlannerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .readModulePlanner(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(readModulePlanner(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        readModulePlanner(\"NotJsonFormatModulePlanner.json\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void readModulePlanner_invalidModuleModulePlanner_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        readModulePlanner(\"invalidModuleModulePlanner.json\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void readModulePlanner_invalidAndValidModuleModulePlanner_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        readModulePlanner(\"invalidAndValidModuleModulePlanner.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void readAndSaveModulePlanner_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempModulePlanner.xml\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModulePlanner original \u003d getTypicalModulePlanner();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonModulePlannerStorage jsonModulePlannerStorage \u003d new JsonModulePlannerStorage(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        jsonModulePlannerStorage.saveModulePlanner(original, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ReadOnlyModulePlanner readBack \u003d jsonModulePlannerStorage.readModulePlanner(filePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(original, new ModulePlanner(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        original.deleteModules(Set.of(CS2040));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        original.addModules(Set.of(CS2103T), 2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        jsonModulePlannerStorage.saveModulePlanner(original, filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        readBack \u003d jsonModulePlannerStorage.readModulePlanner(filePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(original, new ModulePlanner(readBack));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        original.setUserProfile(new UserProfile(Major.COMPUTER_ENGINEERING, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        jsonModulePlannerStorage.saveModulePlanner(original); //file path not specified"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        readBack \u003d jsonModulePlannerStorage.readModulePlanner().get(); //file path not specified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(original, new ModulePlanner(readBack));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void saveModulePlanner_nullModulePlanner_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        saveModulePlanner(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Saves {@code ModulePlanner} at the specified {@code filePath}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, String filePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            new JsonModulePlannerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                    .saveModulePlanner(modulePlanner, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void saveModulePlanner_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        saveModulePlanner(new ModulePlanner(), null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 130
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/JsonSerializableModulePlannerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.testutil.TypicalModules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonSerializableModulePlannerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableModulePlannerTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static final Path TYPICAL_MODULE_PLANNER_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalModulePlanner.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static final Path INVALID_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModuleModulePlanner.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static final Path DUPLICATE_MODULE_SINGLE_SEMESTER_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateModuleSingleSemester.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static final Path DUPLICATE_MODULE_ACROSS_SEMESTERS_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateModuleAcrossSemesters.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static final Path INVALID_USER_PROFILE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidMajor.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static final Path INVALID_FOCUS_AREA_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFocusArea.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void toModelType_typicalModulePlannerFile_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonSerializableModulePlanner dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MODULE_PLANNER_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                JsonSerializableModulePlanner.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModulePlanner modulePlannerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModulePlanner typicalModulePlanner \u003d TypicalModules.getTypicalModulePlanner();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertEquals(modulePlannerFromFile, typicalModulePlanner);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void toModelType_invalidModuleFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonSerializableModulePlanner dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MODULE_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                JsonSerializableModulePlanner.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void toModelType_duplicateModuleSingleSemesterFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonSerializableModulePlanner dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_SINGLE_SEMESTER_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                JsonSerializableModulePlanner.class).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void toModelType_duplicateModuleAcrossSemestersFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonSerializableModulePlanner dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_ACROSS_SEMESTERS_FILE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                JsonSerializableModulePlanner.class).get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void toModelType_invalidUserProfile() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonSerializableModulePlanner dataFromFile \u003d JsonUtil.readJsonFile(INVALID_USER_PROFILE_FILE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                JsonSerializableModulePlanner.class).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void toModelType_invalidFocusArea() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonSerializableModulePlanner dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FOCUS_AREA_FILE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                JsonSerializableModulePlanner.class).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 80
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        userPrefs.setModulePlannerFilePath(Paths.get(\"modulePlanner.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 129,
      "Hilda-Ang": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.model.ModulePlannerChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonModulePlannerStorage modulePlannerStorage \u003d new JsonModulePlannerStorage(getTempFilePath(\"mp\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        storageManager \u003d new StorageManager(modulePlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void modulePlannerReadSave() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "         * {@link JsonModulePlannerStorage} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonModulePlannerStorageTest} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ModulePlanner original \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        storageManager.saveModulePlanner(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ReadOnlyModulePlanner retrieved \u003d storageManager.readModulePlanner().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(original, new ModulePlanner(retrieved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertNotNull(storageManager.getModulePlannerFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void handleModulePlannerChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Storage storage \u003d new StorageManager(new JsonModulePlannerStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        storage.handleModulePlannerChangedEvent(new ModulePlannerChangedEvent(new ModulePlanner()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    class JsonModulePlannerStorageExceptionThrowingStub extends JsonModulePlannerStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        public JsonModulePlannerStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 8,
      "-": 77,
      "Hilda-Ang": 17
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been posted to all subscribers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/ModulePlannerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_ZERO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * A utility class to help with building ModulePlanner objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " *     {@code ModulePlanner mp \u003d new ModulePlannerBuilder().withModule(CS1010, CS2030).build();}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ModulePlannerBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private ModulePlanner modulePlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModulePlannerBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModulePlannerBuilder(ModulePlanner modulePlanner) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.modulePlanner \u003d modulePlanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Adds a {@code Module} to the {@code ModulePlanner} that we are building."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModulePlannerBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e modules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulePlanner.addModules(modules, INDEX_ZERO);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Adds a {@code Module} to the specified semester {@code index}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * in the {@code ModulePlanner} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param module The module to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param index The semester index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return {@code this}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModulePlannerBuilder withModuleAt(Module module, int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cModule\u003e modules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        modulePlanner.addModules(modules, index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModulePlanner build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return modulePlanner;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 19,
      "Hilda-Ang": 37
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A utility class containing named constants for typical indexes to be used in tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int INDEX_ZERO \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int INDEX_ONE \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int INDEX_TWO \u003d 2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 1,
      "-": 5,
      "Hilda-Ang": 3
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/TypicalModules.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS1231;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS2030;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS2040;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MODULE_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_ZERO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * A utility class containing {@code Modules} to be used."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Module CS1010 \u003d VALID_MODULE_CS1010;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Module CS1231 \u003d VALID_MODULE_CS1231;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Module CS2030 \u003d VALID_MODULE_CS2030;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Module CS2040 \u003d VALID_MODULE_CS2040;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final Module CS2103T \u003d VALID_MODULE_CS2103T;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private TypicalModules() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns an {@code ModulePlanner} with all the typical modules."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static ModulePlanner getTypicalModulePlanner() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new ModulePlannerBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                .withModuleAt(CS1010, INDEX_ZERO)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                .withModuleAt(CS1231, INDEX_ZERO)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                .withModuleAt(CS2030, INDEX_ONE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                .withModuleAt(CS2040, INDEX_ONE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static Set\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return Set.of(CS1010, CS1231, CS2030, CS2040);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 19,
      "Hilda-Ang": 30
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 5,
      "-": 150,
      "Hilda-Ang": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI unit test class for AddressBook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager(new ModelManager()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 6,
      "-": 76,
      "Hilda-Ang": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 35,
      "Hilda-Ang": 1
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.events.model.ModulePlannerChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static final ModulePlannerChangedEvent EVENT_STUB \u003d new ModulePlannerChangedEvent(new ModulePlanner());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // after planner book is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 69,
      "Hilda-Ang": 6
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/testutil/EventsCollectorRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Sets up an {@code EventsCollector} and tears it down after each test."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCollectorRule implements TestRule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollector eventsCollector \u003d new EventsCollector();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * A class that collects events raised by other classes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public class EventsCollector {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public EventsCollector() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Collects any event raised by any class"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        @Subscribe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public void collectEvent(BaseEvent event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            events.add(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Removes collected events from the collected list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        public void reset() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            events.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns the most recent event collected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public BaseEvent getMostRecent() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (events.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if the collector did not receive any events"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.isEmpty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 3,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 67,
      "Hilda-Ang": 11
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "package seedu.planner.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ClearCommandSystemTest extends ModulePlannerSystemTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        /* Case: clear non-empty planner book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        /* Case: undo clearing planner book -\u003e original planner book restored */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        /* Case: redo clearing planner book -\u003e cleared */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        /* Case: selects first card in person list and clears planner book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original planner book"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire planner book cleared */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original planner book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        /* Case: clear empty planner book -\u003e cleared */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @see ModulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @see ModulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 11,
      "-": 77,
      "Hilda-Ang": 12
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import static seedu.planner.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ErrorDialogGuiTest extends ModulePlannerSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "Hilda-Ang": 6
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class HelpCommandSystemTest extends ModulePlannerSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "Hilda-Ang": 12
    }
  },
  {
    "path": "src/test/java/systemtests/ModulePlannerSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import static seedu.planner.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.TestApp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.testutil.TypicalModules;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.ui.CommandBox;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * A system test class for ModulePlanner, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public abstract class ModulePlannerSystemTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    protected ModulePlanner getInitialData() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return TypicalModules.getTypicalModulePlanner();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Displays all modules in the planner book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    protected void showAllModules() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(getModel().getModulePlanner().getTakenModules().size(), getModel().getTakenModules().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Deletes all modules in the planner book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    protected void deleteAllModules() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(0, getModel().getModulePlanner().getTakenModules().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(new ModulePlanner(expectedModel.getModulePlanner()), testApp.readStorageModulePlanner());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Calls {@code StatusBarFooterHandle} to remember its current state."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        //assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 1,
      "rongjiecomputer": 6,
      "-": 183,
      "Hilda-Ang": 19
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.testutil.TestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class SampleDataTest extends ModulePlannerSystemTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    protected ModulePlanner getInitialData() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 41,
      "Hilda-Ang": 6
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import seedu.planner.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyModulePlanner\u003e modulePlanner, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(modulePlanner, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 70,
      "Hilda-Ang": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003c?import seedu.planner.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "\u003cfx:root type\u003d\"seedu.planner.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 1,
      "-": 5
    }
  },
  {
    "path": "tools/moduleConverter.py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "#! python3"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "#"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "# This script will download the module information JSON file from NUSMods,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "# then sanitize it for use of Module Planner app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "#"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import json"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import os"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import re"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "import urllib.request, urllib.error"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "CURRENT_DIR \u003d os.path.abspath(os.path.dirname(__file__))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "NUSMODS_JSON \u003d os.path.join(CURRENT_DIR, \"nusmods.json\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "OUTPUT_JSON \u003d os.path.join(CURRENT_DIR, \"..\", \"src\", \"main\", \"resources\", \"data\", \"moduleInfo.json\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "def notNull(str):"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  return str.lower() !\u003d \"nil\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "if not os.path.exists(NUSMODS_JSON):"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  req \u003d urllib.request.Request(\"https://api.nusmods.com/2018-2019/moduleInformation.json\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  res \u003d urllib.request.urlopen(req)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  data \u003d res.read()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  with open(NUSMODS_JSON, \"w\", encoding\u003d\"utf8\") as f:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    f.write(data.decode(\"utf8\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "with open(NUSMODS_JSON, \"r\", encoding\u003d\"utf8\") as f:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  obj \u003d json.load(f)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "newObj \u003d []"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "modulePattern \u003d re.compile(r\"([A-Z]{2,3})(\\d{4})([A-Z]{0,2})\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "def scrapeAllModules(str):"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  x \u003d []"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  if str:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    match \u003d modulePattern.search(str)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    while match:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      x.append(match.group(0))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      match \u003d modulePattern.search(str, match.end())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  return x"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "S \u003d set()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "Map \u003d {}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "for mod in obj:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  newMod \u003d {}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  moduleCode \u003d mod[\"ModuleCode\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  S.add(moduleCode)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  newMod[\"code\"] \u003d moduleCode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  newMod[\"name\"] \u003d mod[\"ModuleTitle\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  newMod[\"creditCount\"] \u003d float(mod[\"ModuleCredit\"])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  newMod[\"description\"] \u003d mod.get(\"ModuleDescription\", \"\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  newMod[\"preclusions\"] \u003d scrapeAllModules(mod.get(\"Preclusion\", \"\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  newMod[\"prerequisites\"] \u003d scrapeAllModules(mod.get(\"Prerequisite\", \"\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  newObj.append(newMod)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  Map[moduleCode] \u003d newMod"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "# Remove module codes that do not have its module info entry"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "def deleteModules(newObj):"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  res \u003d 0"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  for module in newObj:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    prereq \u003d module[\"prerequisites\"]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    for m in prereq:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      if m not in S:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        res +\u003d 1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        prereq.remove(m)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    preclu \u003d module[\"preclusions\"]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    for m in preclu:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      if m not in S:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        res +\u003d 1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        preclu.remove(m)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  return res"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "while deleteModules(newObj) \u003e 0:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  pass"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "# Ensure backward preclusion relationship"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "for module in newObj:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  preclu \u003d module[\"preclusions\"]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  for moduleCode in preclu:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    m \u003d Map[moduleCode]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    if module[\"code\"] not in m[\"preclusions\"]:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      m[\"preclusions\"].append(module[\"code\"])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "# Remove MA1301 and MA1301X as prereq"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "PRE_U_MODS \u003d [\"MA1301\", \"MA1301X\", \"ES1000\", \"ES1103\"]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "for module in newObj:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  for ma in PRE_U_MODS:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    if ma in module[\"prerequisites\"] and module[\"code\"] not in PRE_U_MODS:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "      module[\"prerequisites\"].remove(ma)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "print(len(newObj))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "with open(OUTPUT_JSON, \"w\", encoding\u003d\"utf8\") as f:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  json.dump(newObj, f, separators\u003d(\u0027,\u0027,\u0027:\u0027)) # indent\u003d2"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "with open(OUTPUT_JSON, \"a\", encoding\u003d\"utf8\") as f:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "  f.write(\"\\n\")"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 104
    }
  }
]
