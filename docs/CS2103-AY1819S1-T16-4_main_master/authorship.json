[
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/ModulePanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents a selection change in the Module List Panel."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModulePanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final Module newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModulePanelSelectionChangedEvent(Module newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Module getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 21,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ALL_LETTERS_REGEX \u003d \"[a-zA-Z]+( +[a-zA-Z]+)*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if the String contains only alphabets."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param s The String"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the String contains only alphabets"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean containsOnlyLettersAndWhiteSpace(String s) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return s.matches(ALL_LETTERS_REGEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Takes the elements in a collection and combines them into a string"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * with each element separated by a whitespace."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The class of the element has to override the {@code toString()} method"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * for this method to work properly."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param collection The collection"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param \u003cE\u003e The runtime type of the collection"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The string containing all the elements in the collection"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static \u003cE\u003e String convertCollectionToString(Collection\u003cE\u003e collection) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(collection);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (E e : collection) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            sb.append(e + \" \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return sb.toString().trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 33,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //TODO: confirm if the list is filtered or sorted or both"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of taken modules */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredTakenModuleList(int semesterIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //TODO: confirm if the list is filtered or sorted or both"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of available modules */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredAvailableModuleList(int semesterIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 11,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.ModulePlannerParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ModulePlannerParser modulePlannerParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        modulePlannerParser \u003d new ModulePlannerParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d modulePlannerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredTakenModuleList(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return model.getFilteredTakenModuleList(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredAvailableModuleList(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return model.getFilteredAvailableModuleList(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 13,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/ModuleManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of modules."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModuleManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //TODO"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Changes the module type of the module."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param module The module to be changed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param newModuleType The new {@code ModuleType} that the {@code module} should be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void updateModuleType(Module module, ModuleType newModuleType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 14,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/AddModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "//@@author RomaRomama"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " * Add a module to the module planner"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addModule\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \": Add current/future modules to the module planner. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_YEAR + \"2 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_SEMESTER + \"2 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_CODE + \"CS3244 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added Module(s): %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the module planner\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private final int semesterIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private final List\u003cModule\u003e modulesToAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Add module method"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public AddModuleCommand(List\u003cModule\u003e modules, int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        requireAllNonNull(modules, index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        semesterIndex \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modulesToAdd \u003d modules;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //TODO"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e invalidModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module m : modulesToAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (!model.isModuleOffered(m)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                invalidModules.add(m);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!invalidModules.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            for (Module m : invalidModules) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                sb.append(m.toString() + \" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            throw new CommandException(String.format("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    Messages.MESSAGE_INVALID_MODULES, sb.toString().trim()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module m : modulesToAdd) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            sb.append(m.toString() + \" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        model.addModules(modulesToAdd, semesterIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, sb.toString().trim()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 64,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/DeleteModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Deletes a module identified using it\u0027s module code from the module planner."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteModule\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \": Deletes the module identified using it\u0027s module code.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_CODE + \"CS2103T\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULES_SUCCESS \u003d \"Deleted Module(s): %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final List\u003cModule\u003e modulesToDelete;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public DeleteModuleCommand(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.modulesToDelete \u003d modules;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e invalidModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Module m : modulesToDelete) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (!model.hasModule(m)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                invalidModules.add(m);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!invalidModules.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            for (Module m : invalidModules) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                sb.append(m.toString() + \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new CommandException(String.format("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    Messages.MESSAGE_INVALID_MODULES, sb.toString().trim()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Module m : modulesToDelete) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            sb.append(m.toString() + \" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        model.deleteModules(modulesToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULES_SUCCESS, sb.toString().trim()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof DeleteModuleCommand)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        DeleteModuleCommand command \u003d (DeleteModuleCommand) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return modulesToDelete.stream().allMatch(x -\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            command.modulesToDelete.stream().anyMatch(y -\u003e y.equals(x)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 68,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/GoToCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.convertYearAndSemesterToIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.isValidSemester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.isValidYear;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.TabSwitchEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A class representing the {@code goto} command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Goes from one tab to another.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_YEAR + \"1\" + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_SEMESTER + \"2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String SHOWING_GOTO_MESSAGE \u003d \"Go to Y%1$sS%2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final int semester;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Constructs a {@code GoToCommand}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param year The year to go to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param semester The semester in the year to go to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public GoToCommand(int year, int semester) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!isValidYear(year) \u0026\u0026 !isValidSemester(semester)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int tabIndex \u003d convertYearAndSemesterToIndex(year, semester);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        EventsCenter.getInstance().post(new TabSwitchEvent(tabIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new CommandResult(String.format(SHOWING_GOTO_MESSAGE, year, semester));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof GoToCommand)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        GoToCommand command \u003d (GoToCommand) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return this.year \u003d\u003d command.year \u0026\u0026 this.semester \u003d\u003d command.semester;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 59,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/ListModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Placeholder for ListModuleCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Lists all modules the user has taken or is available to take."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ListModuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listModule\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List modules taken or suggested for a semester. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_YEAR + \"1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_SEMESTER + \"1 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules taken\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates a ListModuleCommand to list modules for specified semester."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ListModuleCommand(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.getFilteredTakenModuleList(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                || (other instanceof ListModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u0026\u0026 index \u003d\u003d ((ListModuleCommand) other).index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "Hilda-Ang": 43
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/SuggestModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Shows all modules that the user is available to take for a particular semester."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class SuggestModuleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"suggestCommand\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Show modules the user is available to take. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_YEAR + \"1 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_SEMESTER + \"1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showed all available modules.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public SuggestModuleCommand(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.getFilteredAvailableModuleList(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "Hilda-Ang": 32
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/AddModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "//@@author RomaRomama"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " * Parses input arguments and creates a new AddModuleCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * and temporarily return a String (Module code) object  for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR, PREFIX_SEMESTER, PREFIX_CODE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_YEAR, PREFIX_SEMESTER, PREFIX_CODE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e codes \u003d ParserUtil.parseModuleCodes(argMultimap.getAllValues(PREFIX_CODE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return new AddModuleCommand(codes, IndexUtil.convertYearAndSemesterToIndex(year, semester));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 36,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/DeleteModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A parser that parse an input argument and creates a DeleteModuleCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * and returns a DeleteModuleCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                args, PREFIX_CODE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CODE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e modules \u003d ParserUtil.parseModuleCodes(argMultimap.getAllValues(PREFIX_CODE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new DeleteModuleCommand(modules);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 35,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/GoToCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A parser that parses an argument for the {@code GoToCommandParser}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class GoToCommandParser implements Parser\u003cGoToCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public GoToCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                args, PREFIX_YEAR, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_YEAR, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int year \u003d Integer.parseInt(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int semester \u003d Integer.parseInt(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new GoToCommand(year, semester);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 31,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ListModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ListModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Parses input arguments and creates a new ListModuleCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ListModuleCommandParser implements Parser\u003cListModuleCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListModuleCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and returns a ListModuleCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ListModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_YEAR, PREFIX_SEMESTER) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new ListModuleCommand(IndexUtil.convertYearAndSemesterToIndex(year, semester));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Hilda-Ang": 36
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.SetUpCommand.MESSAGE_FOCUS_AREA_CONSTRAINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.SetUpCommand.MESSAGE_MAJOR_CONSTRAINTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.module.ModuleInfo.MESSAGE_MODULE_CODE_CONSTRAINTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.ModuleUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_YEAR \u003d \"Year is not between 1 to 4.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_SEMESTER \u003d \"Semester is not between 1 to 2.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(oneBasedIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses the unverified {@code moduleCode} into a module."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param moduleCode The moduleCode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The module"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if the moduleCode does not meet the constraints"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static Module parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(MESSAGE_MODULE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!ModuleUtil.hasValidCodeFormat(moduleCode)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(MESSAGE_MODULE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new Module(moduleCode);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses the unverified {@code moduleCodes} into a valid List of {@code modules}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Individual module codes are parsed using the method {@link #parseModuleCode(String) parseModuleCode}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if the given {@code moduleCodes} do not meet the constraints."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static List\u003cModule\u003e parseModuleCodes(Collection\u003cString\u003e moduleCodes) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(moduleCodes);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (String m : moduleCodes) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            modules.add(parseModuleCode(m));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses a major."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The major is checked if it\u0027s in the correct format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param major The major"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The major"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if the major\u0027s format is wrong"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static String parseMajor(String major) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!StringUtil.containsOnlyLettersAndWhiteSpace(major)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(MESSAGE_MAJOR_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses a focus area."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The major is checked if it\u0027s in the correct format."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param focusArea The focus area"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The focus rea"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if the focus area\u0027s format is wrong"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static String parseFocusArea(String focusArea) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(focusArea);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!StringUtil.containsOnlyLettersAndWhiteSpace(focusArea)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(MESSAGE_FOCUS_AREA_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return focusArea;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses the focus areas."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The focus areas are checked if they\u0027re in the correct format."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Individual focus areas are checked using the method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * {@link #parseFocusArea(String focusArea) parseFocusArea}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param focusAreas The focus areas"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The {@code Set} of focus areas"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if one of the focus areas\u0027 format is wrong"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static Set\u003cString\u003e parseFocusAreas(Collection\u003cString\u003e focusAreas) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(focusAreas);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        final Set\u003cString\u003e focusAreasSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (String focusArea : focusAreas) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            focusAreasSet.add(parseFocusArea(focusArea));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return focusAreasSet;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the unverified year into a valid year index."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the given year is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static int parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int yearIndex \u003d Integer.parseInt(year.trim());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!IndexUtil.isValidYear(yearIndex)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return yearIndex;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the unverified semester into a valid semester index."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the given semester is invalid."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static int parseSemester(String semester) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int semesterIndex \u003d Integer.parseInt(semester.trim());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!IndexUtil.isValidSemester(semesterIndex)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return semesterIndex;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String planner} into an {@code Address}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code planner} is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 92,
      "-": 137,
      "Hilda-Ang": 33
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/SuggestModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.SuggestModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Parses input arguments and creates a new SuggestModuleCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class SuggestModuleCommandParser implements Parser\u003cSuggestModuleCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SuggestModuleCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and returns a ListModuleCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public SuggestModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_YEAR, PREFIX_SEMESTER) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new SuggestModuleCommand(IndexUtil.convertYearAndSemesterToIndex(year, semester));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Hilda-Ang": 36
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: can have a predicate to filter taken and available modules"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up the user profile."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param year The year of study"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param semester The semester in the year of study"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param major The major"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param focusAreas The focus areas"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUpUserProfile(int year, int semester, String major, Set\u003cString\u003e focusAreas);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the major exists."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * The major is checked against a list of available"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * majors offered by the relevant educational institution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param major The major"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if the major is offered, else false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasMajor(String major);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the focus area exists."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The focus area is checked against a list of available"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * focus areas offered by the relevant educational institution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param focusArea The focus area"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if the focus area is offered, else false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasFocusAreas(Set\u003cString\u003e focusArea);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyModulePlanner newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyModulePlanner getModulePlanner();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the module exists."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param module The module"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if the module with {@code moduleCode} exists, false if not"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the {@code Module} is offered by the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * relevant educational institution."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param module The module"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if the module is offered, else false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean isModuleOffered(Module module);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the modules."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param modules The modules"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteModules(List\u003cModule\u003e modules);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //@@author RomaRomama"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Add list of modules into the specified semester"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param modules List of modules"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param index Index of the semester"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    void addModules(List\u003cModule\u003e modules, int index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author rongjiecomputer"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns an immutable list of {@code ModuleInfo}s."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Note: return type might change to ImmutableList\u003cModuleInfo\u003e in the future."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    ModuleInfo[] getModuleInfo();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //TODO: confirm filtered or sorted or both"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredTakenModuleList(int index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //TODO: confirm filtered or sorted or both"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredAvailableModuleList(int index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous planner book states to restore."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoModulePlanner();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone planner book states to restore."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoModulePlanner();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s planner book to its previous state."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoModulePlanner();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s planner book to its previously undone state."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoModulePlanner();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current planner book state for undo/redo."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitModulePlanner();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 11,
      "GabrielYik": 11,
      "rongjiecomputer": 9,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.model.ModulePlannerChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.enumeration.FocusArea;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.enumeration.Major;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the planner book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ModuleInfo[] moduleInfo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserProfile userProfile;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedModulePlanner versionedModulePlanner;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: Delete this"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyModulePlanner modulePlanner, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(modulePlanner, new ModuleInfo[] {}, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Initializes a ModelManager with the given modulePlanner and userPrefs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModelManager(ReadOnlyModulePlanner modulePlanner, ModuleInfo[] moduleInfo, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireAllNonNull(modulePlanner, userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logger.fine(\"Initializing with planner: \" + modulePlanner + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner \u003d new VersionedModulePlanner(modulePlanner);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.moduleInfo \u003d moduleInfo;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this(new ModulePlanner(), new ModuleInfo[]{}, new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void setUpUserProfile(int year, int semester, String major, Set\u003cString\u003e focusAreas) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        UserProfile.setUp(year, semester, major, focusAreas);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        userProfile \u003d UserProfile.getInstance();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean hasMajor(String major) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (Major m : Major.values()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            if (m.toString().equals(major)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks if the {@code focusArea} is valid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * The focus area is checked against a list of available"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * focus areas offered by the relevant educational institution."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param focusArea The focus area"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the focus area is offered, else false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private boolean hasFocusArea(String focusArea) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (FocusArea fa : FocusArea.values()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            if (fa.toString().equals(focusArea)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean hasFocusAreas(Set\u003cString\u003e focusArea) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (String fa : focusArea) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            if (!hasFocusArea(fa)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyModulePlanner newData) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedModulePlanner.resetData(newData);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyModulePlanner getModulePlanner() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedModulePlanner;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateModulePlannerChanged() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ModulePlannerChangedEvent(versionedModulePlanner));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedModulePlanner.hasModule(module);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteModules(List\u003cModule\u003e moduleCodes) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedModulePlanner.deleteModules(moduleCodes);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isModuleOffered(Module module) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return ModuleInfo.getFromModuleCode(module.getCode()).isPresent();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the actual module information of the {@code module}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * from {@code moduleInfo} and {@code finalizes} that module"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * with the actual module information."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param module The module to be finalized"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The module with the actual module information"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private Module finalizeModule(Module module) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cModuleInfo\u003e optModuleInfo \u003d ModuleInfo.getFromModuleCode(module.getCode());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (optModuleInfo.isPresent()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Module(ModuleType.PROGRAMME_REQUIREMENTS, optModuleInfo.get());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Module(\"Unknown\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the actual module information of the {@code modules}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and finalizes the modules with their actual module information."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Individual modules are finalized using the method"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #finalizeModule(Module) finalizeModule}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param modules The modules to be finalized"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The modules with their actual module information"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cModule\u003e finalizeModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cModule\u003e finalizedModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Module m : modules) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            finalizedModules.add(finalizeModule(m));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return finalizedModules;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //@@author RomaRomama"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void addModules(List\u003cModule\u003e modules, int index) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e finalizedModules \u003d finalizeModules(modules);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        versionedModulePlanner.addModules(finalizedModules, index);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author rongjiecomputer"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ModuleInfo[] getModuleInfo() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return moduleInfo;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredTakenModuleList(int index) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                versionedModulePlanner.listModulesTaken(index));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredAvailableModuleList(int index) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                versionedModulePlanner.listModulesAvailable(index));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoModulePlanner() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedModulePlanner.canUndo();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoModulePlanner() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedModulePlanner.canRedo();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoModulePlanner() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedModulePlanner.undo();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoModulePlanner() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedModulePlanner.redo();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitModulePlanner() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedModulePlanner.commit();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedModulePlanner.equals(other.versionedModulePlanner);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 10,
      "GabrielYik": 15,
      "rongjiecomputer": 5,
      "-": 161,
      "Hilda-Ang": 63
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ModulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.semester.Semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang //@@author GabrielYik"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Wraps all data at the module planner level."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ModulePlanner implements ReadOnlyModulePlanner {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int MAX_NUMBER_SEMESTERS \u003d 8;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int MAX_SEMESTERS_PER_YEAR \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * The number of {@code Module} groups that is shown to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Currently, there are two groups: one for modules taken and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * one for modules available. A {@code Module} group is different"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * from a {@code ModuleType}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int NUMBER_MODULE_GROUPS \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final List\u003cSemester\u003e semesters;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Constructs a {@code ModulePlanner} and initializes an array of 8 {@code Semester}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * to store details of each {@code Semester}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModulePlanner() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semesters \u003d new ArrayList\u003c\u003e(MAX_NUMBER_SEMESTERS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d MAX_NUMBER_SEMESTERS / MAX_SEMESTERS_PER_YEAR; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d MAX_SEMESTERS_PER_YEAR; j++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                semesters.add(new Semester(i, j, false));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates a {@code ModulePlanner} using the {@code Module}s in the {@code toBeCopied}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModulePlanner(ReadOnlyModulePlanner toBeCopied) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Add one or more module(s) to list of modules taken for the specified semester."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules A list of valid modules to be added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index A valid semester"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void addModules(List\u003cModule\u003e modules, int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semesters.get(index).addModules(modules);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Delete one or more module(s) from list of modules taken for the specified semester."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules A list of valid modules to be deleted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void deleteModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            semester.deleteModules(modules);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks if the {@code Module} exists in the module planner."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param module The module to check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the module exists, false if not"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            if (semester.containsModule(module)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns all {@code Semester}s wrapped in an {@code ObservableList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return An {@code ObservableList} containing all the {@code Semester}s"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cSemester\u003e getSemesters() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                FXCollections.observableList(semesters));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns all {@code Module}s taken in the {@code Semester} wrapped in an"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index A valid index."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return A list of modules taken in the semester."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cModule\u003e listModulesTaken(int index) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                semesters.get(index).getModulesTaken());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //TODO: available modules might not be placed by year"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns all {@code Module}s available in the {@code Semester} wrapped in an"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index The nominal {@code Semester} index the {@code Module}s"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *                      are stored at"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return An {@code ObservableList} containing all the {@code Module}s"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cModule\u003e listModulesAvailable(int index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                semesters.get(index).getModulesAvailable());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Resets the existing data of this {@code ModulePlanner} with {@code newData}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void resetData(ReadOnlyModulePlanner newData) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        setSemesters(newData.getSemesters());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //TODO: change to private once SampleModuleUtil is not needed, and remove the toRemove boolean"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void setSemesters(List\u003cSemester\u003e semesters) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        boolean toRemove \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (this.semesters.size() !\u003d 0) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            toRemove \u003d true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_NUMBER_SEMESTERS; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            if (toRemove) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                this.semesters.remove(i);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            this.semesters.add(i, semesters.get(i));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                || (other instanceof ModulePlanner // instanceof handles nulls"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u0026\u0026 semesters.equals(((ModulePlanner) other).semesters));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return semesters.hashCode();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Hilda-Ang": 152
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ReadOnlyModulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.semester.Semester;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents an unmodifiable view of a {@code ModulePlanner}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public interface ReadOnlyModulePlanner {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns an unmodifiable view of the {@code Semester}s."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return An {@code ObservableList} of the {@code Semester}s"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cSemester\u003e getSemesters();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns an unmodifiable view of the {@code Module}s taken."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param index The nominal semester index the {@code Module}s are stored at"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return An {@code ObservableList} of the {@code Module}s"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e listModulesTaken(int index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns an unmodifiable view of the {@code Module}s available."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param index The nominal semester index the {@code Module}s are stored at"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return An {@code ObservableList} of the {@code Module}s"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e listModulesAvailable(int index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 30,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/UserProfile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.enumeration.FocusArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.enumeration.Major;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the profile of the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * This class is a singleton."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class UserProfile {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static UserProfile instance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private int semester;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Major major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Set\u003cFocusArea\u003e focusAreas;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private UserProfile(int year, int semester, Major major, Set\u003cFocusArea\u003e focusAreas) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.focusAreas \u003d focusAreas;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Gets an instance of the user profile."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * If the user profile does not exist,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * {@code UserProfileNotSetUpException} is thrown."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The user profile instance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static UserProfile getInstance() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new UserProfileNotSetUpException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Sets up the user profile."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param year The current year of study"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param semester The current semester in the year of study"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param major The major"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param focusAreas The focus areas"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static void setUp(int year, int semester, String major, Set\u003cString\u003e focusAreas) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        instance \u003d new UserProfile(year, semester, mapMajor(major), mapFocusAreas(focusAreas));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Converts the major from a {@code String} to a {@code Major}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param major The major as a {@code String}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The major as a {@code Major}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static Major mapMajor(String major) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Major m : Major.values()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (m.toString().equals(major)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                return m;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return Major.UNKNOWN;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Converts the focus area from a {@code String} to a {@code FocusArea}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param focusArea The focus area as a {@code String}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The focus area as a {@code FocusArea}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static FocusArea mapFocusArea(String focusArea) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (FocusArea fa : FocusArea.values()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (fa.toString().equals(focusArea)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                return fa;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return FocusArea.UNKNOWN;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Converts the focus areas from {@code String}s to {@code FocusArea}s."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Each focus area is converted from a {@code String} to a {@code FocusArea}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * using the method {@link #mapFocusArea(String) mapFocusArea}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param focusAreas The focus areas as {@code String}s"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The focus areas as {@code FocusArea}s"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static Set\u003cFocusArea\u003e mapFocusAreas(Set\u003cString\u003e focusAreas) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Set\u003cFocusArea\u003e focusAreasSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (String fa : focusAreas) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            focusAreasSet.add(mapFocusArea(fa));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return focusAreasSet;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns the current year of study."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The current year of study"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns the current semester in the year of study."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The current semester in the year of study"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public int getSemester() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns the major."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The major"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Major getMajor() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns the focus areas."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The focus areas"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Set\u003cFocusArea\u003e getFocusAreas() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return focusAreas;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 129,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/enumeration/FocusArea.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.enumeration;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the focus areas of computer science students."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * These focus areas are applicable only to new cohorts from AY2015-16 onwards."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public enum FocusArea {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ALGORITHMS_AND_THEORY(\"Algorithms and Theory\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ARTIFICIAL_INTELLIGENCE(\"Artificial Intelligence\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    COMPUTER_GRAPHICS_AND_GAMES(\"Computer Graphics and Games\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    COMPUTER_SECURITY(\"Computer Security\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    DATABASE_SYSTEMS(\"Database Systems\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    MULTIMEDIA_INFORMATION_RETRIEVAL(\"Multimedia Information Retrieval\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    NETWORKING_AND_DISTRIBUTED_SYSTEMS(\"Networking and Distributed Systems\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PARALLEL_COMPUTING(\"Parallel Computing\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PROGRAMMING_LANGUAGES(\"Programming Languages\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    SOFTWARE_ENGINEERING(\"Software Engineering\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    UNKNOWN(\"Unknown\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    FocusArea(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 30,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/enumeration/Major.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.enumeration;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the majors of students."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Currently, there is only one field present since our target audience"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * is Computer Science students."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public enum Major {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    COMPUTER_SCIENCE(\"Computer science\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    COMPUTER_ENGINEERING(\"Computer engineering\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    UNKNOWN(\"Unknown\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    Major(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 23,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/Module.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang //@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import com.google.common.collect.ImmutableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Temporary {@code Module} class placeholder."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private ModuleType type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private ModuleInfo information;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates a new {@code Module}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * This {@code Module} does not have all its"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * attributes initialised and is meant to be used"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * as a lightweight and convenient object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param code The {@code Module} code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public Module(String code) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        information \u003d new ModuleInfo(code);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //TODO: verify if ModuleInfo contains ModuleType"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates a {@code Module}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param type The {@code ModuleType}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param information The {@code ModuleInfo}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public Module(ModuleType type, ModuleInfo information) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.information \u003d information;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code Module} code."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code Module} name."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code ModuleType}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code ModuleType}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModuleType getType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the possible {@code ModuleType}s."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The possible {@code ModuleType}s"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModuleType[] getPossibleTypes() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getPossibleTypes();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code Module} credit count."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} credit count"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public float getCreditCount() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getCreditCount();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code Module} preclusions."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} preclusions"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPreclusions() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getPreclusions();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code Module} prerequisites."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} prerequisites"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPrerequisites() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getPrerequisites();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Module module \u003d (Module) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return this.information.getCode().equals(module.getCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return getCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "Hilda-Ang": 120
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/ModuleInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik @@author rongjiecomputer"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.google.common.base.Charsets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.google.common.base.Preconditions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.google.common.collect.ImmutableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.google.common.collect.ImmutableMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.google.common.io.Resources;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.MainApp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents an immutable {@code ModuleInfo} class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * REQUIRES: Module code is globally unique, no two ModuleInfo object has the same module code."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleInfo {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_MODULE_CODE_CONSTRAINTS \u003d \"Module codes should be of the format WX(Y)1234(Z), \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"where WX(Y) refers to a prefix like CS or CEG that describes the type of the module, \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"1234 refers to a sequence of positive numbers, \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"and (Z) refers to an optional postfix.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static ImmutableMap\u003cString, ModuleInfo\u003e codeToModuleInfoMap \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Class to retrieve {@code ModuleInfo} from JSON file packaged in JAR file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static class ModuleInfoRetriever {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        private static final String MODULE_INFO_FILE_PATH \u003d \"/data/moduleInfo.json\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        private static Logger logger \u003d LogsCenter.getLogger(ModuleInfoRetriever.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        private static ModuleInfoRetriever instance \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        private ModuleInfo[] moduleInfoList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        private ModuleInfoRetriever() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                URL resource \u003d MainApp.class.getResource(MODULE_INFO_FILE_PATH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                String text \u003d Resources.toString(resource, Charsets.UTF_8);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                moduleInfoList \u003d JsonUtil.fromJsonString(text, ModuleInfo[].class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                ModuleInfo.finalizeModuleInfo(moduleInfoList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                logger.warning(\"Problem while reading from resource file. \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    + \"Will be starting with an empty module database\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                moduleInfoList \u003d new ModuleInfo[] {};"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         * Get singleton instance of {@code ModuleInfoRetriever}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         * @throws DataConversionException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        public static ModuleInfoRetriever getInstance() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                instance \u003d new ModuleInfoRetriever();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return instance;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        public ModuleInfo[] getModuleInfoList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return moduleInfoList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         *  Map module code to {@code ModuleInfo}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         * @param moduleCode Module code"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        public Optional\u003cModuleInfo\u003e getFromModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (codeToModuleInfoMap.containsKey(moduleCode)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                return Optional.\u003cModuleInfo\u003eof(codeToModuleInfoMap.get(moduleCode));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         * Takes in a list of {@code ModuleInfo}s deserialzied by JSON parser and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         * finalize {@code ModuleInfo}s\u0027 internal structure."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         * @param moduleInfo List of {@code ModuleInfo}s deserialized by JSON parser."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        public static ModuleInfo[] finalizeModuleInfo(ModuleInfo[] moduleInfo) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            ImmutableMap.Builder\u003cString, ModuleInfo\u003e builder \u003d ImmutableMap.builder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            for (ModuleInfo mInfo : moduleInfo) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                builder.put(mInfo.getCode(), mInfo);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            codeToModuleInfoMap \u003d builder.build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            for (ModuleInfo mInfo : moduleInfo) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                mInfo.finalize(codeToModuleInfoMap);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return moduleInfo;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ModuleType[] possibleTypes;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Module credit. We set the type to be float because some modules have 0.5 MC."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private float creditCount;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonProperty(\"preclusions\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String[] preclusions;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonProperty(\"prerequisites\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String[] prerequisites;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ImmutableList\u003cModuleInfo\u003e precluModuleInfo;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ImmutableList\u003cModuleInfo\u003e prereqModuleInfo;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private boolean finalized \u003d false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Default constructor required by JSON parser."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleInfo() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Creates a new {@code ModuleInfo}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * This {@code ModuleInfo} does not have all its"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * attributes initialised and is meant to be used"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * as a lightweight and convenient object."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param code The {@code Module} code"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleInfo(String code) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Creates a new {@code ModuleInfo}. For testing only."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param code          The {@code Module} code"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param name          The {@code Module} name"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param possibleTypes The possible {@code ModuleType}s"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param creditCount   The credit count"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param preclusions   An array of preclusion module code strings"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param prerequisites An array of prerequisite module code strings"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleInfo(String code, String name, ModuleType[] possibleTypes,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                      float creditCount, String[] preclusions, String[] prerequisites) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireAllNonNull(code, name, possibleTypes, creditCount, preclusions, prerequisites);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.possibleTypes \u003d possibleTypes;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.creditCount \u003d creditCount;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.preclusions \u003d preclusions;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.prerequisites \u003d prerequisites;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleType[] getPossibleTypes() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return possibleTypes;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public float getCreditCount() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return creditCount;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author rongjiecomputer"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPrerequisites() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Preconditions.checkState(finalized);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return prereqModuleInfo;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPreclusions() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Preconditions.checkState(finalized);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return precluModuleInfo;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Initialize internal lists of prerequisite and preclusion {@code ModuleInfo}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param map An immutable map that maps module code to {@code ModuleInfo}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private void finalize(ImmutableMap\u003cString, ModuleInfo\u003e map) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Preconditions.checkState(!finalized);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        prereqModuleInfo \u003d Arrays.stream(prerequisites)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .map(code -\u003e map.get(code))"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .filter(mInfo -\u003e mInfo !\u003d null)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .collect(ImmutableList.toImmutableList());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        precluModuleInfo \u003d Arrays.stream(preclusions)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .map(code -\u003e map.get(code))"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .filter(mInfo -\u003e mInfo !\u003d null)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .collect(ImmutableList.toImmutableList());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        finalized \u003d true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Takes in a list of {@code ModuleInfo}s deserialzied by JSON parser and"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * finalize {@code ModuleInfo}s\u0027 internal structure."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param moduleInfo List of {@code ModuleInfo}s deserialized by JSON parser."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static ModuleInfo[] finalizeModuleInfo(ModuleInfo[] moduleInfo) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ImmutableMap.Builder\u003cString, ModuleInfo\u003e builder \u003d ImmutableMap.builder();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (ModuleInfo mInfo : moduleInfo) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            builder.put(mInfo.getCode(), mInfo);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        codeToModuleInfoMap \u003d builder.build();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (ModuleInfo mInfo : moduleInfo) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            mInfo.finalize(codeToModuleInfoMap);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return moduleInfo;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *  Map module code to {@code ModuleInfo}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param moduleCode Module code"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static Optional\u003cModuleInfo\u003e getFromModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return ModuleInfoRetriever.getInstance().getFromModuleCode(moduleCode);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return code.hashCode();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (!(other instanceof ModuleInfo)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo otherModuleInfo \u003d (ModuleInfo) other;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return code.equals(otherModuleInfo.code);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String str \u003d \"ModuleInfo(\" + code + \") {\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (prereqModuleInfo.size() \u003e 0) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            str +\u003d \" prereq:\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            for (ModuleInfo prereq : prereqModuleInfo) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                str +\u003d \" \" + prereq.code;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (precluModuleInfo.size() \u003e 0) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            str +\u003d \" preclu:\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            for (ModuleInfo preclu : precluModuleInfo) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                str +\u003d \" \" + preclu.code;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return str + \" }\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 191,
      "rongjiecomputer": 101,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/ModuleType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the degree requirements of a Computer Science programme."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public enum ModuleType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    UNIVERSITY_LEVEL_REQUIREMENTS(\"University Level Requirements\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    UNRESTRICTED_ELECTIVES(\"Unrestricted Electives\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PROGRAMME_REQUIREMENTS(\"Programme Requirements\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_FOUNDATION(\"PR Foundation\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_BREADTH_AND_DEPTH(\"PR Breadth and Depth\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_INDUSTRIAL_EXPERIENCE(\"PR Industrial Experience\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_IT_PROFESSIONALISM(\"PR IT Professionalism\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_MATHEMATICS_AND_SCIENCE(\"PR Mathematics and Science\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String MESSAGE_UNKNOWN_MODULE_TYPE \u003d \"Not a known module type.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ModuleType(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Create {@code ModuleType} enum object from module type string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param name The name of module type."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static ModuleType fromString(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (ModuleType type : ModuleType.values()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (type.name.equalsIgnoreCase(name)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                return type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        throw new IllegalValueException(MESSAGE_UNKNOWN_MODULE_TYPE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 44,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/semester/Semester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Represents a Semester in the module planner."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Holds the list of modules taken and the list of modules available for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * that semester."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * A semester can be characterised by the year it is in, and whether it is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * the first or second semester in that year."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /** Constant for the first index. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int FIRST \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /** Constant for the second index. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int SECOND \u003d 2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // Basic information"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // Indicator of whether user has passed the index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private boolean hasBeenTaken;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // Modules lists"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private ObservableList\u003cModule\u003e modulesTaken \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private ObservableList\u003cModule\u003e modulesAvailable \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Constructs a {@code Semester}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param year A valid year"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index A valid index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param hasBeenTaken Whether the semester has been taken"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public Semester(int year, int index, boolean hasBeenTaken) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.hasBeenTaken \u003d hasBeenTaken;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Adds one or more module(s) to the list of modules taken."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules A non-empty list of modules to be added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void addModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulesTaken.addAll(modules);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Adds one or more modules(s) to the list of modules available."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules A non-empty list of modules to be added"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void addAvailableModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulesAvailable.addAll(modules);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Deletes one or more module(s) from list of modules taken if present."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules A non-empty list of modules to be deleted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void deleteModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (Module m : modules) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            modulesTaken.remove(m);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks if the module with is taken or planned to take in the semester."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param module The module"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the module exists, false if not"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean containsModule(Module module) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return modulesTaken.stream().anyMatch(module::equals);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Changes the {@code Semester}\u0027s status from currently being taken"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * to taken."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void archive() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.hasBeenTaken \u003d true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns the list of modules taken in this semester."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return A list of modules taken"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getModulesTaken() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return modulesTaken;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns a list of modules that the user is available to take"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * in this semester."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return A list of available modules"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getModulesAvailable() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return modulesAvailable;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                || (other instanceof Semester // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                \u0026\u0026 modulesTaken.equals(((Semester) other).modulesTaken));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return modulesTaken.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "Hilda-Ang": 129
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/util/IndexUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Contains utility methods for handling year, semester, and indexing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class IndexUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int NUM_OF_SEMESTER_IN_YEAR \u003d 2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks that the given year is valid, i.e. is between 1 to 4."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param year Year to be checked."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the given year is valid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static boolean isValidYear(int year) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return year \u003e 0 \u0026\u0026 year \u003c 5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks that the given semester is valid, i.e. is either 1 or 2."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param semester Semester to be checked."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the given semester is valid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static boolean isValidSemester(int semester) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return semester \u003d\u003d 1 || semester \u003d\u003d 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Converts the given year and semester to an index between 0 and 7,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * e.g. year 1 semester 1 will be converted to index 0,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * year 1 semester 2 will be converted to index 1,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and year 2 semester 1 will be converted to index 2."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param year An integer between 1 to 4."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param semester An integer between 1 to 2."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The resulting index between 0 to 7."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static int convertYearAndSemesterToIndex(int year, int semester) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return year * NUM_OF_SEMESTER_IN_YEAR - NUM_OF_SEMESTER_IN_YEAR + semester - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "Hilda-Ang": 42
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/util/ModuleUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MODULE_CODE_REGEX \u003d \"^[A-Z]{2,3}\\\\d{4}[A-Z]{0,2}$\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if the module code format is valid."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the module code format valid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean hasValidCodeFormat(String code) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return code.matches(MODULE_CODE_REGEX);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 12,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/util/SampleModulesUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a temporary class to generate sample {@code Module}s."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleModulesUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author rongjiecomputer"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns an {@code ObservableList\u003cModule\u003e} with modules from {@code start} to {@code end}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * The possible modules are stored in a {@code List} internally."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param start The start index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param end   The end index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @return An {@code ObservableList} with modules from {@code start} to {@code end}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static List\u003cModule\u003e genModules(int start, int end) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt1 \u003d new ModuleType[]{ModuleType.PR_FOUNDATION, ModuleType.UNRESTRICTED_ELECTIVES};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt2 \u003d new ModuleType[]{ModuleType.PR_BREADTH_AND_DEPTH, ModuleType.UNRESTRICTED_ELECTIVES};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt3 \u003d new ModuleType[]{ModuleType.PR_IT_PROFESSIONALISM, ModuleType.UNRESTRICTED_ELECTIVES};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt4 \u003d new ModuleType[]{ModuleType.UNRESTRICTED_ELECTIVES};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt5 \u003d new ModuleType[]{ModuleType.UNRESTRICTED_ELECTIVES};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt6 \u003d new ModuleType[]{ModuleType.PR_INDUSTRIAL_EXPERIENCE};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs1010 \u003d new ModuleInfo(\"CS1010\", \"Programming Methodology I\", pt1,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                4, new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs1231 \u003d new ModuleInfo(\"CS1231\", \"Discrete structure\", pt2,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                4, new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs2030 \u003d new ModuleInfo(\"CS2030\", \"Programming Methodology II\", pt3,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                4, new String[]{}, new String[]{\"CS1010\"});"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs2040 \u003d new ModuleInfo(\"CS2040\", \"Data Structure\", pt1,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                4, new String[]{\"CS2040C\"}, new String[]{\"CS1010\", \"CS1231\"});"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs2040c \u003d new ModuleInfo(\"CS2040C\", \"Data Structure\", pt1,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                4, new String[]{\"CS2040\"}, new String[]{\"CS1010\", \"CS1231\"});"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs1234 \u003d new ModuleInfo(\"CS1234\", \"Sleep Science\", pt4,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                100, new String[]{\"CS2030\"}, new String[]{\"CS2040\"});"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs5678 \u003d new ModuleInfo(\"CS5678\", \"Eat more gum\", pt5,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                6, new String[]{}, new String[]{\"CS1010\"});"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs9101 \u003d new ModuleInfo(\"CS9101\", \"Beef Heef\", pt6,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                5, new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo.finalizeModuleInfo("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                new ModuleInfo[]{cs1010, cs1231, cs2030, cs2040, cs2040c, cs1234, cs5678, cs9101});"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m1 \u003d new Module(ModuleType.PR_FOUNDATION, cs1010);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m2 \u003d new Module(ModuleType.PR_BREADTH_AND_DEPTH, cs1231);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m3 \u003d new Module(ModuleType.PR_IT_PROFESSIONALISM, cs2030);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m4 \u003d new Module(ModuleType.PR_FOUNDATION, cs2040);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m5 \u003d new Module(ModuleType.PR_FOUNDATION, cs2040c);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m6 \u003d new Module(ModuleType.UNRESTRICTED_ELECTIVES, cs5678);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m7 \u003d new Module(ModuleType.PR_INDUSTRIAL_EXPERIENCE, cs9101);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cModule\u003e modules \u003d List.of(m1, m2, m3, m4, m5, m6, m7);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return modules.subList(start, end);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 58,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedSemester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.semester.Semester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// @@author rongjiecomputer"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * JSON serializable {@code Semester} class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonAdaptedSemester {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // Indicator of whether user has passed the index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private boolean hasBeenTaken;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // Modules lists"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private List\u003cJsonAdaptedModule\u003e modulesTaken \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private List\u003cJsonAdaptedModule\u003e modulesAvailable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Default constructor. For JSON Deserialization."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    JsonAdaptedSemester() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param sem {@code Semester} to be converted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    JsonAdaptedSemester(Semester sem) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        index \u003d sem.getIndex();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        year \u003d sem.getYear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        modulesTaken \u003d sem.getModulesTaken().stream().map("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            m -\u003e new JsonAdaptedModule(m)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        modulesAvailable \u003d sem.getModulesAvailable().stream().map("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            m -\u003e new JsonAdaptedModule(m)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Convert to {@code Semester} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Semester toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cModule\u003e modulesTaken \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : this.modulesTaken) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            Module toModelType \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            modulesTaken.add(toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cModule\u003e modulesAvailable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (JsonAdaptedModule m : this.modulesAvailable) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            Module module \u003d m.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            modulesAvailable.add(module);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Semester sem \u003d new Semester(year, index, hasBeenTaken);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        sem.addAvailableModules(modulesAvailable);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        sem.addModules(modulesTaken);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return sem;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 56,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonModulePlannerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// @@author rongjiecomputer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Represents a storage for {@link seedu.planner.model.ModulePlanner}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonModulePlannerStorage implements ModulePlannerStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(JsonModulePlannerStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public JsonModulePlannerStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Path getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return readModulePlanner(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Similar to {@link #readModulePlanner()}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            logger.info(\"ModulePlanner file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Optional\u003cJsonSerializableModulePlanner\u003e jsonModulePlanner \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            filePath, JsonSerializableModulePlanner.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            if (jsonModulePlanner.isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                return Optional.\u003cReadOnlyModulePlanner\u003eof(jsonModulePlanner.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        saveModulePlanner(modulePlanner, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Similar to {@link #saveModulePlanner(ReadOnlyModulePlanner)}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        requireNonNull(modulePlanner);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModulePlanner(modulePlanner), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 67,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonSerializableModulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ModulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.semester.Semester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// @@author rongjiecomputer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * An Immutable {@link ModulePlanner} that is serializable to JSON format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonSerializableModulePlanner {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private List\u003cJsonAdaptedSemester\u003e semesters;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Default constructor for JSON serialization."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public JsonSerializableModulePlanner() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        semesters \u003d new ArrayList\u003c\u003e(ModulePlanner.MAX_NUMBER_SEMESTERS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Conversion."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public JsonSerializableModulePlanner(ReadOnlyModulePlanner src) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        semesters.addAll(src.getSemesters().stream().map(JsonAdaptedSemester::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Converts this moduleplanner into the model\u0027s [@code ModulePlanner] object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ModulePlanner toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModulePlanner planner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cSemester\u003e semesters \u003d new ArrayList\u003c\u003e(ModulePlanner.MAX_NUMBER_SEMESTERS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (JsonAdaptedSemester sem : this.semesters) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            semesters.add(sem.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        planner.setSemesters(semesters);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 38,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/ModulePlannerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "// @@author rongjiecomputer"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Represents a storage for {@link seedu.planner.model.ModulePlanner}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public interface ModulePlannerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    Path getModulePlannerFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns ModulePlanner data as a {@link ReadOnlyModulePlanner}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner() throws DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @see #readModulePlanner()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Saves the given {@link ReadOnlyModulePlanner} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param modulePlanner cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    void saveModulePlanner(ReadOnlyModulePlanner modulePlanner) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @see #saveModulePlanner(ReadOnlyModulePlanner)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 34,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.ModulePlanner.MAX_NUMBER_SEMESTERS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.ModulePlanner.NUMBER_MODULE_GROUPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.TabSwitchEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModuleListPanel[] takenModulesListPanels;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModuleListPanel[] availableModulesListPanels;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private TabPane semestersTabPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        //@@author GabrielYik"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        takenModulesListPanels \u003d new ModuleListPanel[MAX_NUMBER_SEMESTERS];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        availableModulesListPanels \u003d new ModuleListPanel[MAX_NUMBER_SEMESTERS];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (int semesterIndex \u003d 0; semesterIndex \u003c MAX_NUMBER_SEMESTERS; semesterIndex++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            takenModulesListPanels[semesterIndex] \u003d new ModuleListPanel("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    logic.getFilteredTakenModuleList(semesterIndex));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            availableModulesListPanels[semesterIndex] \u003d new ModuleListPanel("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    logic.getFilteredAvailableModuleList(semesterIndex));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ObservableList\u003cTab\u003e semesterTabs \u003d semestersTabPane.getTabs();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (int semesterIndex \u003d 0; semesterIndex \u003c semesterTabs.size(); semesterIndex++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            SplitPane splitPane \u003d (SplitPane) semesterTabs.get(semesterIndex).getContent();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            ObservableList\u003cNode\u003e nodes \u003d splitPane.getItems();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            for (int i \u003d 0; i \u003c NUMBER_MODULE_GROUPS; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                VBox vBox \u003d (VBox) nodes.get(i);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                StackPane stackPane \u003d (StackPane) vBox.getChildren().get(0);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                Node n \u003d (i \u003d\u003d 0)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                        ? takenModulesListPanels[semesterIndex].getRoot()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                        : availableModulesListPanels[semesterIndex].getRoot();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                stackPane.getChildren().add(n);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleTabSwitch(TabSwitchEvent event) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        semestersTabPane.getSelectionModel().select(event.getIndex());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 99,
      "-": 129
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ModuleListCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label moduleName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label moduleType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label creditCount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label preclusion;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private FlowPane preclusions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label prerequisite;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private FlowPane prerequisites;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleListCard(Module module) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleCode.setText(module.getCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleName.setText(module.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleType.setText(\"Fulfils: \" + module.getType().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        creditCount.setText(\"Modular Credits: \" + Float.toString(module.getCreditCount()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (ModuleInfo m : module.getPreclusions()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            preclusions.getChildren().add(new Label(m.getCode()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        switch(module.getPreclusions().size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            preclusion.setText(\"Preclusion: none\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            preclusion.setText(\"Preclusion: \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            preclusion.setText(\"Preclusions: \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (ModuleInfo m : module.getPrerequisites()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            prerequisites.getChildren().add(new Label(m.getCode()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        switch(module.getPrerequisites().size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            prerequisite.setText(\"Prerequisite: none\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            prerequisite.setText(\"Prerequisite: \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            prerequisite.setText(\"Prerequisites: \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof ModuleListCard)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModuleListCard card \u003d (ModuleListCard) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return moduleCode.equals(card.moduleCode);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 95,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ModuleListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ModulePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Panel containing a list of modules."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setConnections(moduleList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setConnections(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListPanel.ModuleListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                        raise(new ModulePanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            moduleListView.scrollTo(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            moduleListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleListCard}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                setGraphic(new ModuleListCard(module).getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 68,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/ModuleManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleManagerTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 6,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/DeleteModuleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 7,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/DeleteModuleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.MODULE_DESC_CS1010;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.MODULE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.SampleModules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteModuleCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private DeleteModuleCommandParser parser \u003d new DeleteModuleCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private List\u003cModule\u003e list1 \u003d SampleModules.getModules(0, 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private List\u003cModule\u003e list2 \u003d SampleModules.getModules(0, 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseSuccess(parser, MODULE_DESC_CS1010, new DeleteModuleCommand(list1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseSuccess(parser, MODULE_DESC_CS1010 + MODULE_DESC_CS1231, new DeleteModuleCommand(list2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 27,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/GoToCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_DESC_ONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_DESC_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class GoToCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private GoToCommandParser parser \u003d new GoToCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_validArgs_returnsGoToCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseSuccess(parser, VALID_YEAR_DESC_ONE + VALID_SEMESTER_DESC_ONE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                new GoToCommand(VALID_YEAR_ONE, VALID_SEMESTER_ONE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 18,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/ListModuleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_SEMESTER_DESC_THREE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_YEAR_DESC_FIVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_DESC_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_SEMESTER_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_DESC_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_YEAR_ONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ListModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ListModuleCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private ListModuleCommandParser parser \u003d new ListModuleCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_YEAR_DESC_ONE + VALID_SEMESTER_DESC_ONE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            new ListModuleCommand(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // missing year prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR_ONE + VALID_SEMESTER_DESC_ONE, expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // missing semester prefix"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR_DESC_ONE + VALID_SEMESTER_ONE, expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR_ONE + \" \" + VALID_SEMESTER_ONE, expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // invalid year"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, INVALID_YEAR_DESC_FIVE + VALID_SEMESTER_DESC_ONE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            ParserUtil.MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // invalid semester"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR_DESC_ONE + INVALID_SEMESTER_DESC_THREE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            ParserUtil.MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, INVALID_YEAR_DESC_FIVE + INVALID_SEMESTER_DESC_THREE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            ParserUtil.MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_YEAR_DESC_ONE + VALID_SEMESTER_DESC_ONE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "Hilda-Ang": 46
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.Assert;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Test data for ModulePlanner"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_MODULE_CODE_1 \u003d \"CS1@00\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_MODULE_CODE_2 \u003d \"CS100#\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_MAJOR \u003d \"Computer_Science\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FOCUS_AREA_1 \u003d \"Artificial_Intelligence\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FOCUS_AREA_2 \u003d \"Software-Engineering\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_YEAR \u003d \"5\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_SEMESTER \u003d \"0\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_MODULE_CODE_1 \u003d \"CS1000\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_MODULE_CODE_2 \u003d \"CS2103\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_MAJOR \u003d \"Computer Science\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FOCUS_AREA_1 \u003d \"Artificial Intelligence\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FOCUS_AREA_2 \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_YEAR \u003d \"3\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_SEMESTER \u003d \"1\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // Test for Module Planner"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseModuleCodes_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ParserUtil.parseModuleCodes(null);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseModuleCodes_collectionWithInvalidModuleCodes_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ParserUtil.parseModuleCodes(Arrays.asList(VALID_MODULE_CODE_1, INVALID_MODULE_CODE_2));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseModuleCodes_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(ParserUtil.parseModuleCodes(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseModuleCodes_collectionWithValidModuleCodes_returnsModuleList() throws Exception {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModule\u003e actualModuleList \u003d ParserUtil.parseModuleCodes("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            Arrays.asList(VALID_MODULE_CODE_1, VALID_MODULE_CODE_2));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModule\u003e expectedModuleList \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            Arrays.asList(new Module(VALID_MODULE_CODE_1), new Module(VALID_MODULE_CODE_2)));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedModuleList, actualModuleList);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseMajor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMajor((String) null));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseMajor_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseMajor(INVALID_MAJOR));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseMajor_validValue_returnsMajor() throws Exception {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String expectedMajor \u003d VALID_MAJOR;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedMajor, ParserUtil.parseMajor(VALID_MAJOR));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseFocusAreas_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ParserUtil.parseFocusAreas(null);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseFocusAreas_collectionWithInvalidFocusAreas_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ParserUtil.parseFocusAreas(Arrays.asList(VALID_FOCUS_AREA_1, INVALID_FOCUS_AREA_2));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseFocusAreas_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertTrue(ParserUtil.parseFocusAreas(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseFocusAreas_collectionWithValidFocusAreas_returnsFocusAreaSet() throws Exception {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Set\u003cString\u003e actualFocusAreaSet \u003d ParserUtil.parseFocusAreas("
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            Arrays.asList(VALID_FOCUS_AREA_1, VALID_FOCUS_AREA_2));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Set\u003cString\u003e expectedFocusAreaSet \u003d new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            Arrays.asList(VALID_FOCUS_AREA_1, VALID_FOCUS_AREA_2));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedFocusAreaSet, actualFocusAreaSet);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseYear_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseYear((String) null));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseYear_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseYear(INVALID_YEAR));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseYear_validValueWithoutWhitespace_returnsYear() throws Exception {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int expectedYear \u003d Integer.parseInt(VALID_YEAR);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(VALID_YEAR));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseYear_validValueWithWhitespace_returnsTrimmedYear() throws Exception {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String yearWithWhitespace \u003d WHITESPACE + VALID_YEAR + WHITESPACE;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int expectedYear \u003d Integer.parseInt(VALID_YEAR);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(yearWithWhitespace));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseSemester_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSemester((String) null));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseSemester_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseSemester(INVALID_SEMESTER));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseSemester_validValueWithoutWhitespace_returnsSemester() throws Exception {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int expectedSemester \u003d Integer.parseInt(VALID_SEMESTER);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedSemester, ParserUtil.parseSemester(VALID_SEMESTER));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void parseSemester_validValueWithWhitespace_returnsTrimmedSemester() throws Exception {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        String semesterWithWhitespace \u003d WHITESPACE + VALID_SEMESTER + WHITESPACE;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int expectedSemester \u003d Integer.parseInt(VALID_SEMESTER);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        assertEquals(expectedSemester, ParserUtil.parseYear(semesterWithWhitespace));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 228,
      "Hilda-Ang": 120
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/util/ModuleUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModuleUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void hasValidCodeFormat_validFormat_returnsTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CS1010\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CS1010J\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CS1010CS\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CEG1010\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CEG1010J\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void hasValidCodeFormat_invalidFormat_returnsFalse() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CS10101\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CSCS1010\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CSCS10101\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CSCS10101JJJ\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 20,
      "-": 10
    }
  }
]
