[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d CAPTracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T13-4/main[image:https://travis-ci.org/CS2103-AY1819S1-T13-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "https://ci.appveyor.com/project/alexkmj/main/branch/master[image:https://ci.appveyor.com/api/projects/status/1sxo4mvlcd5oia7h?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T13-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T13-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/28acc5b7c04044519964e6253aeb58fa[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/alexkmj/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S1-T13-4/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* CAPTracker is for those students who prefer to use a desktop app for calculating and managing their CAP. More importantly CAPTracker is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CAPTracker is the ideal application to calculate your current CAP, and predict what grades you need in modules you havenâ€™t taken to achieve your target CAP."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Some parts of this application were inspired by https://github.com/nus-cs2103-AY1819S1/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 8,
      "-": 25
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"githubId\": \"alexkmj\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"displayName\": \"ALE...KOH\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"authorNames\": [\"alex\", \"alexkmj\", \"Alex Koh\", \"alex koh\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"githubId\": \"josephambe\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"displayName\": \"JOSEP...R KIM\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"authorNames\": [\"josephambe\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"githubId\": \"jeremiah-ang\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"displayName\": \"JEREM...NG EN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"authorNames\": [\"jeremiah-ang\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"githubId\": \"jeremyyew\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"displayName\": \"JEREM...W ERN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"authorNames\": [\"jeremyyew\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"githubId\": \"BugEyedBug\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"displayName\": \"KONG ...N YIN\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"authorNames\": [\"BugEyedBug\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    archiveName \u003d \u0027captracker.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        \u0027site-name\u0027: \u0027CAPTracker\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-T13-4/main\u0027"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 1,
      "alexkmj": 3,
      "-": 242
    }
  },
  {
    "path": "collated/functional/alexkmj.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "# alexkmj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/LogicManager.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptParser \u003d new TranscriptParser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/LogicManager.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            if (commandText.trim().startsWith(\"c_\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                Command command \u003d transcriptParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                return command.execute(model, history);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/LogicManager.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/Logic.java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/AddModuleCommandParser.java"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String[] tokenizedArgs \u003d ParserUtil.tokenize(args);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        validateNumOfArgs(tokenizedArgs, 4, 5);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Code code \u003d ParserUtil.parseCode(tokenizedArgs[index++]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Year year \u003d ParserUtil.parseYear(tokenizedArgs[index++]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Semester semester \u003d ParserUtil.parseSemester(tokenizedArgs[index++]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Credit credit \u003d ParserUtil.parseCredit(tokenizedArgs[index++]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module module \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (tokenizedArgs.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            module \u003d new Module(code, year, semester, credit, null, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            Grade grade \u003d ParserUtil.parseGrade(tokenizedArgs[index++]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            module \u003d new Module(code, year, semester, credit, grade, true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/TranscriptParser.java"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class TranscriptParser {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .replaceFirst(\"c_\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case CapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return new CapCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case GoalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return new GoalCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/ParserUtil.java"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Tokenizes args into an array of args. Checks if args is null and trims leading and trailing"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * whitespaces."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param args the target args that would be tokenize"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return array of args"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static String[] tokenize(String args) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/ParserUtil.java"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Validates the number of arguments. If number of arguments is not within the bounds,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * ParseException will be thrown."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the number of arguments is invalid"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static void validateNumOfArgs(String[] args, int min, int max) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (args.length \u003c min || args.length \u003e max) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(\"Invalid number of arguments!\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                    + \"Number of arguments should be more than or equal to \" + min"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                    + \" and less than or equal to \" + max);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/ParserUtil.java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String code} into a {@code Code}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Code parseCode(String args) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedCode \u003d args.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Code.isValidCode(trimmedCode)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Code.MESSAGE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Code(trimmedCode);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/ParserUtil.java"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String year} into a {@code Year}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Year parseYear(String args) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedYear \u003d args.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Year.isValidYear(trimmedYear)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Year.MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Year(trimmedYear);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/ParserUtil.java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String semester} into a {@code Semester}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code semester} is invalid."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Semester parseSemester(String args) throws ParseException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedSemester \u003d args.trim();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Semester.isValidSemester(trimmedSemester)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Semester.MESSAGE_SEMESTER_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Semester(trimmedSemester);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/ParserUtil.java"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String credit} into a {@code Credit}. Leading and trailing whitespaces will"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * be trimmed."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code credit} is invalid."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Credit parseCredit(String args) throws ParseException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedCredit \u003d args.trim();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        int intCredit \u003d Integer.parseInt(trimmedCredit);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Credit.isValidCredit(intCredit)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Credit.MESSAGE_CREDIT_CONSTRAINTS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Credit(intCredit);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/ParserUtil.java"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String grade} into a {@code Grade}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code grade} is invalid."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Grade parseGrade(String args) throws ParseException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedGrade \u003d args.trim();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Grade.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Grade.MESSAGE_GRADE_CONSTRAINTS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Grade(trimmedGrade);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Clears existing backing model and replaces with the newly provided data."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param replacement the replacement."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void resetData(ReadOnlyTranscript replacement);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. TODO: REMOVE*/"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the Transcript."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return read only version of the transcript"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ReadOnlyTranscript getTranscript();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the transcript."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param module module to find in the transcript"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if module exists in transcript"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The module must exist in the transcript."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param target module to be deleted from the transcript"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code module} must not already exist in the transcript."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param module module to be added into the transcript"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code target} must exist in the transcript. The module identity of {@code editedModule}"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * must not be the same as another existing module in the transcript."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param target module to be updated"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param editedModule the updated version of the module"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updateModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an unmodifiable view of the filtered module list."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the model has previous transcript states to restore."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean canUndoTranscript();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the model has undone transcript states to restore."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean canRedoTranscript();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the model\u0027s transcript to its previous state."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void undoTranscript();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the model\u0027s transcript to its previously undone state."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void redoTranscript();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Model.java"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Saves the current transcript state for undo/redo."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void commitTranscript();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Get the cap goal of the current transcript"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    CapGoal getCapGoal();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Set the cap goal of the current transcript"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updateCapGoal(double capGoal);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the CAP based on the current Transcript records"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    double getCap();"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns the AddressBook TODO: REMOVE*/"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list TODO: REMOVE */"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ReadOnlyTranscript.java"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Unmodifiable view of a Transcript."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "@JsonDeserialize(using \u003d JsonTranscriptDeserializer.class)"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public interface ReadOnlyTranscript {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an unmodifiable view of the module list."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final VersionedTranscript versionedTranscript;"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Initializes a ModelManager with the given transcript and userPrefs."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModelManager(ReadOnlyTranscript transcript, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(transcript, userPrefs);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        logger.fine(\"Initializing with transcript: \" + transcript + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript \u003d new VersionedTranscript(transcript);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(versionedTranscript.getModuleList());"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        //TODO: REMOVE"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this(new Transcript(), new UserPrefs());"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript \u003d new VersionedTranscript(new Transcript());"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(versionedTranscript.getModuleList());"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void resetData(ReadOnlyTranscript newData) {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.resetData(newData);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ReadOnlyTranscript getTranscript() {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript;"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void indicateTranscriptChanged() {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        raise(new TranscriptChangedEvent(versionedTranscript));"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript.hasModule(module);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.removeModule(target);"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.addModule(module);"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.updateModule(target, editedModule);"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code versionedTranscript}"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredModules);"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canUndoTranscript() {"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript.canUndo();"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canRedoTranscript() {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript.canRedo();"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void undoTranscript() {"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.undo();"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void redoTranscript() {"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.redo();"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void commitTranscript() {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.commit();"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons) // TODO: REMOVE"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/VersionedTranscript.java"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * {@code Transcript} that keeps track of its own history."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class VersionedTranscript extends Transcript {"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final List\u003cReadOnlyTranscript\u003e transcriptStateList;"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public VersionedTranscript(ReadOnlyTranscript initialState) {"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList.add(new Transcript(initialState));"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Saves a copy of the current {@code Transcript} state at the end of the state list."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList.add(new Transcript(this));"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList.subList(currentStatePointer + 1, transcriptStateList.size()).clear();"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the transcript to its previous state."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        resetData(transcriptStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the transcript to its previously undone state."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        resetData(transcriptStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if {@code undo()} has transcript states to undo."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if {@code redo()} has transcript states to redo."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return currentStatePointer \u003c transcriptStateList.size() - 1;"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!(other instanceof VersionedTranscript)) {"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        VersionedTranscript otherVersionedTranscript \u003d (VersionedTranscript) other;"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return super.equals(otherVersionedTranscript)"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 transcriptStateList.equals(otherVersionedTranscript.transcriptStateList)"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTranscript.currentStatePointer;"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            super(\"Current state pointer at start of transcriptState list, unable to undo.\");"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            super(\"Current state pointer at end of transcriptState list, unable to redo.\");"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/util/ModuleBuilder.java"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String DEFAULT_CODE \u003d \"CS2103\";"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final int DEFAULT_YEAR \u003d 1;"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String DEFAULT_SEMESTER \u003d Semester.SEMESTER_ONE;"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final int DEFAULT_CREDIT \u003d 4;"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String DEFAULT_GRADE \u003d \"A+\";"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final boolean DEFAULT_COMPLETED \u003d true;"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Code code;"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Credit credit;"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Grade grade;"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private boolean completed;"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        code \u003d new Code(DEFAULT_CODE);"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        year \u003d new Year(DEFAULT_YEAR);"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        semester \u003d new Semester(DEFAULT_SEMESTER);"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        credit \u003d new Credit(DEFAULT_CREDIT);"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        grade \u003d new Grade(DEFAULT_GRADE);"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        completed \u003d DEFAULT_COMPLETED;"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        code \u003d moduleToCopy.getCode();"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        year \u003d moduleToCopy.getYear();"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        semester \u003d moduleToCopy.getSemester();"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        credit \u003d moduleToCopy.getCredits();"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        grade \u003d moduleToCopy.getGrade();"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        completed \u003d moduleToCopy.hasCompleted();"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Code} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withCode(String code) {"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.code \u003d new Code(code);"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Year} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withYear(int year) {"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.year \u003d new Year(year);"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Semester} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.semester \u003d new Semester(semester);"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Credit} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withCredit(int credit) {"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.credit \u003d new Credit(credit);"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Grade} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withGrade(String grade) {"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.grade \u003d new Grade(grade);"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Grade} of the {@code Module} that we are building to null."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder noGrade() {"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.grade \u003d null;"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code completed} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withCompleted(boolean completed) {"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.completed \u003d completed;"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Module(code, year, semester, credit, grade, completed);"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Transcript.java"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Wraps all data at the transcript level"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Duplicates are not allowed (by .isSameModule comparison)"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Transcript implements ReadOnlyTranscript {"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private CapGoal capGoal;"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Transcript() {"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        capGoal \u003d new CapGoal();"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates an Transcript using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Transcript(ReadOnlyTranscript toBeCopied) {"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Resets the existing data of this {@code Transcript} with {@code newData}."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void resetData(ReadOnlyTranscript newData) {"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the transcript."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds a module to the transcript."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The module must not already exist in the transcript."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addModule(Module p) {"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules.add(p);"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code target} must exist in the transcript."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the transcript."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Removes {@code key} from this {@code Transcript}."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code key} must exist in the transcript."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Year.java"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s year in the transcript."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidYear(int)}"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Year {"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_YEAR_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"Year must be [1-5]. Example: 1 represents Year 1\";"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String YEAR_VALIDATION_REGEX \u003d \"[1-5]\";"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable year value."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Year}."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Year(int year) {"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d year;"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Year}."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Year(String year) {"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d Integer.valueOf(year);"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid year."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year string to be tested for validity"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid year"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidYear(int year) {"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return isValidYear(Integer.toString(year));"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid year."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year string to be tested for validity"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid year"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidYear(String year) {"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return year.matches(YEAR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the year the module was taken."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return year"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the year value of both Year object."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two Year objects."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Year object compared against this object"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Year"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Year) other).value);"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Code.java"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s code in the transcript."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCode(String)}"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Code {"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for code value."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_CODE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"Code can take any values except whitespaces\";"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String CODE_VALIDATION_REGEX \u003d \"^[^\\\\s]+$\";"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable code value."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Code}."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param code A valid code."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Code(String code) {"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidCode(code), MESSAGE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d code;"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid code."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param code string to be tested for validity"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid code"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidCode(String code) {"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return code.matches(CODE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module code."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module code"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the module code value of both Code object."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two code objects."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Code object compared against this object"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Code"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value.equals(((Code) other).value));"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for completed."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final boolean MODULE_COMPLETED \u003d true;"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for not completed."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final boolean MODULE_NOT_COMPLETED \u003d false;"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Code for the module."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Code code;"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Year the module was taken."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Semester the module was taken."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Semester semester;"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Module credits awarded for completion this module."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Credit credits;"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Module grade awarded for completion this module."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Grade grade;"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * True if module has been completed. False if module has not been taken yet."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final boolean completed;"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Module(Code code, Year year, Semester semester, Credit credit, Grade grade,"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            boolean completed) {"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(credit);"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.credits \u003d credit;"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.completed \u003d completed;"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module code."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module code"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Code getCode() {"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module credits awarded."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module credits"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Credit getCredits() {"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the year in which the module was taken."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return year in which module was taken"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the semester in which the module was taken."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return semester in which module was taken"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module grade awarded."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module grade"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade getGrade() {"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if module has been completed and false if module has not been taken."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if module has been completed and false if module has not been taken"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean hasCompleted() {"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return completed;"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if module code is the same."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if modue code is the same"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return otherModule !\u003d null \u0026\u0026 otherModule.getCode().equals(getCode());"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if both modules are of the same object or contains the same set of data fields."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two modules."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other other module to be compared with this Module object"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both objects contains the same data fields"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (grade \u003d\u003d null \u0026\u0026 otherModule.grade !\u003d null) {"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (grade !\u003d null \u0026\u0026 otherModule.grade \u003d\u003d null) {"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (grade \u003d\u003d null) {"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return otherModule.getCode().equals(getCode())"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                    \u0026\u0026 otherModule.getYear().equals(getYear())"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                    \u0026\u0026 otherModule.getSemester().equals(getSemester())"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                    \u0026\u0026 otherModule.getCredits().equals(getCredits())"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                    \u0026\u0026 otherModule.hasCompleted() \u003d\u003d hasCompleted();"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return otherModule.getCode().equals(getCode())"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.getYear().equals(getYear())"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.getSemester().equals(getSemester())"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.getCredits().equals(getCredits())"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.getGrade().equals(getGrade())"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.hasCompleted() \u003d\u003d hasCompleted();"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the code, year, semester, credits, grade, is module completed."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Format: Code: CODE Year: YEAR Semester: SEMESTER Credits: CREDITS Grade: GRADE Completed:"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * COMPLETED"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return information of this module"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return builder.append(\"Code: \")"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getCode())"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Year: \")"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getYear())"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Semester: \")"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getSemester())"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Credits: \")"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getCredits())"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Grade: \")"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getGrade())"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Completed: \")"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(hasCompleted())"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Objects.hash(code, year, semester, credits, grade, completed);"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/UniqueModuleList.java"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A module is considered unique by comparing {@code moduleA.equals(moduleB)}."
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * As such, adding and updating of modules uses {@code moduleA.equals(moduleB)} for equality so as"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * to ensure that the module being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * UniqueModuleList."
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates an observable list of module."
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * See {@link Module}."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * See {@link Module}."
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param toCheck the module that is being checked against"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if list contains equivalent module"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The {@link Module} must not have already exist in the list."
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param toAdd the module that would be added into the list"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code target} must exist in the list. The {@link Module} identity of {@code editedModule}"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param target the module to be replaced"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param editedModule the modue that replaces the old module"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!target.equals(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the {@link #internalList} of this UniqueModuleList with the internalList of the"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * replacement."
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param replacement the UniqueModuleList object that contains the internalList that is"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * replacing the old internalList"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the contents of this list with {@code modules}. {@code modules} must not contain"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * duplicate modules."
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param modules the list of module that would replace the old list"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The {@link Module} must exist in the list."
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param toRemove the module to be removed from the list"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return backing list as an unmodifiable {@code ObservableList}"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param modules the module list that is being checked"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if modules are unique and false if modules are not unique"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.size() \u003d\u003d modules.parallelStream()"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .distinct()"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Grade.java"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for grade value."
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_GRADE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"Grade can be A+, A, A-, B+, B, B-, C+, C, D+, D, F, CS, CU\";"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_POINT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"Score must be between [0, 5] with increments of 0.5 and not 0.5\";"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Grade.java"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String GRADE_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"A\\\\+|A\\\\-|A|B\\\\+|B\\\\-|B|C\\\\+|C|D\\\\+|D|F|CS|CU\";"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Static Unchangeable Mapping between Grade and Point"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final Map\u003cString, Double\u003e MAP_GRADE_POINT;"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final Map\u003cDouble, String\u003e MAP_POINT_GRADE;"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Map\u003cString, Double\u003e tempGradePointMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Map\u003cDouble, String\u003e tempPointGradeMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempGradePointMap.put(\"A+\", 5.0);"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempGradePointMap.put(\"A\", 5.0);"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempGradePointMap.put(\"A-\", 4.5);"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempGradePointMap.put(\"B+\", 4.0);"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempGradePointMap.put(\"B\", 3.5);"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempGradePointMap.put(\"B-\", 3.0);"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempGradePointMap.put(\"C+\", 2.5);"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempGradePointMap.put(\"C\", 2.0);"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempGradePointMap.put(\"D+\", 1.5);"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempGradePointMap.put(\"D\", 1.0);"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempGradePointMap.put(\"F\", 0.0);"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        for (Map.Entry\u003cString, Double\u003e entry : tempGradePointMap.entrySet()) {"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            tempPointGradeMap.put(entry.getValue(), entry.getKey());"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        tempPointGradeMap.put(5.0, \"A\");"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        MAP_GRADE_POINT \u003d Collections.unmodifiableMap(tempGradePointMap);"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        MAP_POINT_GRADE \u003d Collections.unmodifiableMap(tempPointGradeMap);"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Grade.java"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable grade value."
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Grade.java"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Grade}."
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param grade A valid grade."
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade(String grade) {"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidGrade(grade), MESSAGE_GRADE_CONSTRAINTS);"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d grade;"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Grade} from point"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade(double point) {"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(point);"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidPoint(point), MESSAGE_POINT_CONSTRAINTS);"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d mapPointToValue(point);"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if point is within [0, 5] and step by 0.5 and not 0.5"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidPoint(double point) {"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double fraction \u003d point - Math.floor(point);"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return point \u003e\u003d 0 \u0026\u0026 point \u003c\u003d 5 \u0026\u0026 (fraction \u003d\u003d 0 || fraction \u003d\u003d 0.5) \u0026\u0026 point !\u003d 0.5;"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the letter grade the point should be mapped to."
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private String mapPointToValue(double point) {"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return MAP_POINT_GRADE.get(point);"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Grade.java"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid grade."
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param grade string to be tested for validity"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid grade"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidGrade(String grade) {"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return grade.matches(GRADE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if grade affects cap and false if grade does not affect cap."
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if grade affects cap and false if grade does not affect cap."
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean affectsCap() {"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return !value.contentEquals(\"CS\") \u0026\u0026 !value.contentEquals(\"CU\");"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the point equivalent of the grade or 0 if grade is invalid."
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return point equivalent of the grade"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public float getPoint() {"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (MAP_GRADE_POINT.containsKey(value)) {"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return MAP_GRADE_POINT.get(value).floatValue();"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Grade.java"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the grade value."
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return grade"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Grade.java"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the grade value of both Grade object."
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two grade objects."
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Grade object compared against this object"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Grade"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value.equals(((Grade) other).value));"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Grade.java"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Credit.java"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s credits in the transcript."
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCredit(int)}"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Credit {"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for credit value."
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_CREDIT_CONSTRAINTS \u003d \"Credits must be a integer\";"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable credit value."
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Credit}."
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param credits A valid credit."
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Credit(int credits) {"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidCredit(credits), MESSAGE_CREDIT_CONSTRAINTS);"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d credits;"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid credit."
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Credit must be between 1 and 20"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param credits string to be tested for validity"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid credit"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidCredit(int credits) {"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (credits \u003c 1) {"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        } else if (credits \u003e 20) {"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module credits value."
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module credits"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the module credit value of both Credit object."
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two credit objects."
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Credit object compared against this object"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Credit"
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Credit) other).value);"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Semester.java"
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s semester in the transcript."
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSemester(String)}"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Legal values: 1, 2, s1, s2. 1"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * (Semester 1), 2 (Semester 2), s1 (Special Semester 1), s2 (Special Semester 2)."
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for semester value."
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_SEMESTER_CONSTRAINTS \u003d \"Semester can be 1, 2, s1 or s2\";"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_VALIDATION_REGEX \u003d \"1|2|s1|s2\";"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for semester one."
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for semester two."
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_TWO \u003d \"2\";"
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for special semester one."
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_SPECIAL_ONE \u003d \"s1\";"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for special semester two."
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_SPECIAL_TWO \u003d \"s2\";"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable semester value."
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Code}."
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param semester A valid semester."
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Semester(String semester) {"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidSemester(semester), MESSAGE_SEMESTER_CONSTRAINTS);"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d semester;"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid semester."
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param semester string to be tested for validity"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid semester"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidSemester(String semester) {"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return semester.matches(SEMESTER_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the semester value."
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return grade"
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the semester value of both Semester object."
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two semester objects."
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Semester object compared against this object"
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Semester"
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value.equals(((Semester) other).value));"
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 2023
    }
  },
  {
    "path": "collated/functional/jeremiah-ang.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "# jeremiah-ang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/commands/GoalCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Sets CAP Goal"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goal\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Set your CAP goal. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            + \"CAP_GOAL \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            + \"4.5\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your CAP Goal: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final double goal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates an GoalCommand to set the CAP Goal"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public GoalCommand(double goal) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        model.updateCapGoal(goal);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        CapGoal capGoal \u003d model.getCapGoal();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, capGoal.toString()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof GoalCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 goal \u003d\u003d ((GoalCommand) other).goal); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/commands/CapCommand.java"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Shows CAP based on existing modules."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class CapCommand extends Command {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cap\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Calculate current CAP with given modules \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            + \"Parameters: NONE \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your Current CAP is: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double cap \u003d model.getCap();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, cap));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/GoalCommandParser.java"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Parses User Input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class GoalCommandParser implements Parser\u003cGoalCommand\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public GoalCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final String format \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(format);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            double newGoal \u003d Double.parseDouble(trimmedArgs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            if (newGoal \u003c 0 || newGoal \u003e 5) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                throw new ParseException(format);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return new GoalCommand(newGoal);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(format);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public CapGoal getCapGoal() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript.getCapGoal();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updateCapGoal(double capGoal) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.setCapGoal(capGoal);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript.getCap();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/Transcript.java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Return the current CAP"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return current cap score"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return calculateCap();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Calculate CAP Score based on modules with scores"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return cap: cap score"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private double calculateCap() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ObservableList\u003cModule\u003e gradedModulesList \u003d getGradedModulesList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double totalModulePoint \u003d calculateTotalModulePoint(gradedModulesList);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double totalModuleCredit \u003d calculateTotalModuleCredit(gradedModulesList);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double cap \u003d 0;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (totalModuleCredit \u003e 0) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            cap \u003d totalModulePoint / totalModuleCredit;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Calculates the total module point from the list of modules"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private double calculateTotalModulePoint(ObservableList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double totalPoint \u003d 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            totalPoint +\u003d module.getGrade().getPoint() * module.getCredits().value;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return totalPoint;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Calculates the total module credit from the list of modules"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private double calculateTotalModuleCredit(ObservableList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        int totalModuleCredit \u003d 0;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            totalModuleCredit +\u003d module.getCredits().value;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return totalModuleCredit;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Filters for modules that is to be used for CAP calculation"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return list of modules used for CAP calculation"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private ObservableList\u003cModule\u003e getGradedModulesList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.getFilteredModules(this::moduleIsUsedForCapCalculation);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Filters for modules that have yet been graded"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return gradedModulesList: a list of modules used for CAP calculation"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private ObservableList\u003cModule\u003e getNotCompletedModulesList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.getFilteredModules(module -\u003e !module.hasCompleted());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Check if the given module should be considered for CAP Calculation"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if yes, false otherwise"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private boolean moduleIsUsedForCapCalculation(Module module) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return module.hasCompleted() \u0026\u0026 moduleAffectsGrade(module);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Check if a module affects grade"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if module affects grade, false otheriwse"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private boolean moduleAffectsGrade(Module module) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return module.getGrade().affectsCap();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Calculates target module grade in order to achieve target goal"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return a list of modules with target grade if possible. null otherwise"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e getTargetModuleGrade() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ObservableList\u003cModule\u003e gradedModules \u003d getGradedModulesList();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ObservableList\u003cModule\u003e ungradedModules \u003d getNotCompletedModulesList()"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .sorted(Comparator.comparingInt(o -\u003e o.getCredits().value));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e targetModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (ungradedModules.isEmpty()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return FXCollections.observableArrayList(targetModules);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double totalUngradedModuleCredit \u003d calculateTotalModuleCredit(ungradedModules);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double totalMc \u003d calculateTotalModuleCredit(gradedModules) + totalUngradedModuleCredit;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double currentTotalPoint \u003d calculateTotalModulePoint(gradedModules);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double totalScoreToAchieve \u003d capGoal.getCapGoal() * totalMc - currentTotalPoint;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double unitScoreToAchieve \u003d Math.ceil(totalScoreToAchieve / totalUngradedModuleCredit * 2) / 2.0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (unitScoreToAchieve \u003e 5) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module targetModule;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        for (Module ungradedModule : ungradedModules) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            if (unitScoreToAchieve \u003d\u003d 0.5) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                unitScoreToAchieve \u003d 1.0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            targetModule \u003d new Module(ungradedModule, new Grade(unitScoreToAchieve));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            targetModules.add(targetModule);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            totalScoreToAchieve -\u003d targetModule.getCredits().value * unitScoreToAchieve;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            totalUngradedModuleCredit -\u003d targetModule.getCredits().value;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            unitScoreToAchieve \u003d Math.ceil(totalScoreToAchieve / totalUngradedModuleCredit * 2) / 2.0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return FXCollections.observableArrayList(targetModules);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public CapGoal getCapGoal() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return capGoal;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setCapGoal(double capGoal) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.capGoal \u003d new CapGoal(capGoal);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/capgoal/CapGoal.java"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents Cap Goal"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " *"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Immutable. Value can be null."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class CapGoal {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final String MESSAGE_IS_NULL \u003d \"NIL\";"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private double capGoal;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private boolean isSet \u003d true;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public CapGoal() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public CapGoal(double capGoal) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        isSet \u003d false;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.capGoal \u003d capGoal;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the cap goal"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public double getCapGoal() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return capGoal;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean isSet() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return isSet;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (isSet) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return MESSAGE_IS_NULL;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return \"\" + getCapGoal();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/Module.java"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates a new Module from an existing module but with a different grade"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Module(Module module, Grade grade) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this(module.code, module.year, module.semester, module.credits, grade, module.completed);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/UniqueModuleList.java"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the list of filtered Module based on the given predicate"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return filtered list"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModules(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return internalList.filtered(predicate);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 419
    }
  },
  {
    "path": "collated/functional/jeremyyew.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "# jeremyyew"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/storage/JsonTranscriptStorage.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A class to access Transcript stored in the hard disk as a json file"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class JsonTranscriptStorage implements TranscriptStorage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public JsonTranscriptStorage(Path filePath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Path getTranscriptFilePath() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Optional\u003cReadOnlyTranscript\u003e readTranscript() throws DataConversionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return readTranscript(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Similar to {@link #readTranscript()}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param transcriptFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Optional\u003cReadOnlyTranscript\u003e readTranscript(Path transcriptFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return JsonUtil.readJsonFile(transcriptFilePath, ReadOnlyTranscript.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void saveTranscript(ReadOnlyTranscript transcript) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        JsonUtil.saveJsonFile(new Transcript(transcript), filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void saveTranscript(ReadOnlyTranscript transcript, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(transcript);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        JsonUtil.saveJsonFile(new Transcript(transcript), filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 50
    }
  },
  {
    "path": "collated/test/alexkmj.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "# alexkmj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/AddModuleCommandParserTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class AddModuleCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private AddModuleCommandParser parser \u003d new AddModuleCommandParser();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void parseAllFieldsPresentSuccess() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // leading and trailing whitespace"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getCode().value"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getYear().value"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getSemester().value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getCredits().value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getGrade().value, new AddModuleCommand(DISCRETE_MATH));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void parseOptionalFieldsMissingSuccess() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(DISCRETE_MATH)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .noGrade()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCompleted(false)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // no grade"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertParseSuccess(parser, DISCRETE_MATH.getCode().value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getYear().value"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getSemester().value"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getCredits().value, new AddModuleCommand(expectedModule));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/TranscriptParserTest.java"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class TranscriptParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final TranscriptParser parser \u003d new TranscriptParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void parseCommandAddModule() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        AddModuleCommand command \u003d (AddModuleCommand) parser.parseCommand(ModuleUtil.getAddModuleCommand(module));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(new AddModuleCommand(module), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/GradeTest.java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class GradeTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Grade(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidGradeThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String invalidGrade \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Grade(invalidGrade));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidGrade() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid grade format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\" A+\")); // no leading whitespace"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"A+ \")); // no leading whitespace"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"A +\")); // no whitespace in between"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"G\")); // First character has to be A, B, C, D, F"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid grade"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A+\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A-\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B+\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B-\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"C+\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"C\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"D+\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"D\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"F\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"CU\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"CS\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void affectCapValid() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").affectsCap());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A\").affectsCap());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A-\").affectsCap());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B+\").affectsCap());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B\").affectsCap());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B-\").affectsCap());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C+\").affectsCap());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C\").affectsCap());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D+\").affectsCap());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D\").affectsCap());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"F\").affectsCap());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(new Grade(\"CS\").affectsCap());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(new Grade(\"CU\").affectsCap());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void getPointValid() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").getPoint() \u003d\u003d 5);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A\").getPoint() \u003d\u003d 5);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A-\").getPoint() \u003d\u003d 4.5);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B+\").getPoint() \u003d\u003d 4.0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B\").getPoint() \u003d\u003d 3.5);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B-\").getPoint() \u003d\u003d 3.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C+\").getPoint() \u003d\u003d 2.5);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C\").getPoint() \u003d\u003d 2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D+\").getPoint() \u003d\u003d 1.5);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D\").getPoint() \u003d\u003d 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"F\").getPoint() \u003d\u003d 0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").toString().contentEquals(\"A+\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").equals(new Grade(\"A+\")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/SemesterTest.java"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class SemesterTest {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidYearThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Semester(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidSemester() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid semester format"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"s3\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"3\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid semester"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_ONE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_TWO));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_SPECIAL_ONE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_SPECIAL_TWO));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Semester(Semester.SEMESTER_ONE).toString().contentEquals(Semester.SEMESTER_ONE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Semester(Semester.SEMESTER_ONE).equals(new Semester(Semester.SEMESTER_ONE)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/YearTest.java"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class YearTest {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Year(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidYearThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Year(0));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Year(\"0\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidYear() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid year format"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Year.isValidYear(0)); // year must be at least 1"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Year.isValidYear(6)); // year must be 5 or below"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Year.isValidYear(10)); // only 1 digit allowed"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid year format"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(1)); // year 1"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(2)); // year 2"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(3)); // year 3"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(4)); // year 4"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(5)); // year 5"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Year(1).toString().contentEquals(\"1\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Year(1).equals(new Year(1)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void hashCodeValid() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Year(1).hashCode() \u003d\u003d \"1\".hashCode());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/UniqueModuleListTest.java"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void containsNullModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.contains(null);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void containsModuleNotInListReturnsFalse() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(uniqueModuleList.contains(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void containsModuleInListReturnsTrue() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(uniqueModuleList.contains(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addNullModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(null);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addDuplicateModuleThrowsDuplicateModuleException() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleNullTargetModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(null, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleNullEditedModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, null);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleTargetModuleNotInListThrowsModuleNotFoundException() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(ModuleNotFoundException.class);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleIsSameModuleSuccess() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleHasSameIdentitySuccess() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module editedDataStructures \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCode(DISCRETE_MATH.getCode().value)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, editedDataStructures);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(editedDataStructures);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleHasDifferentIdentitySuccess() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DISCRETE_MATH);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleHasNonUniqueIdentityThrowsDuplicateModuleException() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DISCRETE_MATH);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeNullModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.remove(null);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeModuleDoesNotExistThrowsModuleNotFoundException() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(ModuleNotFoundException.class);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.remove(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeExistingModuleRemovesModule() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.remove(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesNullUniqueModuleListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules((UniqueModuleList) null);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesUniqueModuleListReplacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesNullListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules((List\u003cModule\u003e) null);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesListReplacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(DISCRETE_MATH);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesListWithDuplicateModuleThrowsDuplicateModuleException() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(DATA_STRUCTURES, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules(listWithDuplicateModules);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void asUnmodifiableObservableListModifyListThrowsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/CreditTest.java"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class CreditTest {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidCreditThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        int invalidCredit \u003d 0;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Credit(invalidCredit));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidCredit() {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid code format"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Credit.isValidCredit(0)); // must be greater than or equal to 1"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Credit.isValidCredit(21)); // must be lower than or equal to 20"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid code"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Credit.isValidCredit(4)); // credit between 1 and 20"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Credit(4).toString().contentEquals(\"4\"));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Credit(4).equals(new Credit(4)));"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/CodeTest.java"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class CodeTest {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Code(null));"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidCodeThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String invalidCode \u003d \"\";"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Code(invalidCode));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidCode() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid code format"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\"\")); // cannot be blank"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\" CS2103\")); // no leading whitespace"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\"CS2103 \")); // no leading whitespace"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\"CS 2103\")); // no whitespace in between"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid code"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Code.isValidCode(\"CS2103\")); // no whitespace"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Code(\"CS2103\").toString().contentEquals(\"CS2103\"));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Code(\"CS2103\").equals(new Code(\"CS2103\")));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/ModuleTest.java"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                new Module(null, null, null, null, null, false));"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.isSameModule(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different object -\u003e returns false"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.isSameModule(DISCRETE_MATH));"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module editedDataStructures \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCode(DISCRETE_MATH.getCode().value)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.isSameModule(editedDataStructures));"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module dataStructuresCopy \u003d new ModuleBuilder(DATA_STRUCTURES).build();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.equals(dataStructuresCopy));"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.equals(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(5));"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(DISCRETE_MATH));"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCode(DISCRETE_MATH.getCode().value)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withYear(DISCRETE_MATH.getYear().value)"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different semester -\u003e returns false"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withSemester(DISCRETE_MATH.getSemester().value)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different credit -\u003e returns false"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCredit(DATABASE_SYSTEMS_2MC.getCredits().value)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different grade -\u003e returns false"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withGrade(DISCRETE_MATH.getGrade().value)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different completed -\u003e returns false"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCompleted(false)"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.toString().contentEquals(\"Code: CS2040 Year: 3 Semester: \""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \"s1 Credits: 4 Grade: F Completed: true\"));"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/testutil/ModuleUtil.java"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static String getAddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return AddModuleCommand.COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(module.getCode().value + \" \");"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(module.getYear().value + \" \");"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(module.getSemester().value + \" \");"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(module.getCredits().value + \" \");"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(module.getGrade().value + \" \");"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/testutil/TypicalModules.java"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Double MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP \u003d 3.0;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module DISCRETE_MATH \u003d new ModuleBuilder().withCode(\"CS1231\")"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(1)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module PROGRAMMING_METHODOLOGY_TWO \u003d new ModuleBuilder().withCode(\"CS2030\")"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_TWO)"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"B+\")"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module DATA_STRUCTURES \u003d new ModuleBuilder().withCode(\"CS2040\")"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(3)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_SPECIAL_ONE)"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"F\")"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module ASKING_QUESTIONS \u003d new ModuleBuilder().withCode(\"GEQ1000\")"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(1)"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"CS\")"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module SOFTWARE_ENGINEERING \u003d new ModuleBuilder().withCode(\"CS2103\")"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(3)"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module DATABASE_SYSTEMS \u003d new ModuleBuilder().withCode(\"CS2102\")"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module DATABASE_SYSTEMS_2MC \u003d new ModuleBuilder().withCode(\"CS2102B\")"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(2)"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Prevents instantiation"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private TypicalModules() {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an {@code Transcript} given modules as arguments."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Transcript getTranscriptWithModules(Module... modules) {"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Transcript tr \u003d new Transcript();"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            tr.addModule(module);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return tr;"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an {@code Transcript} with all the typical persons."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Transcript getTypicalTranscript() {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Transcript tr \u003d new Transcript();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            tr.addModule(module);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return tr;"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DISCRETE_MATH,"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                PROGRAMMING_METHODOLOGY_TWO,"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                DATA_STRUCTURES));"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * A list of modules that affects the cap"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static List\u003cModule\u003e getModulesWithoutNonGradeAffectingModules() {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DISCRETE_MATH,"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                PROGRAMMING_METHODOLOGY_TWO,"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                DATA_STRUCTURES));"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * A list of modules that might not affect the cap"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static List\u003cModule\u003e getModulesWithNonGradeAffectingModules() {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e affectingModules \u003d getModulesWithoutNonGradeAffectingModules();"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e nonAffectingModules \u003d new ArrayList\u003c\u003e(Arrays.asList(ASKING_QUESTIONS));"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        affectingModules.addAll(nonAffectingModules);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return affectingModules;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    // TODO: getTypicalAddressBook()"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 673
    }
  },
  {
    "path": "collated/test/jeremiah-ang.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "# jeremiah-ang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/logic/parser/GoalCommandParserTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class GoalCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private GoalCommandParser parser \u003d new GoalCommandParser();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void parseValidCommandSuccess() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String userInput \u003d \"4.5\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        GoalCommand expectedCommand \u003d new GoalCommand(4.5);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void parseInvalidNumberFormatFailure() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String userInput \u003d \"4.5 3.5\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/TranscriptTest.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Test {@code TranscriptTest} Class"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class TranscriptTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final Module GRADE_BMINUS_4MC_A \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCode(\"BMINUSA\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"B-\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final Module GRADE_A_4MC_A \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCode(\"AA\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"A\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final Module GRADE_A_4MC_B \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCode(\"AB\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"A\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final Module INCOMPLETE_4MC_A \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCode(\"INCOMPLETEA\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCompleted(false)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final Module INCOMPLETE_4MC_B \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCode(\"INCOMPLETEB\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCompleted(false)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final Module INCOMPLETE_4MC_C \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCode(\"INCOMPLETEC\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCompleted(false)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final Module INCOMPLETE_5MC_A \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCode(\"INCOMPLETE5A\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(5)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCompleted(false)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void typicalModulesCapScore() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e modules \u003d getModulesWithoutNonGradeAffectingModules();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertCapScoreEquals(modules, MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void calculateCapScoreWithSuModule() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e modules \u003d getModulesWithNonGradeAffectingModules();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertCapScoreEquals(modules, MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void calculateTargetGrades() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            INCOMPLETE_4MC_A,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            INCOMPLETE_4MC_B,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            INCOMPLETE_4MC_C"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double capGoal \u003d 4.0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cString\u003e expectedTargetGrades \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"B+\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"B+\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"B+\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTargetGradesEquals(modules, capGoal, expectedTargetGrades);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                INCOMPLETE_4MC_A,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                INCOMPLETE_4MC_B,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                INCOMPLETE_5MC_A,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                INCOMPLETE_4MC_C,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                GRADE_BMINUS_4MC_A"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        capGoal \u003d 4.5;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedTargetGrades \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \"A\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \"A\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \"A\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \"A-\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTargetGradesEquals(modules, capGoal, expectedTargetGrades);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        capGoal \u003d 5.0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTargetGradesEquals(modules, capGoal, null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                GRADE_BMINUS_4MC_A"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTargetGradesEquals(modules, capGoal, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                INCOMPLETE_4MC_A,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                INCOMPLETE_4MC_B,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                INCOMPLETE_4MC_C,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                GRADE_A_4MC_A,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                GRADE_A_4MC_B"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        capGoal \u003d 4.0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedTargetGrades \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \"B\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \"B\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \"B-\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTargetGradesEquals(modules, capGoal, expectedTargetGrades);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Assert that the modules will have the CAP score of expectedCapScore"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param expectedCapScore"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void assertCapScoreEquals(List\u003cModule\u003e modules, Double expectedCapScore) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Transcript transcript \u003d new Transcript();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcript.setModules(modules);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double cap \u003d transcript.getCap();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(Double.valueOf(cap), expectedCapScore);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Assert that the given modules and cap goal will result in expected target grades"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param capGoal"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param expectedTargetGrades"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void assertTargetGradesEquals(List\u003cModule\u003e modules, Double capGoal, List\u003cString\u003e expectedTargetGrades) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Transcript transcript \u003d new Transcript();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcript.setModules(modules);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcript.setCapGoal(capGoal);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ObservableList\u003cModule\u003e targetModules \u003d transcript.getTargetModuleGrade();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (expectedTargetGrades \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            assertEquals(targetModules, null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cString\u003e targetGrades \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        targetModules.forEach(module -\u003e targetGrades.add(module.getGrade().value));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String targetGradesString \u003d String.join(\" \", targetGrades);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String expectedTargetGradesString \u003d String.join(\" \", expectedTargetGrades);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(targetGradesString, expectedTargetGradesString);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/seedu/address/model/module/GradeTest.java"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidPoint() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidPoint(5.0));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidPoint(4.0));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidPoint(3.0));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidPoint(2.0));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidPoint(1.0));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidPoint(0));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidPoint(0.0));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidPoint(4.5));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidPoint(3.5));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidPoint(2.5));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidPoint(1.5));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidPoint(6.0));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidPoint(4.3));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidPoint(0.5));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void getGradeValid() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(\"A\".equals(new Grade(5.0).value));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(\"A-\".equals(new Grade(4.5).value));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(\"B+\".equals(new Grade(4.0).value));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(\"B\".equals(new Grade(3.5).value));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(\"B-\".equals(new Grade(3.0).value));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(\"C+\".equals(new Grade(2.5).value));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(\"C\".equals(new Grade(2.0).value));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(\"D+\".equals(new Grade(1.5).value));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(\"D\".equals(new Grade(1.0).value));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(\"F\".equals(new Grade(0).value));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/systemtests/GoalCommandSystemTest.java"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * System test for Goal Command"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class GoalCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setGoalSuccess() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        /* Case: Set goal with valid value"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "         * -\u003e goal command handled correctly"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double newGoal \u003d 4.5;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertGoalSuccess(newGoal);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        newGoal \u003d 5.0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertGoalSuccess(newGoal);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setGoalFailure() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        /* Case: Set goal with valid value"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "         * -\u003e goal command handled correctly"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double newGoal \u003d -1;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertGoalFailure(newGoal);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Assert that the given goal would result in a failure action."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param goal"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void assertGoalFailure(double goal) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertCommandFailure(getCommandString(goal), getModel(), expectedResultMessage);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Assert that the given goal would result in a successful action."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param goal"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void assertGoalSuccess(double goal) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String expectedResultMessage \u003d String.format(GoalCommand.MESSAGE_SUCCESS, goal);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertCommandSuccess(getCommandString(goal), getModel(), expectedResultMessage);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private String getCommandString(double goal) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return GoalCommand.COMMAND_WORD + \" \" + goal;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Assert given command would be successful"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param expectedModel"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param expectedResultMessage"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void assertCommandFailure(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "###### /java/systemtests/CapCommandSystemTest.java"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class CapCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void cap() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "         * Empty system should show cap \u003d 0"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        executeCommand(CapCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double cap \u003d 0.0;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", String.format(CapCommand.MESSAGE_SUCCESS, cap), getModel());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 286
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "CAPTracker is for those students who prefer to use a desktop app for calculating and managing their CAP. More importantly CAPTracker is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CAPTracker is the ideal application to calculate your current CAP, and predict what grades you need in modules you havenâ€™t taken to achieve your ideal CAP. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Alex Koh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image::alexkmj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{empty} [https://github.com/alexkmj[github]] [\u003c\u003calexkmj#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Responsibilities: [Refer to W6.10]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Amber Joseph"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image::josephambe.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{empty}[http://github.com/josephambe[github]] [\u003c\u003cjosephambe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Responsibilities: [Refer to W6.10]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Jeremy Yew"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image::jeremyyew.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{empty}[http://github.com/jeremyyew[github]] [\u003c\u003cjeremyyew#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Responsibilities: [Refer to W6.10]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Jeremiah Ang"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image::jeremiah-ang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{empty}[http://github.com/jeremiah-ang[github]] [\u003c\u003cjeremiah-ang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Responsibilities: [Refer to W6.10]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Kong Jun Yin"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image::bugeyedbug.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{empty}[http://github.com/BugEyedBug[github]] [\u003c\u003cbugeyedbug#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Responsibilities: [Refer to W6.10]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 23,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-T13-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d CAPTracker - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T13-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "By: `T13-4` Â Â Â Â  Since: `Aug 2018` Â Â Â Â  Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ". *JDK `10`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)to add  manually"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Target User Profile"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "- An NUS Student who has a need to keep track of current CAP, calculate expected CAP, and grades required to achieve desired CAP."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "- Prefer desktop apps over other types."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "- Can type fast."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "- Prefers typing over mouse input."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "- Is reasonably comfortable using CLI apps."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Value Proposition"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "Helps students manage their CAP and predict what grades they need to reach their CAP goal."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "*Must-Have*"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "1.  As a user, I can add all the modules I have taken (module code,"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "*module title*, MCs, grade, semester taken) so that I can calculate"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "average mark I need to graduate with desired CAP."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "2.  As a user I can delete modules so if I change my mind or fail a"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "module I can re-calculate my average."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "3.  As a user I can delete modules so that if i entered a wrong module"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "or failed it, I can remove it."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "4.  As a user I can edit the marks Iâ€™ve entered previously so that I can"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "update my CAP."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "5.  As a user, I can enter a CAP goal so that I can keep track of the"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "progress of my course"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "6.  As a user, I can calculate the average mark I need across the"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "modules Iâ€™ve entered so I can see what mark I need for each module to"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "achieve my CAP goal. +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "7.  As a user, I can enter in predicted grades for modules so I can see"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "what CAP I would get if I got these grades in my modules."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "8.  As a user, I can close the app and return to modify my entries so I"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "can enter my entries incrementally."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "*Nice-To-Have*"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "1. As a user, I can add a module without having to add the code, MCs, or semester taken so that I can quickly calculate CAP without worrying about the modules."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "2. As a user, I can still enter the same modules but get warned first so that I would not mistakenly enter the same module again"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "3. As a user, I can import all modules for this semester with NUSMods link so that my data can be consistent with NUSMods."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "4. As a user I can search for a module via keyword or module title, and select it for entering my grade so that I donâ€™t have to remember the module code."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "5. As a user, I can adjust what marks I need for each module to achieve my CAP so I can put more emphasis on certain modules instead of expecting the same grade across all modules."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "6. As a user, I can view my current semesterâ€™s module goals and use a GUI to adjust projected grade for each module, and other modules will automatically adjust to compensate, so that I can see easily modify my data to see what grades I need for other modules."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "7. As a user, I can view total current MCs so that i can check if I meet the number of mc I need to graduate"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "8. As a user I can see if my CAP Goal is possible so I can check whether it is achievable."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "9. As a user, I can list modules taken by level as an alternative listing mode, so that it is easier to track graduation requirements."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "10. As a user, I can see what the highest possible CAP I can achieve with my current grades is so that I can set an appropriate goal."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "11. As a user, I can see what the minimum grades I need per module is to pass the year with my current grades so that I can see what the minimum about of work I need to do is."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "*Not-Useful*"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "1. As a user, I can view the module descriptions so that I know what modules I should take"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "2. As a user I can enter the MCs for exchange I can keep track of modules that may not be mapped to our database of modules codes or isnâ€™t the default number of MCs."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "3. As a user, I can export my timetable so that I can share it with my friend."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d\u003d Use case: Calculate predicted CAP"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User enters all modules - modules with grades (previous or target), modules without grades (unknown)."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . System immediately displays confirmation and current CAP."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d\u003d Use case:  View grades needed to achieve CAP goal (based on previous grades)"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . Use-Case-B.1."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User enters CAP goal."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User requests for target grade."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  .. **V1.0:**"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  ... System displays target grades for each module (numeric)."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  .. **V2.0:**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  ... System displays target grades for each module (numeric and letter)."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  ... User edits target grades."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  ... System displays new target grades for each module."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d\u003d Use case:  Save entered module"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User enters some modules"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . System saves the modules"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User restarts the application"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User list entered modules"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . System displays saved modules"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ". Should work on any [mainstream OS](https://github.com/nus-cs2103-AY1819S1/addressbook-level4/blob/master/docs/DeveloperGuide.adoc#mainstream-os) as long as it has Java 10 or higher installed."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ". Should be able to hold up to 100 modules without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ". A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ". Should calculate prediction/expected CAP in 1 seconds"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 11,
      "alexkmj": 10,
      "-": 618,
      "jeremiah-ang": 58
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d CAPTracker - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T13-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "By: `T13-4`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "CAPTracker is for those students who prefer to use a desktop app for calculating and managing their CAP. More importantly CAPTracker is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CAPTracker is the ideal application to calculate your current CAP, and predict what grades you need in modules you havenâ€™t taken to achieve your ideal CAP. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ".  Ensure you have Java version `10` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ".  Download the latest `captracker.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your CAP Tracker."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* *`list`* : lists all modules"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* **`add`**`CS2103 1 2 A+` : adds a module `CS2103` to the CAP Tracker."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* **`delete`**`CS2103` : deletes a the module `CS2103` from CAP Tracker"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add MODULE_CODE YEAR SEMESTER [GRADE]` is a parameter which can be used as add CS2103 1 2 A+."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Items in square brackets are optional e.g `add MODULE_CODE YEAR SEMESTER [GRADE]` can be used as `add CS2103 1 2 A+` or as `add CS2103 1 2`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Adding a module: `add`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Adds a module to the cap tracker +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Format: `add MODULE_CODE YEAR SEMESTER [GRADE]`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "A module with grade provided means it has already been completed while a module without grade means it hasn\u0027t been taken by the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* `add CS2103 1 2 A+`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* `add CS2103 1 2`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Listing all modules : `list`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Shows a list of all modules in the cap tracker. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Editing a module : `edit`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Edits an existing module in the cap tracker. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Format: `edit MODULE_CODE [MODULE_CODE] [YEAR GRADE] [GRADE]`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Edits the module with the specified `MODULE_CODE`. The module must exist."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* `edit CS2103 CS1231 2 1` +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Edits the module code and year and semester of `CS2103` module to be `CS1231` and `2 1` respectively."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* `edit CS2103 2 1 CS` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Edits the year and semester of `CS2103` module to be `2 1` and grade to `CS`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Deleting a module : `delete`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Deletes the specified module from the cap tracker. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Format: `delete MODULE_CODE`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Deletes the module with the specified module code."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* `delete CS2103` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Deletes the module CS2103 in the cap tracker."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d\u003d Computing CAP : `goal`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "Set the CAP goal you want to achieve. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "Format: `goal CAP_GOAL`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "* Set and Update the CAP goal."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "* `goal 4.5` +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "Update your CAP goal to be 4.5"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Clears all entries from the cap tracker. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d\u003d Undoing commands : `undo`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "Reverts changes made by the last command given. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d\u003d Redoing commands : `redo`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "Reverts changes made by the undo command. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "CAP tracker data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "*Q*: I entered the wrong grade into my module. How do I change it? +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "*A*: Use the `edit` command to input the correct information of the module - `edit MODULE_CODE [MODULE_CODE] [YEAR SEMESTER] [GRADE]`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* *Add* `add MODULE_CODE YEAR SEMESTER [GRADE]` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "e.g. `add CS2103 1 2 A+`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* *Delete* : `delete MODULE_CODE` +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "e.g. `delete CS2103`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* *Edit* : `edit MODULE_CODE [MODULE_CODE] [YEAR GRADE] [GRADE]` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "e.g. `edit CS2103 2 1 CS`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 44,
      "BugEyedBug": 4,
      "-": 106,
      "jeremiah-ang": 6
    }
  },
  {
    "path": "docs/team/alexkmj.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d Alex Koh - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d PROJECT: CAPTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "CapTracker is a desktop application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Major enhancement*: TBC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** What it does: TBC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Justification: TBC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Highlights: TBC."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Credits: TBC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Minor enhancement*: TBC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** PRs reviewed (with non-trivial review comments): TBC."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Contributed to forum discussions (examples:  TBC.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Reported bugs and suggestions for other teams in the class (examples:  TBC.)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Tools:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 30,
      "jeremiah-ang": 27
    }
  },
  {
    "path": "docs/team/bugeyedbug.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d Kong Jun Yin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d PROJECT: CAPTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "CapTracker is a desktop application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//* *Major enhancement*: TBC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** What it does: TBC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Justification: TBC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Highlights: TBC."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Credits: TBC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//* *Minor enhancement*: TBC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//*** PRs reviewed (with non-trivial review comments): TBC."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//*** Contributed to forum discussions (examples:  TBC.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//*** Reported bugs and suggestions for other teams in the class (examples:  TBC.)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Tools:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "BugEyedBug": 57
    }
  },
  {
    "path": "docs/team/jeremiah-ang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d Jeremiah Ang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d PROJECT: CAPTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "CapTracker is a desktop application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "* v1.1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "** Implement CAP calculation logic"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "** Handle input/update of CAP Goal"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "* v1.2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "** Implement logic to calculate target grades for _not-yet-graded_ modules"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Major enhancement*: TBC."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** What it does: TBC."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Justification: TBC."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Highlights: TBC."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Credits: TBC."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Minor enhancement*: TBC."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Documentation:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Community:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** PRs reviewed (with non-trivial review comments): TBC."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Contributed to forum discussions (examples:  TBC.)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Reported bugs and suggestions for other teams in the class (examples:  TBC.)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Tools:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "TBC"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "TBC"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 67
    }
  },
  {
    "path": "docs/team/jeremyyew.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d Jeremy Yew - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d\u003d PROJECT: CAPTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "CapTracker is a desktop application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "* *Major enhancement*: TBC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** What it does: TBC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Justification: TBC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Highlights: TBC."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Credits: TBC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "* *Minor enhancement*: TBC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): TBC."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "*** Contributed to forum discussions (examples:  TBC.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  TBC.)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 58
    }
  },
  {
    "path": "docs/team/josephambe.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d Amber Joseph - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephambe"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephambe"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephambe"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d\u003d PROJECT: CAPTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephambe"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephambe"
        },
        "content": "CapTracker is a desktop application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//* *Major enhancement*: TBC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** What it does: TBC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Justification: TBC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Highlights: TBC."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Credits: TBC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//* *Minor enhancement*: TBC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//*** PRs reviewed (with non-trivial review comments): TBC."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//*** Contributed to forum discussions (examples:  TBC.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//*** Reported bugs and suggestions for other teams in the class (examples:  TBC.)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Tools:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "josephambe": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.storage.JsonTranscriptStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.storage.TranscriptStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        TranscriptStorage transcriptStorage \u003d new JsonTranscriptStorage(userPrefs.getTranscriptFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, transcriptStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //Optional\u003cReadOnlyTranscript\u003e transcriptOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //ReadOnlyTranscript initialTranscriptData;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        // Not used for now. But wrote down already so I will leave it here for when we do complete morph."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            transcriptOptional \u003d storage.readTranscript();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            if (!transcriptOptional.isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //                logger.info(\"Data file not found. Will be starting with a sample transcript\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            initialTranscriptData \u003d transcriptOptional.orElseGet(SampleDataUtil::getSampleTranscript);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            logger.warning(\"Data file not in the correct format. Will be starting with an empty Transcript\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            initialTranscriptData \u003d new Transcript();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            logger.warning(\"Problem while reading from the file. Will be starting with an empty Transcript\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            initialTranscriptData \u003d new Transcript();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //       }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 20,
      "-": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TranscriptChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/** Indicates the Transcript in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class TranscriptChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final ReadOnlyTranscript data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public TranscriptChangedEvent(ReadOnlyTranscript data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return \"number of transcripts \" + data.getModuleList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 11,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.parser.TranscriptParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final TranscriptParser transcriptParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptParser \u003d new TranscriptParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            if (commandText.trim().startsWith(\"c_\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                Command command \u003d transcriptParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                return command.execute(model, history);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 44,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Adds a module to the transcript."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to the transcript. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            + \"Parameters: CODE YEAR SEMESTER CREDIT [GRADE]\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2103 2 1 4 A+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"This module already exists in the transcript\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public AddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        model.commitTranscript();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CapCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * Shows CAP based on existing modules."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class CapCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cap\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Calculate current CAP with given modules \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"Parameters: NONE \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your Current CAP is: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double cap \u003d model.getCap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, cap));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GoalCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.capgoal.CapGoal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * Sets CAP Goal"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goal\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Set your CAP goal. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"CAP_GOAL \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"4.5\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your CAP Goal: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private final double goal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Creates an GoalCommand to set the CAP Goal"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public GoalCommand(double goal) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        model.updateCapGoal(goal);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        CapGoal capGoal \u003d model.getCapGoal();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, capGoal.toString()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                || (other instanceof GoalCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                \u0026\u0026 goal \u003d\u003d ((GoalCommand) other).goal); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": " * Reverts the {@code model}\u0027s transcript to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "public class RedoModuleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        if (!model.canRedoTranscript()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        model.redoTranscript();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BugEyedBug": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": " * Reverts the {@code model}\u0027s transcript to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "public class UndoModuleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        if (!model.canUndoTranscript()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        model.undoTranscript();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BugEyedBug": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.validateNumOfArgs;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Credit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String[] tokenizedArgs \u003d ParserUtil.tokenize(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        validateNumOfArgs(tokenizedArgs, 4, 5);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Code code \u003d ParserUtil.parseCode(tokenizedArgs[index++]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Year year \u003d ParserUtil.parseYear(tokenizedArgs[index++]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Semester semester \u003d ParserUtil.parseSemester(tokenizedArgs[index++]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Credit credit \u003d ParserUtil.parseCredit(tokenizedArgs[index++]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module module \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (tokenizedArgs.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            module \u003d new Module(code, year, semester, credit, null, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            Grade grade \u003d ParserUtil.parseGrade(tokenizedArgs[index++]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            module \u003d new Module(code, year, semester, credit, grade, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.CapCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        case CapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return new CapCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        case GoalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return new GoalCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 92,
      "jeremiah-ang": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GoalCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * Parses User Input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class GoalCommandParser implements Parser\u003cGoalCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public GoalCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        final String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        final String format \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            throw new ParseException(format);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            double newGoal \u003d Double.parseDouble(trimmedArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            if (newGoal \u003c 0 || newGoal \u003e 5) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                throw new ParseException(format);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return new GoalCommand(newGoal);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            throw new ParseException(format);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Credit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Tokenizes args into an array of args. Checks if args is null and trims leading and trailing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * whitespaces."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param args the target args that would be tokenize"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return array of args"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static String[] tokenize(String args) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Validates the number of arguments. If number of arguments is not within the bounds,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * ParseException will be thrown."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the number of arguments is invalid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static void validateNumOfArgs(String[] args, int min, int max) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (args.length \u003c min || args.length \u003e max) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(\"Invalid number of arguments!\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                    + \"Number of arguments should be more than or equal to \" + min"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                    + \" and less than or equal to \" + max);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String code} into a {@code Code}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Code parseCode(String args) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedCode \u003d args.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Code.isValidCode(trimmedCode)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Code.MESSAGE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Code(trimmedCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String year} into a {@code Year}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Year parseYear(String args) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedYear \u003d args.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Year.isValidYear(trimmedYear)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Year.MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Year(trimmedYear);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String semester} into a {@code Semester}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code semester} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Semester parseSemester(String args) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedSemester \u003d args.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Semester.isValidSemester(trimmedSemester)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Semester.MESSAGE_SEMESTER_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Semester(trimmedSemester);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String credit} into a {@code Credit}. Leading and trailing whitespaces will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * be trimmed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code credit} is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Credit parseCredit(String args) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedCredit \u003d args.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        int intCredit \u003d Integer.parseInt(trimmedCredit);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Credit.isValidCredit(intCredit)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Credit.MESSAGE_CREDIT_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Credit(intCredit);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String grade} into a {@code Grade}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code grade} is invalid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Grade parseGrade(String args) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedGrade \u003d args.trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Grade.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Grade.MESSAGE_GRADE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Grade(trimmedGrade);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 216,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TranscriptParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.CapCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class TranscriptParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .replaceFirst(\"c_\", \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case CapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return new CapCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case GoalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return new GoalCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.capgoal.CapGoal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** {@code Predicate} that always evaluate to true TODO: REMOVE*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Clears existing backing model and replaces with the newly provided data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param replacement the replacement."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void resetData(ReadOnlyTranscript replacement);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. TODO: REMOVE*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the Transcript."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return read only version of the transcript"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ReadOnlyTranscript getTranscript();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the transcript."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param module module to find in the transcript"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if module exists in transcript"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The module must exist in the transcript."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param target module to be deleted from the transcript"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code module} must not already exist in the transcript."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param module module to be added into the transcript"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code target} must exist in the transcript. The module identity of {@code editedModule}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * must not be the same as another existing module in the transcript."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param target module to be updated"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param editedModule the updated version of the module"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updateModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an unmodifiable view of the filtered module list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the model has previous transcript states to restore."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean canUndoTranscript();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the model has undone transcript states to restore."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean canRedoTranscript();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the model\u0027s transcript to its previous state."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void undoTranscript();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the model\u0027s transcript to its previously undone state."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void redoTranscript();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Saves the current transcript state for undo/redo."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void commitTranscript();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Get the cap goal of the current transcript"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    CapGoal getCapGoal();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Set the cap goal of the current transcript"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updateCapGoal(double capGoal);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the CAP based on the current Transcript records"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    double getCap();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns the AddressBook TODO: REMOVE*/"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list TODO: REMOVE */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 197,
      "-": 13,
      "jeremiah-ang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.commons.events.model.TranscriptChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.capgoal.CapGoal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final VersionedTranscript versionedTranscript;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Initializes a ModelManager with the given transcript and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModelManager(ReadOnlyTranscript transcript, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(transcript, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        logger.fine(\"Initializing with transcript: \" + transcript + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript \u003d new VersionedTranscript(transcript);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(versionedTranscript.getModuleList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        //TODO: REMOVE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this(new Transcript(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript \u003d new VersionedTranscript(new Transcript());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(versionedTranscript.getModuleList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void resetData(ReadOnlyTranscript newData) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.resetData(newData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ReadOnlyTranscript getTranscript() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void indicateTranscriptChanged() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        raise(new TranscriptChangedEvent(versionedTranscript));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript.hasModule(module);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.removeModule(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.addModule(module);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.updateModule(target, editedModule);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code versionedTranscript}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredModules);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canUndoTranscript() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript.canUndo();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canRedoTranscript() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript.canRedo();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void undoTranscript() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.undo();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void redoTranscript() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.redo();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void commitTranscript() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.commit();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public CapGoal getCapGoal() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return versionedTranscript.getCapGoal();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void updateCapGoal(double capGoal) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        versionedTranscript.setCapGoal(capGoal);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return versionedTranscript.getCap();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons) // TODO: REMOVE"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 177,
      "-": 25,
      "jeremiah-ang": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTranscript.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import com.fasterxml.jackson.databind.annotation.JsonDeserialize;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.storage.JsonTranscriptDeserializer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Unmodifiable view of a Transcript."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "@JsonDeserialize(using \u003d JsonTranscriptDeserializer.class)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public interface ReadOnlyTranscript {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an unmodifiable view of the module list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 7,
      "alexkmj": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Transcript.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.capgoal.CapGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Wraps all data at the transcript level"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Duplicates are not allowed (by .isSameModule comparison)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Transcript implements ReadOnlyTranscript {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private CapGoal capGoal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Transcript() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        capGoal \u003d new CapGoal();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates an Transcript using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Transcript(ReadOnlyTranscript toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modulesUpdated();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Resets the existing data of this {@code Transcript} with {@code newData}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void resetData(ReadOnlyTranscript newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the transcript."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds a module to the transcript."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The module must not already exist in the transcript."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addModule(Module p) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules.add(p);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modulesUpdated();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code target} must exist in the transcript."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the transcript."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modulesUpdated();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Removes {@code key} from this {@code Transcript}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code key} must exist in the transcript."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modulesUpdated();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Return the current CAP"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return current cap score"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return calculateCap();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Calculate CAP Score based on modules with scores"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return cap: cap score"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private double calculateCap() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ObservableList\u003cModule\u003e gradedModulesList \u003d getGradedModulesList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double totalModulePoint \u003d calculateTotalModulePoint(gradedModulesList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double totalModuleCredit \u003d calculateTotalModuleCredit(gradedModulesList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double cap \u003d 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        if (totalModuleCredit \u003e 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            cap \u003d totalModulePoint / totalModuleCredit;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Calculates the total module point from the list of modules"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private double calculateTotalModulePoint(ObservableList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double totalPoint \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            totalPoint +\u003d module.getGrade().getPoint() * module.getCredits().value;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return totalPoint;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Calculates the total module credit from the list of modules"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private double calculateTotalModuleCredit(ObservableList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        int totalModuleCredit \u003d 0;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            totalModuleCredit +\u003d module.getCredits().value;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return totalModuleCredit;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Filters for modules that is to be used for CAP calculation"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return list of modules used for CAP calculation"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getGradedModulesList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return modules.getFilteredModules(this::moduleIsUsedForCapCalculation);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Filters for modules that is to be assigned a target grade"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return gradedModulesList: a list of modules used for CAP calculation"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getTargetableModulesList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return modules.getFilteredModules(Module::isTargetable);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Filters for modules that have target grades"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return gradedModulesList: a list of modules used for CAP calculation"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getTargetedModulesList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return modules.getFilteredModules(Module::isTargeted);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Check if the given module should be considered for CAP Calculation"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return true if yes, false otherwise"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private boolean moduleIsUsedForCapCalculation(Module module) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return module.hasCompleted() \u0026\u0026 module.affectsGrade();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Calls relevant methods when the modules list is updated"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void modulesUpdated() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        updateTargetModuleGrades();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Replaces targetable module with an updated target grade"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void updateTargetModuleGrades() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        boolean shouldSkip \u003d !capGoal.isSet;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        if (shouldSkip) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ObservableList\u003cModule\u003e targetableModules \u003d getTargetableModulesList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ObservableList\u003cModule\u003e newTargetModules \u003d calculateNewTargetModuleGrade(targetableModules);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        if (newTargetModules \u003d\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            makeCapGoalImpossible();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        replaceTargetModules(targetableModules, newTargetModules);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Replaces Modules used to calculate target grade with new Modules with those target grades"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param targetableModules"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param newTargetModules"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void replaceTargetModules("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            List\u003cModule\u003e targetableModules, List\u003cModule\u003e newTargetModules) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        if (targetableModules.isEmpty()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        modules.removeAll(targetableModules);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        modules.addAll(newTargetModules);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Calculates target module grade in order to achieve target goal"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return a list of modules with target grade if possible. null otherwise"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private ObservableList\u003cModule\u003e calculateNewTargetModuleGrade(ObservableList\u003cModule\u003e targetableModules) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        List\u003cModule\u003e targetModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        if (targetableModules.isEmpty()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return FXCollections.observableArrayList(targetModules);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ObservableList\u003cModule\u003e gradedModules \u003d getGradedModulesList();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ObservableList\u003cModule\u003e sortedTargetableModules \u003d targetableModules.sorted("
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                Comparator.comparingInt(Module::getCreditsValue));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double totalUngradedModuleCredit \u003d calculateTotalModuleCredit(sortedTargetableModules);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double totalMc \u003d calculateTotalModuleCredit(gradedModules) + totalUngradedModuleCredit;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double currentTotalPoint \u003d calculateTotalModulePoint(gradedModules);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double totalScoreToAchieve \u003d capGoal.getCapGoal() * totalMc - currentTotalPoint;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double unitScoreToAchieve \u003d Math.ceil(totalScoreToAchieve / totalUngradedModuleCredit * 2) / 2.0;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        if (unitScoreToAchieve \u003e 5) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        Module newTargetModule;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        for (Module targetedModule : sortedTargetableModules) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            if (unitScoreToAchieve \u003d\u003d 0.5) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                unitScoreToAchieve \u003d 1.0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            newTargetModule \u003d targetedModule.updateTargetGrade(unitScoreToAchieve);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            targetModules.add(newTargetModule);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            totalScoreToAchieve -\u003d newTargetModule.getCreditsValue() * unitScoreToAchieve;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            totalUngradedModuleCredit -\u003d newTargetModule.getCreditsValue();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            unitScoreToAchieve \u003d Math.ceil(totalScoreToAchieve / totalUngradedModuleCredit * 2) / 2.0;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return FXCollections.observableArrayList(targetModules);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public CapGoal getCapGoal() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return capGoal;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void setCapGoal(double capGoal) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        this.capGoal \u003d new CapGoal(capGoal);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        updateTargetModuleGrades();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Sets the capGoal as something impossible"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void makeCapGoalImpossible() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        capGoal \u003d capGoal.isImpossible();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Tells if the capGoal is no longer possible"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return true if yes, false otherwise"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public boolean isCapGoalImpossible() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return capGoal.isImpossible;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Transcript // instanceof handles nulls"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 modules.equals(((Transcript) other).modules));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 129,
      "jeremiah-ang": 198
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private Path transcriptFilePath \u003d Paths.get(\"data\", \"transcript.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Path getTranscriptFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return transcriptFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setTranscriptFilePath(Path transcriptFilePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.transcriptFilePath \u003d transcriptFilePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    // TODO: REMOVE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    // TODO: REMOVE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath) //TODO: REMOVE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 Objects.equals(transcriptFilePath, o.transcriptFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Objects.hash(guiSettings, transcriptFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + transcriptFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 1,
      "alexkmj": 15,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTranscript.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * {@code Transcript} that keeps track of its own history."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class VersionedTranscript extends Transcript {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final List\u003cReadOnlyTranscript\u003e transcriptStateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public VersionedTranscript(ReadOnlyTranscript initialState) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList.add(new Transcript(initialState));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Saves a copy of the current {@code Transcript} state at the end of the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList.add(new Transcript(this));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList.subList(currentStatePointer + 1, transcriptStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the transcript to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        resetData(transcriptStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the transcript to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        resetData(transcriptStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if {@code undo()} has transcript states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if {@code redo()} has transcript states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return currentStatePointer \u003c transcriptStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!(other instanceof VersionedTranscript)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        VersionedTranscript otherVersionedTranscript \u003d (VersionedTranscript) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return super.equals(otherVersionedTranscript)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 transcriptStateList.equals(otherVersionedTranscript.transcriptStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTranscript.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            super(\"Current state pointer at start of transcriptState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            super(\"Current state pointer at end of transcriptState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/capgoal/CapGoal.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package seedu.address.model.capgoal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * Represents Cap Goal"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * Immutable. Value can be null."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class CapGoal {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private static final String MESSAGE_IS_NULL \u003d \"NIL\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public final double capGoal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public final boolean isSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public final boolean isImpossible;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public CapGoal() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        capGoal \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        isSet \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        isImpossible \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public CapGoal(double capGoal) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        this(capGoal, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public CapGoal(double capGoal, boolean isImpossible) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        isSet \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        this.capGoal \u003d capGoal;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        this.isImpossible \u003d isImpossible;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Returns the cap goal"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public double getCapGoal() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return capGoal;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public boolean isSet() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return isSet;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public CapGoal isImpossible() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return new CapGoal(capGoal, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        if (isSet) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return \"\" + getCapGoal();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return MESSAGE_IS_NULL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Code.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s code in the transcript."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCode(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Code {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for code value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_CODE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"Code can take any values except whitespaces\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String CODE_VALIDATION_REGEX \u003d \"^[^\\\\s]+$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable code value."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Code}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param code A valid code."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Code(String code) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidCode(code), MESSAGE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d code;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid code."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param code string to be tested for validity"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid code"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidCode(String code) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return code.matches(CODE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module code."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the module code value of both Code object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two code objects."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Code object compared against this object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Code"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value.equals(((Code) other).value));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Credit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s credits in the transcript."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCredit(int)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Credit {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for credit value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_CREDIT_CONSTRAINTS \u003d \"Credits must be a integer\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable credit value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Credit}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param credits A valid credit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Credit(int credits) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidCredit(credits), MESSAGE_CREDIT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d credits;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid credit."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Credit must be between 1 and 20"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param credits string to be tested for validity"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid credit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidCredit(int credits) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (credits \u003c 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        } else if (credits \u003e 20) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module credits value."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module credits"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the module credit value of both Credit object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two credit objects."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Credit object compared against this object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Credit"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Credit) other).value);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Grade.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s grade in the transcript."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGrade(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for grade value."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_GRADE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"Grade can be A+, A, A-, B+, B, B-, C+, C, D+, D, F, CS, CU\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_POINT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"Score must be between [0, 5] with increments of 0.5 and not 0.5\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Default value\u0027s value"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final String EMPTY_VALUE \u003d \"NIL\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String GRADE_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"A\\\\+|A\\\\-|A|B\\\\+|B\\\\-|B|C\\\\+|C|D\\\\+|D|F|CS|CU|\" + EMPTY_VALUE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Static Unchangeable Mapping between Grade and Point"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private static final Map\u003cString, Double\u003e MAP_GRADE_POINT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private static final Map\u003cDouble, String\u003e MAP_POINT_GRADE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        Map\u003cString, Double\u003e tempGradePointMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        Map\u003cDouble, String\u003e tempPointGradeMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempGradePointMap.put(\"A+\", 5.0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempGradePointMap.put(\"A\", 5.0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempGradePointMap.put(\"A-\", 4.5);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempGradePointMap.put(\"B+\", 4.0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempGradePointMap.put(\"B\", 3.5);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempGradePointMap.put(\"B-\", 3.0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempGradePointMap.put(\"C+\", 2.5);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempGradePointMap.put(\"C\", 2.0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempGradePointMap.put(\"D+\", 1.5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempGradePointMap.put(\"D\", 1.0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempGradePointMap.put(\"F\", 0.0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        for (Map.Entry\u003cString, Double\u003e entry : tempGradePointMap.entrySet()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            tempPointGradeMap.put(entry.getValue(), entry.getKey());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        tempPointGradeMap.put(5.0, \"A\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        MAP_GRADE_POINT \u003d Collections.unmodifiableMap(tempGradePointMap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        MAP_POINT_GRADE \u003d Collections.unmodifiableMap(tempPointGradeMap);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable grade value."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * State of the grade"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final State state;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates a new {@code Grade} object with State INCOMPLETE"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this(EMPTY_VALUE, State.INCOMPLETE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates a new {@code Grade} object with value grade and State COMPLETE"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade(String grade) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this(grade, State.COMPLETE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Grade} with letter grade and state of it."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param state"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Grade(String grade, State state) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidGrade(grade), MESSAGE_GRADE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d grade;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Grade} from point with state COMPLETE"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade(double point) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this(point, State.COMPLETE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Grade} from point and given state"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param state"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Grade(double point, State state) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(point);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidPoint(point), MESSAGE_POINT_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d mapPointToValue(point);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if point is within [0, 5] and step by 0.5 and not 0.5"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidPoint(double point) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        double fraction \u003d point - Math.floor(point);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return point \u003e\u003d 0 \u0026\u0026 point \u003c\u003d 5 \u0026\u0026 (fraction \u003d\u003d 0 || fraction \u003d\u003d 0.5) \u0026\u0026 point !\u003d 0.5;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the letter grade the point should be mapped to."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private String mapPointToValue(double point) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return MAP_POINT_GRADE.get(point);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid grade."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param grade string to be tested for validity"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid grade"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidGrade(String grade) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return grade.matches(GRADE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if grade affects cap and false if grade does not affect cap."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if grade affects cap and false if grade does not affect cap."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean affectsCap() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return !EMPTY_VALUE.equals(value) \u0026\u0026 !value.contentEquals(\"CS\") \u0026\u0026 !value.contentEquals(\"CU\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the point equivalent of the grade or 0 if grade is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return point equivalent of the grade"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public float getPoint() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (MAP_GRADE_POINT.containsKey(value)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return MAP_GRADE_POINT.get(value).floatValue();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if grade is complete"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return State.COMPLETE.equals(state);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if grade is incomplete"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean isIncomplete() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return State.INCOMPLETE.equals(state);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if grade is adjusted"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean isAdjust() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return State.ADJUST.equals(state);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if is target grades"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean isTarget() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return State.TARGET.equals(state);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates a new Grade that is adjusted"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return new Grade object"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade adjustGrade(String grade) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Grade(grade, State.ADJUST);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates a new Grade that is adjusted"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return new Grade object"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade adjustGrade(double point) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Grade(point, State.ADJUST);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates a new Grade that is targeted"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return new Grade object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade targetGrade(String grade) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Grade(grade, State.TARGET);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates a new Grade that is targeted"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return new Grade object"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade targetGrade(double point) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Grade(point, State.TARGET);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the grade value."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return grade"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the grade value of both Grade object."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two grade objects."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Grade object compared against this object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Grade"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value.equals(((Grade) other).value))"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 state.equals(((Grade) other).state);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Different states of a grade"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private enum State {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        COMPLETE,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        INCOMPLETE,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        TARGET,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ADJUST"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 251,
      "jeremiah-ang": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module in the transcript."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for completed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final boolean MODULE_COMPLETED \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for not completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final boolean MODULE_NOT_COMPLETED \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Code for the module."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Code code;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Year the module was taken."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Semester the module was taken."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Semester semester;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Module credits awarded for completion this module."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Credit credits;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Module grade awarded for completion this module."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Grade grade;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * True if module has been completed. False if module has not been taken yet."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final boolean completed;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Module(Code code, Year year, Semester semester, Credit credit, Grade grade,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            boolean completed) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(credit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.credits \u003d credit;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.completed \u003d completed;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        //TODO require grade Non-null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.grade \u003d (grade \u003d\u003d null) ? new Grade() : grade;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Module(Code code, Year year, Semester semester, Credit credit, Grade grade) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        //TODO require grade Non-null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this(code, year, semester, credit, grade, (grade \u003d\u003d null) || grade.isComplete());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Creates a new Module from an existing module but with a different grade"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public Module(Module module, Grade grade) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        this(module.code, module.year, module.semester, module.credits, grade, module.completed);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Tells if this module can be used for target grade calculation"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return true if yes false otherwise."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public boolean isTargetable() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return getGrade().isTarget() || getGrade().isIncomplete();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Tells if this module will affect the calculation of CAP"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return true if yes false otherwise."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public boolean affectsGrade() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return getGrade().affectsCap();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * returns the value of the Credit"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return value of Credit"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public int getCreditsValue() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return getCredits().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Clones current Module into one with a new Grade with state TARGET"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return a new Module with Grade with state TARGET"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public Module updateTargetGrade(double point) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return new Module(this, grade.targetGrade(point));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Tells if the Module has a Grade with state TARGET"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return true if yes, false otherwise"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public boolean isTargeted() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return getGrade().isTarget();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module code."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module code"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Code getCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module credits awarded."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module credits"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Credit getCredits() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the year in which the module was taken."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return year in which module was taken"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the semester in which the module was taken."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return semester in which module was taken"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module grade awarded."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module grade"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade getGrade() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if module has been completed and false if module has not been taken."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if module has been completed and false if module has not been taken"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean hasCompleted() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return completed;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if module code is the same."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if modue code is the same"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return otherModule !\u003d null \u0026\u0026 otherModule.getCode().equals(getCode());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if both modules are of the same object or contains the same set of data fields."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two modules."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other other module to be compared with this Module object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both objects contains the same data fields"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return otherModule.getCode().equals(getCode())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.getGrade().equals(getGrade())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.getYear().equals(getYear())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.getSemester().equals(getSemester())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.getCredits().equals(getCredits())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.getGrade().equals(getGrade())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.hasCompleted() \u003d\u003d hasCompleted();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the code, year, semester, credits, grade, is module completed."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Format: Code: CODE Year: YEAR Semester: SEMESTER Credits: CREDITS Grade: GRADE Completed:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * COMPLETED"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return information of this module"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return builder.append(\"Code: \")"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getCode())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Year: \")"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getYear())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Semester: \")"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getSemester())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Credits: \")"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getCredits())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Grade: \")"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getGrade())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Completed: \")"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(hasCompleted())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //@@author alexkmj"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Objects.hash(code, year, semester, credits, grade, completed);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 221,
      "jeremiah-ang": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Semester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s semester in the transcript."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSemester(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Legal values: 1, 2, s1, s2. 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * (Semester 1), 2 (Semester 2), s1 (Special Semester 1), s2 (Special Semester 2)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for semester value."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_SEMESTER_CONSTRAINTS \u003d \"Semester can be 1, 2, s1 or s2\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_VALIDATION_REGEX \u003d \"1|2|s1|s2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for semester one."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for semester two."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_TWO \u003d \"2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for special semester one."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_SPECIAL_ONE \u003d \"s1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for special semester two."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_SPECIAL_TWO \u003d \"s2\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable semester value."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Code}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param semester A valid semester."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Semester(String semester) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidSemester(semester), MESSAGE_SEMESTER_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d semester;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid semester."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param semester string to be tested for validity"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid semester"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidSemester(String semester) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return semester.matches(SEMESTER_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the semester value."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return grade"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the semester value of both Semester object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two semester objects."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Semester object compared against this object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Semester"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value.equals(((Semester) other).value));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A module is considered unique by comparing {@code moduleA.equals(moduleB)}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * As such, adding and updating of modules uses {@code moduleA.equals(moduleB)} for equality so as"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * to ensure that the module being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * UniqueModuleList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates an observable list of module."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * See {@link Module}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * See {@link Module}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param toCheck the module that is being checked against"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if list contains equivalent module"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The {@link Module} must not have already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param toAdd the module that would be added into the list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds all module in a list to the list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean addAll(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return internalList.addAll(modules);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code target} must exist in the list. The {@link Module} identity of {@code editedModule}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param target the module to be replaced"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param editedModule the modue that replaces the old module"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!target.equals(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the {@link #internalList} of this UniqueModuleList with the internalList of the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * replacement."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param replacement the UniqueModuleList object that contains the internalList that is"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * replacing the old internalList"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the contents of this list with {@code modules}. {@code modules} must not contain"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * duplicate modules."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param modules the list of module that would replace the old list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The {@link Module} must exist in the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param toRemove the module to be removed from the list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Removes all module in a list from the list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean removeAll(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return internalList.removeAll(modules);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return backing list as an unmodifiable {@code ObservableList}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param modules the module list that is being checked"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if modules are unique and false if modules are not unique"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.size() \u003d\u003d modules.parallelStream()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .distinct()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Returns the list of filtered Module based on the given predicate"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return filtered list"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModules(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return internalList.filtered(predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the iterator of the internal list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return iterator of the internal list"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the internal list of both UniqueModuleList object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two UniqueModuleList objects."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Code object compared against this object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 188,
      "jeremiah-ang": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Year.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s year in the transcript."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidYear(int)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Year {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_YEAR_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"Year must be [1-5]. Example: 1 represents Year 1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String YEAR_VALIDATION_REGEX \u003d \"[1-5]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable year value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Year}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Year(int year) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d year;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Year}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Year(String year) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d Integer.valueOf(year);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid year."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year string to be tested for validity"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid year"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidYear(int year) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return isValidYear(Integer.toString(year));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid year."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year string to be tested for validity"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid year"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidYear(String year) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return year.matches(YEAR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the year the module was taken."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return year"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the year value of both Year object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two Year objects."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Year object compared against this object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Year"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Year) other).value);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/DuplicateModuleException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Signals that the operation will result in duplicate {@link Module} objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/ModuleNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Signals that the operation is unable to find the specified {@link Module}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ModuleBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Credit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String DEFAULT_CODE \u003d \"CS2103\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final int DEFAULT_YEAR \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String DEFAULT_SEMESTER \u003d Semester.SEMESTER_ONE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final int DEFAULT_CREDIT \u003d 4;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String DEFAULT_GRADE \u003d \"A+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final boolean DEFAULT_COMPLETED \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Code code;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Credit credit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private Grade grade;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private boolean completed;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        code \u003d new Code(DEFAULT_CODE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        year \u003d new Year(DEFAULT_YEAR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        semester \u003d new Semester(DEFAULT_SEMESTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        credit \u003d new Credit(DEFAULT_CREDIT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        grade \u003d new Grade(DEFAULT_GRADE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        completed \u003d DEFAULT_COMPLETED;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        code \u003d moduleToCopy.getCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        year \u003d moduleToCopy.getYear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        semester \u003d moduleToCopy.getSemester();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        credit \u003d moduleToCopy.getCredits();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        grade \u003d moduleToCopy.getGrade();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        completed \u003d moduleToCopy.hasCompleted();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Code} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withCode(String code) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.code \u003d new Code(code);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Year} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withYear(int year) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.year \u003d new Year(year);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Semester} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.semester \u003d new Semester(semester);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Credit} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withCredit(int credit) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.credit \u003d new Credit(credit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Grade} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withGrade(String grade) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.grade \u003d new Grade(grade);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code Grade} of the {@code Module} that we are building to null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder noGrade() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.grade \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Sets the {@code completed} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModuleBuilder withCompleted(boolean completed) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.completed \u003d completed;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new Module(code, year, semester, credit, grade, completed);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 9,
      "alexkmj": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DISCRETE_MATH \u003d new ModuleBuilder().withCode(\"CS1231\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(1)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"A+\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module PROGRAMMING_METHODOLOGY_TWO \u003d new ModuleBuilder().withCode(\"CS2030\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(2)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_TWO)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"B+\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATA_STRUCTURES \u003d new ModuleBuilder().withCode(\"CS2040\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(3)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_SPECIAL_ONE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"F\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module ASKING_QUESTIONS \u003d new ModuleBuilder().withCode(\"GEQ1000\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(1)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"CS\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Double MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP \u003d 3.0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module SOFTWARE_ENGINEERING \u003d new ModuleBuilder().withCode(\"CS2103\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(3)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"A+\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATABASE_SYSTEMS \u003d new ModuleBuilder().withCode(\"CS2102\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(2)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"A+\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATABASE_SYSTEMS_2MC \u003d new ModuleBuilder().withCode(\"CS2102B\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(2)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(2)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"A+\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                new Address(\"Blk 30 GePersonylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns an {@code Transcript} given modules as arguments."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static ReadOnlyTranscript getTranscriptWithModules(Module... modules) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript tr \u003d new Transcript();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            tr.addModule(module);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return tr;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static ReadOnlyTranscript getSampleTranscript() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return getTranscriptWithModules("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            DISCRETE_MATH,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            PROGRAMMING_METHODOLOGY_TWO,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            DATA_STRUCTURES,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            ASKING_QUESTIONS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            SOFTWARE_ENGINEERING,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            DATABASE_SYSTEMS,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            DATABASE_SYSTEMS_2MC);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 79,
      "alexkmj": 2,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTranscriptDeserializer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import com.fasterxml.jackson.core.JsonParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.StdDeserializer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Credit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " * Deserializer for {@link seedu.address.model.ReadOnlyTranscript}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public class JsonTranscriptDeserializer extends StdDeserializer\u003cReadOnlyTranscript\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public JsonTranscriptDeserializer(Class\u003cReadOnlyTranscript\u003e vc) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        super(vc);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public JsonTranscriptDeserializer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        super(ReadOnlyTranscript.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ReadOnlyTranscript deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript transcript \u003d new Transcript();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        JsonNode node \u003d jp.getCodec().readTree(jp);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            JsonNode capGoal \u003d node.path(\"capgoal\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            if (!capGoal.isMissingNode()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                transcript.setCapGoal(capGoal.doubleValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            Iterator\u003cJsonNode\u003e elements \u003d node.get(\"modules\").get(\"internalList\").elements();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            while (elements.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                JsonNode element \u003d elements.next();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Code code \u003d new Code(element.path(\"code\").path(\"value\").textValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Year year \u003d new Year(element.path(\"year\").path(\"value\").intValue());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Semester semester \u003d new Semester(element.path(\"semester\").path(\"value\").textValue());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Credit credits \u003d new Credit(element.path(\"credits\").path(\"value\").intValue());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Grade grade \u003d new Grade(element.path(\"grade\").path(\"value\").textValue());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                boolean completed \u003d element.path(\"completed\").booleanValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Module module \u003d new Module(code, year, semester, credits, grade, completed);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                transcript.addModule(module);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            return transcript;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 59,
      "jeremiah-ang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTranscriptStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "//@@author jeremyyew"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " * A class to access Transcript stored in the hard disk as a json file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public class JsonTranscriptStorage implements TranscriptStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public JsonTranscriptStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Path getTranscriptFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Optional\u003cReadOnlyTranscript\u003e readTranscript() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return readTranscript(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Similar to {@link #readTranscript()}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @param transcriptFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Optional\u003cReadOnlyTranscript\u003e readTranscript(Path transcriptFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return JsonUtil.readJsonFile(transcriptFilePath, ReadOnlyTranscript.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript(ReadOnlyTranscript transcript) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        JsonUtil.saveJsonFile(new Transcript(transcript), filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript(ReadOnlyTranscript transcript, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        requireNonNull(transcript);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        JsonUtil.saveJsonFile(new Transcript(transcript), filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.events.model.TranscriptChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, TranscriptStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Saves the current version of the Transcript to the hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    void handleTranscriptChangedEvent(TranscriptChangedEvent tce);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 9,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.events.model.TranscriptChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " * Manages storage of Transcript data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private TranscriptStorage transcriptStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            TranscriptStorage transcriptStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.transcriptStorage \u003d transcriptStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Transcript methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Path getTranscriptFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return transcriptStorage.getTranscriptFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Optional\u003cReadOnlyTranscript\u003e readTranscript() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return readTranscript(transcriptStorage.getTranscriptFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Optional\u003cReadOnlyTranscript\u003e readTranscript(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return transcriptStorage.readTranscript(filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript(ReadOnlyTranscript transcript) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        saveTranscript(transcript, transcriptStorage.getTranscriptFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript(ReadOnlyTranscript transcript, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        transcriptStorage.saveTranscript(transcript, filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void handleTranscriptChangedEvent(TranscriptChangedEvent event) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local transcript data changed, saving to file\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            saveTranscript(event.data);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 48,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TranscriptStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Transcript}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public interface TranscriptStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    Path getTranscriptFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns Transcript data as a {@link ReadOnlyTranscript}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    Optional\u003cReadOnlyTranscript\u003e readTranscript() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @see #getTranscriptFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    Optional\u003cReadOnlyTranscript\u003e readTranscript(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Saves the given {@link ReadOnlyTranscript} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @param transcript cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    void saveTranscript(ReadOnlyTranscript transcript) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @see #saveTranscript(ReadOnlyTranscript)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    void saveTranscript(ReadOnlyTranscript transcript, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private PersonListPanel personListPanel2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private PersonListPanel capPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private StackPane personListPanelPlaceholder2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private StackPane capPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        personListPanel2 \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        personListPanelPlaceholder2.getChildren().add(personListPanel2.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        capPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        capPanelPlaceholder.getChildren().add(capPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        // browserPanel.freeResources();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 15,
      "-": 195
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "#modulesRow {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "#modulesScrollPane {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 11,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \u003c!--\u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e--\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"modulesScrollPane\" VBox.vgrow\u003d\"ALWAYS\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \u003cHBox fx:id\u003d\"modulesRow\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"300\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"5\" bottom\u003d\"10\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList2\" minWidth\u003d\"300\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"5\" bottom\u003d\"10\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder2\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \u003cVBox fx:id\u003d\"capPanel\" minWidth\u003d\"250\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"5\" bottom\u003d\"10\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \u003cStackPane fx:id\u003d\"capPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \u003c!--\u003c/SplitPane\u003e--\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 20,
      "-": 59
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/EmptyTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 3
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/ExtraValuesTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  \"modules\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    \"extraValue\": \"ignore this\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    \"internalList\": ["
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2102\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"extraValue\": \"ignore this\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"extraValue\": \"ignore this\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS1231\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2103\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 3"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2030\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 2"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"2\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"B\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  },"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  \"extraValue\": \"ignore this\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 82
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/InvalidAndValidTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  \"modules\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    \"internalList\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"hello world\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2030\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"2\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"B\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2040\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"s1\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"F\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 60
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/InvalidTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  \"modules\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    \"internalList\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 1819"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 24
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/NotJsonFormatTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "Not a json file!"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 1
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/TypicalTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  \"modules\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    \"internalList\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS1231\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2030\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"2\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"B+\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2040\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 3"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"s1\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"F\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Path SAVE_TRANSCRIPT_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"sampleTranscriptData.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    protected Supplier\u003cReadOnlyTranscript\u003e initialTranscriptDataSupplier \u003d () -\u003e new Transcript();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    protected Path saveTranscriptFileLocation \u003d SAVE_TRANSCRIPT_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            Supplier\u003cReadOnlyTranscript\u003e initialTranscriptDataSupplier, Path saveTranscriptFileLocation) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.initialTranscriptDataSupplier \u003d initialTranscriptDataSupplier;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.saveTranscriptFileLocation \u003d saveTranscriptFileLocation;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        if (initialTranscriptDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            //For some reason when testing my app locally, this line keeps creating a file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            // in my test directory instead of the sandbox (unlike \"sampleData.xml\"), which is annoying)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            // createJsonDataFileWithData(new Transcript(this.initialTranscriptDataSupplier.get()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            // this.saveTranscriptFileLocation);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        userPrefs.setTranscriptFilePath(saveTranscriptFileLocation);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Creates a json file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private \u003cT\u003e void createJsonDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            JsonUtil.saveJsonFile(data, filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 35,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.capgoal.CapGoal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void resetData(ReadOnlyTranscript newData) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ReadOnlyTranscript getTranscript() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canUndoTranscript() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canRedoTranscript() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void undoTranscript() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void redoTranscript() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void commitTranscript() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        public CapGoal getCapGoal() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        public void updateCapGoal(double capGoal) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        public double getCap() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 63,
      "-": 208,
      "jeremiah-ang": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddModuleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.capgoal.CapGoal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class AddModuleCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        new AddModuleCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void executeModuleAcceptedByModelAddSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        CommandResult commandResult \u003d new AddModuleCommand(validModule)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(String.format(AddModuleCommand.MESSAGE_SUCCESS, validModule),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void executeDuplicateModuleThrowsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        AddModuleCommand addCommand \u003d new AddModuleCommand(validModule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expectMessage(AddModuleCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void resetData(ReadOnlyTranscript newData) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ReadOnlyTranscript getTranscript() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canUndoTranscript() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canRedoTranscript() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void undoTranscript() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void redoTranscript() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void commitTranscript() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        public CapGoal getCapGoal() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateCapGoal(double capGoal) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public double getCap() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * A Model stub that always accept the module being added."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void commitTranscript() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ReadOnlyTranscript getTranscript() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return new Transcript();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 1,
      "alexkmj": 261,
      "jeremiah-ang": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "     * Deletes the first module in {@code model}\u0027s filtered list from {@code model}\u0027s transcript."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public static void deleteFirstModule(Model model) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        Module firstModule \u003d model.getFilteredModuleList().get(0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        model.deleteModule(firstModule);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        model.commitTranscript();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BugEyedBug": 9,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoModuleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstModule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalTranscript;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "public class RedoModuleCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTranscript(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTranscript(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        deleteFirstModule(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        deleteFirstModule(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        model.undoTranscript();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        model.undoTranscript();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        deleteFirstModule(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        deleteFirstModule(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        expectedModel.undoTranscript();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        expectedModel.undoTranscript();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        expectedModel.redoTranscript();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        assertCommandSuccess(new RedoModuleCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "                RedoModuleCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        expectedModel.redoTranscript();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        assertCommandSuccess(new RedoModuleCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "                RedoModuleCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        assertCommandFailure(new RedoModuleCommand(), model, commandHistory, RedoModuleCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BugEyedBug": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoModuleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstModule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalTranscript;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "public class UndoModuleCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTranscript(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTranscript(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        deleteFirstModule(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        deleteFirstModule(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        deleteFirstModule(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        deleteFirstModule(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        expectedModel.undoTranscript();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        assertCommandSuccess(new UndoModuleCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "                UndoModuleCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        expectedModel.undoTranscript();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        assertCommandSuccess(new UndoModuleCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "                UndoModuleCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "        assertCommandFailure(new UndoModuleCommand(), model, commandHistory, UndoModuleCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BugEyedBug": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddModuleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DISCRETE_MATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class AddModuleCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private AddModuleCommandParser parser \u003d new AddModuleCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void parseAllFieldsPresentSuccess() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // leading and trailing whitespace"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getCode().value"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getYear().value"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getSemester().value"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getCredits().value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getGrade().value, new AddModuleCommand(DISCRETE_MATH));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void parseOptionalFieldsMissingSuccess() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(DISCRETE_MATH)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .noGrade()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCompleted(false)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // no grade"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertParseSuccess(parser, DISCRETE_MATH.getCode().value"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getYear().value"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getSemester().value"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \" \" + DISCRETE_MATH.getCredits().value, new AddModuleCommand(expectedModule));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GoalCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class GoalCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private GoalCommandParser parser \u003d new GoalCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void parseValidCommandSuccess() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String userInput \u003d \"4.5\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        GoalCommand expectedCommand \u003d new GoalCommand(4.5);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void parseInvalidNumberFormatFailure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String userInput \u003d \"4.5 3.5\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TranscriptParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.ModuleUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class TranscriptParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final TranscriptParser parser \u003d new TranscriptParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void parseCommandAddModule() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        AddModuleCommand command \u003d (AddModuleCommand) parser.parseCommand(ModuleUtil.getAddModuleCommand(module));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(new AddModuleCommand(module), command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TranscriptTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.testutil.TypicalModules.MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getModulesWithNonGradeAffectingModules;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getModulesWithoutNonGradeAffectingModules;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * Test {@code TranscriptTest} Class"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class TranscriptTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String DELIMITER \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private static final Module GRADE_BMINUS_4MC_A \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCode(\"BMINUSA\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withGrade(\"B-\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private static final Module GRADE_A_4MC_A \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCode(\"AA\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withGrade(\"A\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private static final Module GRADE_A_4MC_B \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCode(\"AB\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withGrade(\"A\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private static final Module INCOMPLETE_4MC_A \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCode(\"INCOMPLETEA\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCompleted(false)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .noGrade()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private static final Module INCOMPLETE_4MC_B \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCode(\"INCOMPLETEB\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCompleted(false)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .noGrade()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private static final Module INCOMPLETE_4MC_C \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCode(\"INCOMPLETEC\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCompleted(false)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .noGrade()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private static final Module INCOMPLETE_5MC_A \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCode(\"INCOMPLETE5A\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCredit(5)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCompleted(false)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .noGrade()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void typicalModulesCapScore() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        List\u003cModule\u003e modules \u003d getModulesWithoutNonGradeAffectingModules();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertCapScoreEquals(modules, MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void calculateCapScoreWithSuModule() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        List\u003cModule\u003e modules \u003d getModulesWithNonGradeAffectingModules();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertCapScoreEquals(modules, MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void calculateTargetGrades() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        List\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            INCOMPLETE_4MC_A,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            INCOMPLETE_4MC_B,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            INCOMPLETE_4MC_C"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double capGoal \u003d 4.0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        List\u003cString\u003e expectedTargetGrades \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            \"B+\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            \"B+\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            \"B+\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTargetGradesEquals(modules, capGoal, expectedTargetGrades);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                INCOMPLETE_4MC_A,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                INCOMPLETE_4MC_B,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                INCOMPLETE_5MC_A,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                INCOMPLETE_4MC_C,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                GRADE_BMINUS_4MC_A"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        capGoal \u003d 4.5;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        expectedTargetGrades \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                \"A\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                \"A\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                \"A\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                \"A-\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTargetGradesEquals(modules, capGoal, expectedTargetGrades);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        capGoal \u003d 5.0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertCapGoalImpossible(modules, capGoal);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                GRADE_BMINUS_4MC_A"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTargetGradesEquals(modules, capGoal, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                INCOMPLETE_4MC_A,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                INCOMPLETE_4MC_B,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                INCOMPLETE_4MC_C,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                GRADE_A_4MC_A,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                GRADE_A_4MC_B"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        capGoal \u003d 4.0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        expectedTargetGrades \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                \"B\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                \"B\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                \"B-\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTargetGradesEquals(modules, capGoal, expectedTargetGrades);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void testTriggersForTargetGradeCalculation() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        Transcript transcript \u003d new Transcript();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        transcript.addModule(GRADE_A_4MC_A);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTargetGradesEquals(transcript, \"\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        transcript.addModule(GRADE_BMINUS_4MC_A);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTargetGradesEquals(transcript, \"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        transcript.setCapGoal(5.0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTargetGradesEquals(transcript, \"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        transcript.addModule(INCOMPLETE_4MC_A);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(transcript.isCapGoalImpossible());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        transcript.setCapGoal(4.0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTargetGradesEquals(transcript, \"B+\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        transcript.addModule(INCOMPLETE_4MC_B);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTargetGradesEquals(transcript, \"B+ B+\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Assert that the modules will have the CAP score of expectedCapScore"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param expectedCapScore"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void assertCapScoreEquals(List\u003cModule\u003e modules, Double expectedCapScore) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        Transcript transcript \u003d new Transcript();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        transcript.setModules(modules);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double cap \u003d transcript.getCap();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertEquals(Double.valueOf(cap), expectedCapScore);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Gets target grades as a delimited String"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param transcript"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private String getTargetGradesStringFromTranscript(Transcript transcript) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ObservableList\u003cModule\u003e targetModules \u003d transcript.getTargetedModulesList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        List\u003cString\u003e targetGrades \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        targetModules.forEach(module -\u003e targetGrades.add(module.getGrade().value));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String targetGradesString \u003d String.join(DELIMITER, targetGrades);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return targetGradesString;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Asserts that the given modules and cap goal will result in expected target grades"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param capGoal"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param expectedTargetGrades"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void assertTargetGradesEquals("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            List\u003cModule\u003e modules, Double capGoal, List\u003cString\u003e expectedTargetGrades) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        Transcript transcript \u003d setUpTranscript(modules, capGoal);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String expectedTargetGradesString \u003d String.join(DELIMITER, expectedTargetGrades);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTargetGradesEquals(transcript, expectedTargetGradesString);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Asserts that the given transcript will result in expected target grades"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param transcript"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param expectedTargetGrades"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void assertTargetGradesEquals(Transcript transcript, String expectedTargetGrades) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String targetGrades \u003d getTargetGradesStringFromTranscript(transcript);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertEquals(targetGrades, expectedTargetGrades);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Sets modules and capGoal of a new Transcript"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param capGoal"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private Transcript setUpTranscript(List\u003cModule\u003e modules, Double capGoal) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        Transcript transcript \u003d new Transcript();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        transcript.setModules(modules);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        transcript.setCapGoal(capGoal);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return transcript;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Asserts that it is impossible to achieve the CapGoal"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param capGoal"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void assertCapGoalImpossible("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            List\u003cModule\u003e modules, Double capGoal) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        Transcript transcript \u003d setUpTranscript(modules, capGoal);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(transcript.isCapGoalImpossible());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 231
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/CodeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class CodeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Code(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidCodeThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String invalidCode \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Code(invalidCode));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid code format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\"\")); // cannot be blank"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\" CS2103\")); // no leading whitespace"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\"CS2103 \")); // no leading whitespace"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\"CS 2103\")); // no whitespace in between"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid code"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Code.isValidCode(\"CS2103\")); // no whitespace"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Code(\"CS2103\").toString().contentEquals(\"CS2103\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Code(\"CS2103\").equals(new Code(\"CS2103\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/CreditTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class CreditTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidCreditThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        int invalidCredit \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Credit(invalidCredit));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidCredit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid code format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Credit.isValidCredit(0)); // must be greater than or equal to 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Credit.isValidCredit(21)); // must be lower than or equal to 20"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Credit.isValidCredit(4)); // credit between 1 and 20"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Credit(4).toString().contentEquals(\"4\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Credit(4).equals(new Credit(4)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/GradeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class GradeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Grade(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidGradeThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String invalidGrade \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Grade(invalidGrade));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidGrade() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid grade format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\" A+\")); // no leading whitespace"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"A+ \")); // no leading whitespace"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"A +\")); // no whitespace in between"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"G\")); // First character has to be A, B, C, D, F"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid grade"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A+\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A-\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B+\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B-\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"C+\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"C\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"D+\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"D\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"F\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"CU\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"CS\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void affectCapValid() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").affectsCap());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A\").affectsCap());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A-\").affectsCap());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B+\").affectsCap());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B\").affectsCap());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B-\").affectsCap());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C+\").affectsCap());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C\").affectsCap());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D+\").affectsCap());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D\").affectsCap());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"F\").affectsCap());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(new Grade(\"CS\").affectsCap());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(new Grade(\"CU\").affectsCap());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void getPointValid() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").getPoint() \u003d\u003d 5);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A\").getPoint() \u003d\u003d 5);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A-\").getPoint() \u003d\u003d 4.5);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B+\").getPoint() \u003d\u003d 4.0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B\").getPoint() \u003d\u003d 3.5);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B-\").getPoint() \u003d\u003d 3.0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C+\").getPoint() \u003d\u003d 2.5);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C\").getPoint() \u003d\u003d 2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D+\").getPoint() \u003d\u003d 1.5);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D\").getPoint() \u003d\u003d 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"F\").getPoint() \u003d\u003d 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").toString().contentEquals(\"A+\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").equals(new Grade(\"A+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void adjustedTargetEqualsValid() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(new Grade(\"A+\").adjustGrade(\"B\").equals(new Grade(\"A+\").adjustGrade(\"B\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(new Grade(\"A+\").targetGrade(\"B\").equals(new Grade(\"A+\").targetGrade(\"B\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertFalse(new Grade().adjustGrade(\"A+\").equals(new Grade(\"A+\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertFalse(new Grade().targetGrade(\"A+\").equals(new Grade(\"A+\")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void gradeStateValid() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(new Grade(\"A\").isComplete());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(new Grade().isIncomplete());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(new Grade().adjustGrade(\"A\").isAdjust());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(new Grade(\"A\").adjustGrade(\"A\").isAdjust());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(new Grade(\"A\").adjustGrade(5).isAdjust());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(new Grade().targetGrade(\"A\").isTarget());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(new Grade(\"A\").targetGrade(\"A\").isTarget());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(new Grade(\"A\").targetGrade(5).isTarget());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void isValidPoint() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(Grade.isValidPoint(5.0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(Grade.isValidPoint(4.0));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(Grade.isValidPoint(3.0));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(Grade.isValidPoint(2.0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(Grade.isValidPoint(1.0));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(Grade.isValidPoint(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(Grade.isValidPoint(0.0));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(Grade.isValidPoint(4.5));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(Grade.isValidPoint(3.5));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(Grade.isValidPoint(2.5));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(Grade.isValidPoint(1.5));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertFalse(Grade.isValidPoint(6.0));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertFalse(Grade.isValidPoint(4.3));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertFalse(Grade.isValidPoint(0.5));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void getGradeValid() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(\"A\".equals(new Grade(5.0).value));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(\"A-\".equals(new Grade(4.5).value));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(\"B+\".equals(new Grade(4.0).value));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(\"B\".equals(new Grade(3.5).value));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(\"B-\".equals(new Grade(3.0).value));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(\"C+\".equals(new Grade(2.5).value));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(\"C\".equals(new Grade(2.0).value));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(\"D+\".equals(new Grade(1.5).value));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(\"D\".equals(new Grade(1.0).value));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue(\"F\".equals(new Grade(0).value));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 89,
      "jeremiah-ang": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DATABASE_SYSTEMS_2MC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DATA_STRUCTURES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DISCRETE_MATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                new Module(null, null, null, null, null, false));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.isSameModule(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different object -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.isSameModule(DISCRETE_MATH));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module editedDataStructures \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCode(DISCRETE_MATH.getCode().value)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.isSameModule(editedDataStructures));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module dataStructuresCopy \u003d new ModuleBuilder(DATA_STRUCTURES).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.equals(dataStructuresCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.equals(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(DISCRETE_MATH));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCode(DISCRETE_MATH.getCode().value)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withYear(DISCRETE_MATH.getYear().value)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different semester -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withSemester(DISCRETE_MATH.getSemester().value)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different credit -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCredit(DATABASE_SYSTEMS_2MC.getCredits().value)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different grade -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withGrade(DISCRETE_MATH.getGrade().value)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different completed -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCompleted(false)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.toString().contentEquals(\"Code: CS2040 Year: 3 Semester: \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \"s1 Credits: 4 Grade: F Completed: true\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void autoFillIsCompletedSuccess() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertTrue((new Module("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                new Code(\"CS2103\"), new Year(1), new Semester(\"1\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                new Credit(4), new Grade(\"A\"))).hasCompleted());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertFalse((new Module("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                new Code(\"CS2103\"), new Year(1), new Semester(\"1\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                new Credit(4), new Grade())).hasCompleted());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertFalse((new Module("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                new Code(\"CS2103\"), new Year(1), new Semester(\"1\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                new Credit(4), new Grade().adjustGrade(\"A\"))).hasCompleted());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertFalse((new Module("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                new Code(\"CS2103\"), new Year(1), new Semester(\"1\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                new Credit(4), new Grade().targetGrade(\"A\"))).hasCompleted());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 3,
      "alexkmj": 98,
      "jeremiah-ang": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/SemesterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class SemesterTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidYearThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Semester(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidSemester() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid semester format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"s3\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"3\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid semester"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_ONE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_TWO));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_SPECIAL_ONE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_SPECIAL_TWO));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Semester(Semester.SEMESTER_ONE).toString().contentEquals(Semester.SEMESTER_ONE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Semester(Semester.SEMESTER_ONE).equals(new Semester(Semester.SEMESTER_ONE)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/UniqueModuleListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DATA_STRUCTURES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DISCRETE_MATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void containsNullModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void containsModuleNotInListReturnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(uniqueModuleList.contains(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void containsModuleInListReturnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(uniqueModuleList.contains(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addNullModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addDuplicateModuleThrowsDuplicateModuleException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleNullTargetModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(null, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleNullEditedModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleTargetModuleNotInListThrowsModuleNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(ModuleNotFoundException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleIsSameModuleSuccess() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleHasSameIdentitySuccess() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module editedDataStructures \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCode(DISCRETE_MATH.getCode().value)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, editedDataStructures);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(editedDataStructures);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleHasDifferentIdentitySuccess() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DISCRETE_MATH);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleHasNonUniqueIdentityThrowsDuplicateModuleException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DISCRETE_MATH);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeNullModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.remove(null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeModuleDoesNotExistThrowsModuleNotFoundException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(ModuleNotFoundException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.remove(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeExistingModuleRemovesModule() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.remove(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesNullUniqueModuleListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules((UniqueModuleList) null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesUniqueModuleListReplacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesNullListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules((List\u003cModule\u003e) null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesListReplacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(DISCRETE_MATH);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesListWithDuplicateModuleThrowsDuplicateModuleException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(DATA_STRUCTURES, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules(listWithDuplicateModules);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void asUnmodifiableObservableListModifyListThrowsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 1,
      "alexkmj": 178
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/YearTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class YearTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Year(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidYearThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Year(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Year(\"0\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidYear() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid year format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Year.isValidYear(0)); // year must be at least 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Year.isValidYear(6)); // year must be 5 or below"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Year.isValidYear(10)); // only 1 digit allowed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid year format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(1)); // year 1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(2)); // year 2"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(3)); // year 3"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(4)); // year 4"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(5)); // year 5"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Year(1).toString().contentEquals(\"1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Year(1).equals(new Year(1)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void hashCodeValid() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Year(1).hashCode() \u003d\u003d \"1\".hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTranscriptStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTranscriptWithModules;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public class JsonTranscriptStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DISCRETE_MATH \u003d new ModuleBuilder().withCode(\"CS1231\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(1)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module PROGRAMMING_METHODOLOGY_TWO \u003d new ModuleBuilder().withCode(\"CS2030\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_TWO)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"B\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATA_STRUCTURES \u003d new ModuleBuilder().withCode(\"CS2040\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(3)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_SPECIAL_ONE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"F\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module SOFTWARE_ENGINEERING \u003d new ModuleBuilder().withCode(\"CS2103\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(3)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATABASE_SYSTEMS \u003d new ModuleBuilder().withCode(\"CS2102\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATABASE_SYSTEMS_2MC \u003d new ModuleBuilder().withCode(\"CS2102\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(2)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTranscriptStorageTest\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readTranscript_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readTranscript(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private Optional\u003cReadOnlyTranscript\u003e readTranscript(String filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return new JsonTranscriptStorage(Paths.get(filePath)).readTranscript(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String transcriptFileInTestDataFolder) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return transcriptFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(transcriptFileInTestDataFolder)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertFalse(readTranscript(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void read_emptyTranscript_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readTranscript(\"EmptyTranscript.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readTranscript(\"NotJsonFormatTranscript.json\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readTranscript_invalidModuleTranscript_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readTranscript(\"InvalidTranscript.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readTranscript_invalidAndValidModuleTranscript_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readTranscript(\"InvalidAndValidTranscript.json\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readTranscript_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript expected \u003d getTranscriptWithModules("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                DATABASE_SYSTEMS, DISCRETE_MATH, SOFTWARE_ENGINEERING, PROGRAMMING_METHODOLOGY_TWO);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript actual \u003d new Transcript(readTranscript(\"ExtraValuesTranscript.json\").get());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readTranscript_typicalTranscript_noException() throws DataConversionException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript typical \u003d new Transcript(readTranscript(\"TypicalTranscript.json\").get());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readAndSaveTranscript_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempTranscript.json\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript original \u003d getTranscriptWithModules(DISCRETE_MATH, PROGRAMMING_METHODOLOGY_TWO, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        JsonTranscriptStorage jsonTranscriptStorage \u003d new JsonTranscriptStorage(filePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        jsonTranscriptStorage.saveTranscript(original, filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        ReadOnlyTranscript readBack \u003d jsonTranscriptStorage.readTranscript(filePath).get();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertEquals(original, new Transcript(readBack));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        original.addModule(SOFTWARE_ENGINEERING);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        original.removeModule(DISCRETE_MATH);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        jsonTranscriptStorage.saveTranscript(original, filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readBack \u003d jsonTranscriptStorage.readTranscript(filePath).get();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertEquals(original, new Transcript(readBack));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        original.addModule(DATABASE_SYSTEMS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        jsonTranscriptStorage.saveTranscript(original); //file path not specified"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readBack \u003d jsonTranscriptStorage.readTranscript().get(); //file path not specified"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertEquals(original, new Transcript(readBack));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript_nullTranscript_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        saveTranscript(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Saves {@code Transcript} at the specified {@code filePath}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private void saveTranscript(ReadOnlyTranscript transcript, String filePath) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            new JsonTranscriptStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                    .saveTranscript(transcript, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        saveTranscript(new Transcript(), null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalTranscript;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.events.model.TranscriptChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        JsonTranscriptStorage transcriptStorage \u003d new JsonTranscriptStorage(getTempFilePath(\"transcript\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, transcriptStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         * More extensive testing of addressbook saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")), new JsonTranscriptStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void transcriptReadSave() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         * {@link JsonTranscriptStorage} class."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         * More extensive testing of transcript saving/reading is done in {@link JsonTranscriptStorageTest} class."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript original \u003d getTypicalTranscript();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        storageManager.saveTranscript(original);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        ReadOnlyTranscript retrieved \u003d storageManager.readTranscript().get();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertEquals(original, new Transcript(retrieved));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void getTranscriptFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertNotNull(storageManager.getTranscriptFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void handleTranscriptChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        // Create a StorageManager while injecting a stub that throws an exception when the save method is called"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                new JsonTranscriptStorageExceptionThrowingStub(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        storage.handleTranscriptChangedEvent(new TranscriptChangedEvent(new Transcript()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * An addressbok stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * A transcript stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    class JsonTranscriptStorageExceptionThrowingStub extends JsonTranscriptStorage {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        public JsonTranscriptStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        public void saveTranscript(ReadOnlyTranscript transcript, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 53,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static String getAddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return AddModuleCommand.COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(module.getCode().value + \" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(module.getYear().value + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(module.getSemester().value + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(module.getCredits().value + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(module.getGrade().value + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModules.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "//@@author alexkmj"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Double MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP \u003d 3.0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module DISCRETE_MATH \u003d new ModuleBuilder().withCode(\"CS1231\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(1)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module PROGRAMMING_METHODOLOGY_TWO \u003d new ModuleBuilder().withCode(\"CS2030\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_TWO)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"B+\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module DATA_STRUCTURES \u003d new ModuleBuilder().withCode(\"CS2040\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(3)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_SPECIAL_ONE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"F\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module ASKING_QUESTIONS \u003d new ModuleBuilder().withCode(\"GEQ1000\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"CS\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module SOFTWARE_ENGINEERING \u003d new ModuleBuilder().withCode(\"CS2103\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(3)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module DATABASE_SYSTEMS \u003d new ModuleBuilder().withCode(\"CS2102\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module DATABASE_SYSTEMS_2MC \u003d new ModuleBuilder().withCode(\"CS2102B\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(2)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Prevents instantiation"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private TypicalModules() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an {@code Transcript} given modules as arguments."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Transcript getTranscriptWithModules(Module... modules) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Transcript tr \u003d new Transcript();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            tr.addModule(module);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return tr;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an {@code Transcript} with all the typical persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static Transcript getTypicalTranscript() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Transcript tr \u003d new Transcript();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            tr.addModule(module);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return tr;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DISCRETE_MATH,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                PROGRAMMING_METHODOLOGY_TWO,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                DATA_STRUCTURES));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * A list of modules that affects the cap"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static List\u003cModule\u003e getModulesWithoutNonGradeAffectingModules() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DISCRETE_MATH,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                PROGRAMMING_METHODOLOGY_TWO,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                DATA_STRUCTURES));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * A list of modules that might not affect the cap"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static List\u003cModule\u003e getModulesWithNonGradeAffectingModules() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e affectingModules \u003d getModulesWithoutNonGradeAffectingModules();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e nonAffectingModules \u003d new ArrayList\u003c\u003e(Arrays.asList(ASKING_QUESTIONS));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        affectingModules.addAll(nonAffectingModules);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return affectingModules;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    // TODO: getTypicalAddressBook()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 2,
      "alexkmj": 127
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //TODO: Remove addressbook initial data"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        testApp \u003d setupHelper.setupApplication("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                this::getInitialData, getDataFileLocation(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                this::getInitialTranscriptData, getTranscriptDataFileLocation());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    //TODO: Remove"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns the transcript data to be loaded into the file in {@link #getTranscriptDataFileLocation()}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    protected Transcript getInitialTranscriptData() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return TypicalModules.getTypicalTranscript();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    //TODO: Remove"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns the directory of the transcript data file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    protected Path getTranscriptDataFileLocation() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return TestApp.SAVE_TRANSCRIPT_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 26,
      "-": 262
    }
  },
  {
    "path": "src/test/java/systemtests/CapCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.CapCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class CapCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void cap() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         * Empty system should show cap \u003d 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        executeCommand(CapCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double cap \u003d 0.0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", String.format(CapCommand.MESSAGE_SUCCESS, cap), getModel());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 19
    }
  },
  {
    "path": "src/test/java/systemtests/GoalCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * System test for Goal Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class GoalCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void setGoalSuccess() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        /* Case: Set goal with valid value"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         * -\u003e goal command handled correctly"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double newGoal \u003d 4.5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertGoalSuccess(newGoal);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        newGoal \u003d 5.0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertGoalSuccess(newGoal);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void setGoalFailure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        /* Case: Set goal with valid value"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         * -\u003e goal command handled correctly"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double newGoal \u003d -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertGoalFailure(newGoal);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Assert that the given goal would result in a failure action."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param goal"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void assertGoalFailure(double goal) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertCommandFailure(getCommandString(goal), getModel(), expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Assert that the given goal would result in a successful action."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param goal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void assertGoalSuccess(double goal) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String expectedResultMessage \u003d String.format(GoalCommand.MESSAGE_SUCCESS, goal);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertCommandSuccess(getCommandString(goal), getModel(), expectedResultMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private String getCommandString(double goal) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return GoalCommand.COMMAND_WORD + \" \" + goal;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Assert given command would be successful"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param expectedModel"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param expectedResultMessage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void assertCommandFailure(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 73
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyAddressBook\u003e addressBook, Path saveFileLocation,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                                    Supplier\u003cReadOnlyTranscript\u003e transcript, Path saveTranscriptFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                    testApp \u003d new TestApp(addressBook, saveFileLocation,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                            transcript, saveTranscriptFileLocation));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 18,
      "-": 60
    }
  }
]
