[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d SocialCare"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W16-2/main[image:https://travis-ci.org/CS2103-AY1819S1-W16-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "https://ci.appveyor.com/project/Kratious/main[image:https://ci.appveyor.com/api/projects/status/suon744fyw9kqi3x?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W16-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W16-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* SocialCare is a social welfare event and volunteer management system. It is a desktop application and  has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* It is *written in OOP fashion*, and is morphed from the https://se-edu.github.io/docs/Team.html[se-edu] team\u0027s https://github.com/nus-cs2103-AY1819S1/addressbook-level4[Address Book - Level 4], which provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC) than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* This application is intended for social welfare organisations that want to better manage their volunteers \u0026 events, and export volunteer certificates."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* SocialCare allows users to:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Manage contacts and events faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Use tags to categorize events and volunteers."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Manage additional volunteer data, such as number of service hours per volunteer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": "** Export volunteer certificates detailing each volunteer\u0027s involvement in the organisation\u0027s events."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* This application is based on https://github.com/nus-cs2103-AY1819S1/addressbook-level4[Address Book - Level 4] developed by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "the https://se-edu.github.io/docs/Team.html[se-edu] team."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Kratious": 7,
      "iMarbles": 4,
      "sharan8": 4,
      "-": 26
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharan8"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharan8"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharan8"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"githubId\": \"afiqlattif\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"displayName\": \"MUHAM...ATTIF\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      \"authorNames\": [\"afiqlattif\", \"Afiq Lattif\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"githubId\": \"Scrubbius\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"displayName\": \"NGOH ...N JUN\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"authorNames\": [\"Scrubbius\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"githubId\": \"Kratious\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"displayName\": \"SEM J...G HAN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"authorNames\": [\"Kratious\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"githubId\": \"sharan8\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"displayName\": \"THANG...HARAN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"authorNames\": [\"sharan8\", \"Sharan\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"githubId\": \"iMarbles\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"displayName\": \"YEO Y...MABEL\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharan8"
        },
        "content": "      \"authorNames\": [\"iMarbles\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharan8"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharan8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 1,
      "sharan8": 29
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    compile \u0027org.apache.pdfbox:pdfbox:2.0.2\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u0027site-name\u0027: \u0027SocialCare\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W16-2/main\u0027"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 2,
      "sharan8": 2,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003d\u003d\u003d Afiq Lattif"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::afiqlattif.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "{empty}[https://github.com/afiqlattif[github]] [\u003c\u003cafiqlattif#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Responsibilities: Volunteer Management Feature"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Sem Jing Han"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::kratious.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/kratious[github]] [\u003c\u003csemjinghan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Responsibilities: Event Management Feature"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Amabel Yeo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::imarbles.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "{empty}[https://github.com/iMarbles[github]] [\u003c\u003camabelyeo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Responsibilities: Assignment of Volunteers Feature"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Thangavel Sharan"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::sharan8.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "{empty}[https://github.com/sharan8[github]] [\u003c\u003cthangavelsharan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Responsibilities: Statistics Feature"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Ngoh Wen Jun"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "image::yl_coder.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "{empty}[https://github.com/Scrubbius[github]] [\u003c\u003cngohwenjun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Responsibilities: Data Management Feature"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 19,
      "afiqlattif": 1,
      "-": 32
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d SocialCare - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W16-2/main/blob/master/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "By: `Team W16-2`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharan8"
        },
        "content": "Welcome to SocialCare\u0027s Developer Guide!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d\u003d What is SocialCare?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharan8"
        },
        "content": "SocialCare is a CLI-based event and volunteer management system designed for social welfare organisations. It enables the following:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* Faster volunteer and event management (than a typical mouse/GUI driven app)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* Tagging to categorize volunteers and events."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* Managing additional volunteer data, such as number of service hours per volunteer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* Viewing of volunteer and event statistics."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Core team"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharan8"
        },
        "content": "SocialCare was developed and is maintained by https://github.com/CS2103-AY1819S1-W16-2[Team W16-2]. Due credit goes to the https://se-edu.github.io/docs/Team.html[se-edu] team, whose application https://github.com/nus-cs2103-AY1819S1/addressbook-level4[Address Book - Level 4] was morphed into SocialCare."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharan8"
        },
        "content": "Feel free to \u003c\u003cContactUs#, reach out\u003e\u003e to us regarding any enquiries or clarifications."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d\u003d Contributing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharan8"
        },
        "content": "SocialCare is an open source project, and thus contributions are always welcome. Let\u0027s get you on board!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharan8"
        },
        "content": "To get started, head on to \u003c\u003cSetting-Up\u003e\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[[Setting-Up]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d Setting Up"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "This section will describe the steps to successfully set up the project on your computer."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Before setting up your project, you will need:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "* *JDK `9`* or later."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "* *IntelliJ* IDE."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Here are the steps to set up the project in your computer:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". link:https://github.com/CS2103-AY1819S1-W16-2/main[Fork] this repo, and clone the fork to your computer."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ".. Click `New...` and find the directory of the JDK."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Click `Import Project`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Click `Open as Project`."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "+"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "To resolve this, place your cursor over any of the code section highlighted in red."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "To verify that you have successfully set up your project on your computer, you must:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "* Run the `seedu.address.MainApp` and try a few commands."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "* \u003c\u003cTesting,Run the tests\u003e\u003e and ensure that they all pass."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Before you can start writing some code for your project, you must first set up the configurations for your project."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify this issue, you must:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Click on the `Imports` tab to set the order."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Set `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027` to `999` to prevent IntelliJ from contracting the import statements."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Set the order of `Import Layout` to `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports` and add a `\u003cblank line\u003e` between each `import`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "+"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "When you are ready to start coding, you should:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "* Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "* Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "This section will describe the design architecture and the various components of the system."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "This section describes the design architecture used by the system."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Architecture diagram"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Events-driven nature of the design"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare uses an event-driven architecture style. +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The figure below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how an event-driven approach helps us to reduce direct coupling between components."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Components"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "There are *6* main components: `Main`, `Commons`, `UI`, `Logic`, `Model`, and `Storage`. +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Given below is a brief overview of each component."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c\u003cDesign-Main,*`Main`*\u003e\u003e is the starting point of the system, which encapsulates the other components."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple components."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c\u003cDesign-Ui,*`UI`*\u003e\u003e contains the user interface classes used by the application."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e used to execute user commands. It is also known as the command executor."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c\u003cDesign-Model,*`Model`*\u003e\u003e holds the data of the application in-memory."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e which allows reading and writing of data to the hard disk."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "For the `UI`, `Logic`, `Model` and `Storage` components they:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Define their _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Expose their functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kratious"
        },
        "content": "For example, the `Logic` component (see the figure given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Class diagram of the Logic component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[Design-Main]]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Main component"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* At app launch: Initializing the components in the correct sequence, and connecting them up with each other."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* At shut down: Shutting down the components and invoking cleanup methods where necessary."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Commons component"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`Commons` has classes used by multiple components. The classes are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by the different components to communicate with other components using events. (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `LogsCenter` : Used by the classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `UI` component contains classes which are responsible for displaying the user interface of the system. The figure below shows the structure of the `UI` component."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Structure of the UI component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `UI` component consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherits from the abstract `UiPart` class."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `UI` component does the following:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can automatically update when data in the `Model` changes."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `Logic` component contains classes which are needed to execute user commands. The figure below shows the structure of the `Logic` component"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Structure of the Logic component"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The flow for the `Logic` component is as follows:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ". `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ". The `Command` object (which is automatically created in the previous step) is executed by the `LogicManager`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ". The executed `Command` affects the `Model` (e.g. adding a volunteer) and/or raise events."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ". The result of the command execution from the previous step is encapsulated as a `CommandResult` object."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ". The `CommandResult` object is passed back to the `UI` component."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The figure below shows the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Interactions inside the Logic component for the `delete 1` command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `Model` component contains classes which are responsible for managing the data of the application. The figure below shows the structure of the `Model` component."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `Model` component does the following:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Stores the Address Book data."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Exposes an unmodifiable `ObservableList\u003cObject\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list changes."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Note that the `Model` component does not depend on any of the other components."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Kratious"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `SocialCare`, which `Volunteer` can reference. This would allow `SocialCare` to only require one `Tag` object per unique `Tag`, instead of each `Volunteer` needing their own `Tag` object. +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Kratious"
        },
        "content": "An example of how such a model may look like is given in the figure below. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".Example of a more OOP Model"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Kratious"
        },
        "content": "image::ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `Storage` component contains classes which enables the reading/writing of data to the hard disk. The figure below shows the structure of the `Storage` component."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `Storage` component does the following:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* saves `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* saves the system data in xml format and read it back."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d General"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Kratious"
        },
        "content": "This section describes the details on how the general features are implemented."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "//tag::command-switch[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[Implementation-Switch]]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Switch command"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `switch` command is used to switch the context between \u0027volunteer\u0027 and \u0027event\u0027."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "This `switch` command requires the `SwitchCommandParser` class to parse user input and help determine the context to switch to. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`SwitchCommandParser` implements the `Parser` class which has the `Parser#parse()` operation. This operation will throw an error if the user input does not match the command format or is an invalid context to switch to."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "There are only 2 valid contexts which a user can switch to with the command. +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "v: \u0027volunteer\u0027 context +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e: \u0027event\u0027 context"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `switch` command updates the context found in `ModelManager` before raising the context change event to update the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The figure below is the sequence diagram to show how the `switch` command works when switching from volunteer to event context."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Simplified sequence diagram of switch command"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_switch_sd.png[switch SD, 800]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: How context is maintained"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* **Alternative 1 (current choice):** Create a new `Context` class."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "+"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|Pros| Can support even more contexts in the future due to the flexibility of a class."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|Cons| Tedious to do as relevant methods have to be implemented in model."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "+"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* **Alternative 2:** Pass a hard-coded context id around."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "+"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|Pros| No need to create a new object to handle the context."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|Cons| Difficult to maintain the id throughout the whole application. Any change in context id would require all the codes to be updated."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "+"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "// end::command-switch[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th volunteer in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new volunteer. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Step 4. The user now decides that adding the volunteer was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The following figure shows how the undo operation works:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".Sequence diagram of undo operation"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The following figure summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".Activity diagram of new command execution"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* **Alternative 1 (current choice):** Save the entire address book."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Kratious"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Pros*| Implementation is easy."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Cons*| May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Kratious"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Pros*| Use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Cons*| Must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Kratious"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Pros*| Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Cons*| Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Kratious"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Pros*| We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Cons*| Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file. (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* `SEVERE` : Designates critical error events which may possibly cause the termination of the application."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* `WARNING` : Designates potentially harmful events which can be continued from, but with caution."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* `INFO` : Designates informational events that highlight noteworthy actions by the application."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* `FINE` : Designates event details that are not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Volunteer management"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Kratious"
        },
        "content": "This section describes the details on how the volunteer management features are implemented."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sharan8"
        },
        "content": "// tag::exportcert[]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d\u003d\u003d Export Volunteer Certificate"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sharan8"
        },
        "content": "The `exportcert` command enables the volunteer manager to export a PDF document detailing a volunteer\u0027s involvement with the organisation."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sharan8"
        },
        "content": "This is only possible when in the \u0027volunteer\u0027 context. The information included in the certificate are as follows:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Title: \u0027Certificate of Recognition\u0027"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Date of export"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Volunteer name"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Volunteer ID"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* List of events involved in - Event name, hours contributed, event start and event end dates"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "sharan8"
        },
        "content": "Currently, the certificate will be exported to either of these two locations:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Folder named \u0027Certs\u0027 in the user\u0027s current working directory (next to jar file)"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Direct to Desktop (if permission not allowed for the above)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "sharan8"
        },
        "content": "This is what the exported PDF certificate currently looks like:"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "sharan8"
        },
        "content": ".Current form of exported volunteer certificate"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[.thumb]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "sharan8"
        },
        "content": "image::CurrentVolunteerCert.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "sharan8"
        },
        "content": "The following steps were involved in this feature\u0027s implementation:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sharan8"
        },
        "content": "1. Support for accepting `exportcert` command."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Added an ExportCertCommand class that extends Command."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Modified AddressBookParser class to accept an ExportCertCommand."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sharan8"
        },
        "content": "2. Support for accepting arguments as part of the command."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Modified ExportCertCommand class to take in an Index."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Added an ExportCertCommandParser class that parses the Index argument."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Modified the AddressBookParser to use the ExportCertCommandParser."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sharan8"
        },
        "content": "3. Retrieve the right volunteer based on the given Index."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Interact with the model to retrieve the filtered volunteer list."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Get the Volunteer at the specified Index."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sharan8"
        },
        "content": "4. Retrieve information on the events that this volunteer has been involved in, if any."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Interact with the model to get the filtered record list, and filter the record list further to find the records with the volunteer\u0027s ID."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Retrieve the event IDs from the relevant filtered records, along with the hours contributed."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Get the Event that corresponds to the event ID, and retrieve its name, startDate and endDate for input into the certificate."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sharan8"
        },
        "content": "5. Use Apache PDFBox to create and export a volunteer certificate with the information retrieved."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Involves the creation of a new https://pdfbox.apache.org/docs/2.0.2/javadocs/index.html?org/apache/pdfbox/pdmodel/PDDocument.html[PDDocument],"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sharan8"
        },
        "content": "with a https://pdfbox.apache.org/docs/2.0.2/javadocs/org/apache/pdfbox/pdmodel/PDPage.html[PDPage] to write the content to."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* A https://pdfbox.apache.org/docs/2.0.2/javadocs/org/apache/pdfbox/pdmodel/PDPageContentStream.html[PDPageContentStream] is then used to write the information to a page content stream."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Medium of presentation"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* *Alternative 1 (current choice):* Export as PDF"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Pros*| Exports volunteer details in a convenient format for immediate use and distribution."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Cons*| PDF template has to be preset within the application."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* *Alternative 2:* Display volunteer data in a window within the application"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Pros*| Allows the volunteer manager flexibility as to what to do with the volunteer details. This could include manually inputting it into an existing certificate creation application, or a document template."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Cons*| Requires more manual work on the volunteer manager\u0027s side, especially when the process can be automated to enhance his/her productivity. Certificate templates are also infrequently updated, and thus the costs in terms of efficiency outweigh the benefits in terms of flexibility."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Choice of PDF creation tool"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* *Alternative 1 (current choice):* Apache PDFBox"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Pros*| Open source, offers more specific functionality for PDFs than Apache FOP, and covers all of the pdf creation and manipulation functionality required for this feature."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Cons*| Not the most efficient for creating PDFs (refer to http://abhishekkumararya.blogspot.com/2013/09/comparison-of-java-based-pdf-generation.html[this comparison study])."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* *Alternative 2:* Apache FOP"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Pros*| Open source, allows for conversion and formatting of XML data to PDF."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Cons*| Resource intensive, not the most efficient for PDF creation, and lacks features such as updating and merging PDFs."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* *Alternative 3:* iText"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Pros*| Fastest of the lot for PDF generation (refer to http://abhishekkumararya.blogspot.com/2013/09/comparison-of-java-based-pdf-generation.html[this comparison study])."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Cons*| Now only available as a free trial, and requires a license for extended use."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "+"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Choice of additional details for identifying volunteer from certificate"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* **Alternative 1 (current choice):** Use Volunteer\u0027s NRIC"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Pros*| Is unique to each volunteer and can be recovered easily, given the volunteer\u0027s name or other personal information. It also adds credibility to the exported volunteer certificate."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Cons*| Requires more space as each NRIC can be represented as string of length 9 or a 7-digit integer."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* **Alternative 2:** Use a Volunteer ID"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Pros*| Shorter than NRIC and still serves the purpose, and can be auto-incremented."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Cons*| Hard to recover, even if additional information about the volunteer is provided. Would also be meaningless to a third person to whom the certificate is presented for verification purposes."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Choice of export location"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* **Alternative 1 (current choice):** Create a folder in the user\u0027s current working directory"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Pros*| Putting the files relative to where the app is allows the user to locate, manage and access the exports easily as this is a portable app. The app jar and the exported files can be shifted to different locations together easily as well."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Cons*| The user would have to navigate to this directory if he/she wishes to access the files independent of using the application."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* **Alternative 2 (also part of current choice, if no permission for 1):** Export to the user\u0027s Desktop"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Pros*| Easy to access files when not using the application."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|*Cons*| As it is a portable app, it may be cumbersome to keep navigating to the Desktop to access the exports when using the application. It also becomes harder to move the app jar and exports together from place to place."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "sharan8"
        },
        "content": "+"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "sharan8"
        },
        "content": "// end::exportcert[]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Kratious"
        },
        "content": "// tag::eventmanagement[]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Event management"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Kratious"
        },
        "content": "This section describes the details on how the event management features are implemented."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d Auto-incremented event ID"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The auto-incremented event ID field is used by the `Record` class to identify unique events. An integer ID field is used because"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Kratious"
        },
        "content": "identifying unique events based on multiple String fields would be computationally inefficient."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The auto-incremented event ID field is facilitated by the `Event` class. The `Event` class"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Kratious"
        },
        "content": "keeps track of the highest ID in the system. Additionally, it implements two different constructors for different situations:"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* `Event(Name name, Location location, Date startDate, Date endDate,"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    Time startTime, Time endTime, Description description, Set\u003cTag\u003e tags)`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Kratious"
        },
        "content": "This constructor is used when an event, initialised as a new `Event` object, does not yet exist in the system (e.g. adding a new event)."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Kratious"
        },
        "content": "It increments the current highest event ID in the system and assigns that value to the new event that is created."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* `Event(EventId eventId, Name name, Location location, Date startDate, Date endDate,"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    Time startTime, Time endTime, Description description, Set\u003cTag\u003e tags)`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Kratious"
        },
        "content": "This constructor is used when an event, initialised as a new `Event` object, already exists in the system (e.g. loading data from XML file or editing an existing event)."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Kratious"
        },
        "content": "It checks whether the ID of the event being initialised is greater than the current highest ID in the system. If it is, replace the value of"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Kratious"
        },
        "content": "the highest ID with the event ID and creates the event. If it isn\u0027t, skip to the creation of the event."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: How event ID is generated"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* *Alternative 1 (current choice):* Increment from highest event ID"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Kratious"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Pros*| Implementation is easy."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Cons*| Maintained highest event ID may be susceptible to overwrite and become desynchronised."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* *Alternative 2:* Randomly generated unique event ID"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Kratious"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Pros*| Not dependent on a maintained highest event ID variable (single point of failure)."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|*Cons*| Requires keeping track of all existing event IDs to ensure uniqueness."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Kratious"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d Delete event [Coming in V1.3]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Kratious"
        },
        "content": "// end::eventmanagement[]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Record management"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Kratious"
        },
        "content": "This section describes the details on how the record management features are implemented."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "//tag::command-manage[]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[Implementation-Manage]]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Manage command"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `manage` command is used in the \u0027event\u0027 context to manage the volunteering records for an event. +"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "This `manage` command requires the `ManageCommandParser` class to parse user input and determine which event to manage. +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`ManageCommandParser` implements the `Parser` class which has the `Parser#parse()` operation. This operation will throw an error if the user input is an invalid event id."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `manage` command updates the context found in `ModelManager` through the `model#switchToRecordContext()` function. +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "In addition to updating the context, the `manage` command also does the following:"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Clear all predicates for volunteer list."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Filter the existing records by the selected event."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Raise a `RecordChangeEvent` to set the selected event."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Raise a `ContextChangeEvent` to update the UI."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The figure below is the sequence diagram to show how the `switch` command works when switching from volunteer to event context."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Simplified sequence diagram for manage command"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_manage_sd.png[manage SD, 800]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Context switching"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* **Alternative 1 (current choice):** Utilize `Context` class used in the `switch` function. (See \u003c\u003cImplementation-Switch\u003e\u003e)"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "+"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|Pros| No need to create a new class to change context."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|Cons| Have to create a new method in `Context` class to handle parsed user input."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "+"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* **Alternative 2:** Pass event and volunteer objects via `LogicManager`."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "+"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|Pros| Implementation is easy."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|Cons| Classes becomes tightly coupled. The UI component would have access to methods it does not need."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "+"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "//end::command-manage[]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Editing documentation"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Publishing documentation"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Converting documentation to PDF format"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Site-wide documentation settings"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Per-file documentation settings"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Site template"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "Testing is done to verify how the application runs, responds and process commands given by the Admin, to check if the app runs with its intended behavior."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Running tests"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Troubleshooting testing"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Build automation"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Continuous integration"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Coverage reporting"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Documentation previews"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Making a release"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "Here are the steps to create a new release:"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Managing dependencies"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than the following alternatives: +"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "1) Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "2) Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/volunteer/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a volunteer, and link:{repoURL}/src/main/java/seedu/address/model/volunteer/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each volunteer, and remove the `tag` from each volunteer."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last volunteer in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Use different colors for different tags inside volunteer cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Edits the remark for a volunteer specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Edits the remark for the first volunteer to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Removes the remark for the first volunteer."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step instructions"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each volunteer later."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/volunteer/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/volunteer/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/volunteer/Person.java[`Person`]."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/volunteer/Person.java[`Person`]."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the volunteer will be created without a remark)."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/volunteer/Person.java[`Person`]."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the volunteer that it is currently building."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a volunteer."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d\u003d Full solution"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* has a need to manage a significant number of volunteers and social welfare events"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "sharan8"
        },
        "content": "*Value proposition*: manage volunteers and events faster than a typical mouse/GUI driven app, and derive insights from them"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"21%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* * *` |new manager |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* * *` |manager |register a new volunteer |begin tracking their volunteer work \u0026 hours"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* * *` |manager |view a volunteer\u0027s details |track their volunteer work \u0026 hours"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* * *` |manager |update volunteer details |keep their details updated for administrative \u0026 other purposes"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* *` |manager |archive volunteer details |stash away unnecessary volunteer records, yet have the option of restoring them if needed"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* *` |manager |restore volunteer record |restore volunteer details that were archived"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* * *` |manager |delete volunteer record |permanently remove volunteer record from database"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* *` |manager |import volunteer record details |add multiple volunteer data into the database"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`*` |manager |export volunteer record details |have a backup of the volunteer records"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* * *` |manager |create new event |have a record of the event details"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* * *` |manager |update event details |ensure that event details are kept up to date"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* * *` |manager |view event details |verify the details of the event"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* * *` |manager |delete event details |remove the event from the list if event details were entered wrongly or cancelled"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* *` |manager |archive event details |stash away event records yet have the option of restoring them"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* *` |manager |restore event details |restore event details that were archived"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* *` |manager |import event data |add multiple events at once"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`*` |manager |export event data |have a backup of event details"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* * *` |manager |add volunteer hours to volunteer profiles |keep track of the number of hours spent by the volunteer volunteering"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* * *` |manager |edit volunteer hours in volunteer profiles |maintain accuracy of information pertaining to volunteer work"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`*` |manager |export certification document from volunteers’ data |provide volunteers with official acknowledgement of service rendered to organization"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* *` |manager |view spread of volunteers across events |determine which are the more popular events"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* *` |manager |view demographics of volunteers |know what my volunteer profiles are like"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|`* *` |manager |auto-complete commands |execute commands more efficiently"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"100%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Use Cases"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "a|*UC01:* Register new volunteer +"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Actor:* Admin +"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Precondition(s):* Admin is logged in +"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Guarantee(s):*"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "* New user will be created only if data entered is valid and there is sufficient memory space to store the new user +"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    . Admin chooses to add a new volunteer"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    . Application requests for details of the volunteer"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    . Admin enters and submits the requested details"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    . Application creates the volunteer and notifies Admin of success +"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    Use case ends. +"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Extensions:* +"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    * 3a. The entered data is invalid"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    ** 3a1. Application shows an error message that the entered data is invalid +"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    Use case resumes from step 3."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "a|*UC02:* View volunteer details +"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Actor:* Admin +"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Precondition(s):* Admin is logged in +"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Guarantee(s):* +"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    . Admin requests to list all volunteers"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    . Application displays a list of all volunteers"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    . Admin requests to view a volunteer profile at a specific index in the list"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    . Application displays the volunteer profile +"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    Use case ends. +"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    * 2a. The volunteer list is empty"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    ** 2a1. Application shows an error message that volunteer list is empty +"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    * 3a. The given index is invalid"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    ** 3a1. Application shows an error message that the index given is invalid +"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "a|*UC03:* Update volunteer details +"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Actor:* Admin +"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Precondition(s):* Admin is logged in +"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Guarantee(s):* +"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Admin requests to list all volunteers"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Application displays a list of all volunteers"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Admin enters the index and updated details of the volunteer to be changed"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Application updates the volunteer details and notifies of the successful update +"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      Use case ends. +"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    * 2a. The volunteer list is empty"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    ** 2a1. Application shows an error message that volunteer list is empty +"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    * 3a. The given index is invalid"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    ** 3a1. Application shows an error message that the index given is invalid +"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    * 3b. The given details are invalid"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    ** 3b1. Application shows an error message that the details given are invalid +"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "a|*UC04:* Delete volunteer record +"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Actor:* Admin +"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Precondition(s):* Admin is logged in +"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Guarantee(s):* +"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "  * Volunteer record will be deleted only if index specified is valid +"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Admin requests to list all volunteers"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Application displays a list of all volunteers"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Admin requests to delete a volunteer at a specific index in the list"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Application deletes the volunteer"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Application displays a successful deletion message to Admin +"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      Use case ends. +"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    * 2a. The volunteer list is empty"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    ** 2a1. Application shows an error message that volunteer list is empty +"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    * 3a. The given index is invalid"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    ** 3a1. Application shows an error message that the index given is invalid +"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "a|*UC05:* Create new event +"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Actor:* Admin +"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Precondition(s):* Admin is logged in +"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Guarantee(s):* +"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Admin requests to create a new event"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application requests for details of the event"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Admin enters details of the event to be created"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application creates the event and shows successful creation message +"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Use case ends. +"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      * 2a. The given details is invalid"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      ** 2a1. Application shows an error message that given details is invalid +"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      Use case resumes from step 1."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "a|*UC06:* Update event details +"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Actor:* Admin +"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Precondition(s):* Admin is logged in +"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Guarantee(s):* +"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Admin requests to list all events"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application displays a list of all events"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Admin enters the index and updated details of the event to be changed"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application updates the event details and notifies of the successful update +"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Use case ends. +"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      * 2a. The event list is empty"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      ** 2a1. Application shows an error message that event list is empty +"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      * 3a. The given index is invalid"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      ** 3a1. Application shows an error message that the index given is invalid +"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      Use case resumes from step 2."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      * 3b. The given details are invalid"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      ** 3b1. Application shows an error message that the details given are invalid +"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "a|*UC07:* View event details +"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Actor:* Admin +"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Precondition(s):* Admin is logged in +"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Guarantee(s):* +"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Admin requests to list all events"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Application displays a list of all events"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Admin requests to view event details at a specific index in the list"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      . Application displays the details of the event +"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      Use case ends. +"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      * 2a. The event list is empty"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      ** 2a1. Application shows an error message that event list is empty +"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      * 3a. The given index is invalid"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      ** 3a1. Application shows an error message that the index given is invalid +"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      Use case resumes from step 2."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "a|*UC08:* Delete event details +"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Actor:* Admin +"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Precondition(s):* Admin is logged in +"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Guarantee(s):* +"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Admin requests to list all events"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application displays a list of all events"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Admin requests to delete event details at a specific index in the list"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application requests for confirmation"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Admin confirms the deletion"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application deletes the event details"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application displays a successful deletion message to Admin +"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Use case ends. +"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      * 2a. The events list is empty"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      ** 2a1. Application shows an error message that event list is empty +"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      * 3a. The given index is invalid"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      ** 3a1. Application shows an error message that the index given is invalid +"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      Use case resumes from step 2."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "a|*UC09:* Add volunteer hours to volunteer profile +"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Actor:* Admin +"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Precondition(s):* Admin is logged in +"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Guarantee(s):* +"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application [underline]#displays the volunteer profile UC02#"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Admin requests to list all volunteer hours of the volunteer"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application displays a list of all volunteer hours of the volunteer"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Admin chooses to add volunteer hours"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application requests for details of the volunteer hours"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Admin enters the requested details"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application requests for confirmation"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Admin confirms the addition"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        . Application adds the volunteer hours and notifies Admin of success +"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Use case ends. +"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        * 2a. The volunteer hours list is empty"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        ** 2a1. Application shows an error message that volunteer hours list is empty +"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        * 8a. Application detects an error in the entered data"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        ** 8a1. Application requests for the correct data"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        ** 8a2. Admin enters new data"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        ** Steps 8a1-8a2 are repeated until the data entered is valid +"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Use case resumes from step 9."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "a|*UC10:* Edit volunteer hours in volunteer profile +"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Actor:* Admin +"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Precondition(s):* Admin is logged in +"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Guarantee(s):* +"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          . Application [underline]#displays the volunteer profile UC02#"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          . Admin requests to list all volunteer hours of the volunteer"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          . Application displays a list of all volunteer hours of the volunteer"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          . Admin enters the index and the details of the volunteer hours to be changed"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          . Application updates the volunteer hours and notifies Admin of success +"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          Use case ends. +"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          * 2a. The volunteer hours list is empty"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          ** 2a1. Application shows an error message that volunteer hours list is empty +"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          Use case ends."
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          * 4a. The given index is invalid"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          ** Application shows an error message that the index given is invalid +"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          Use case resumes from step 5."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          * 4b. The given details are invalid"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          ** 4b1. Application shows an error message that the details given is invalid +"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "          Use case resumes from step 5."
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*  Reasonable response time (2-3s)"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*  Backward compatibility by being able to transfer data from older versions of the application when updating each version"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*  Files containing volunteer data should be encrypted"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "*  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"30%,70%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "| Term| Explanation"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Admin*| Our application’s intended target user (Most likely the volunteer manager)."
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Application*| Refers to our system."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *CLI* | Command Line Interface."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Context*| A context refers to the management screen that users will see."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *GUI* | Graphical User Interface."
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *UCXX*| Use case with XX being the use case ID."
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|[[mainstream-os]] *Mainstream OS*| Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Volunteer*| A volunteer who has signed up and has a profile with the organization."
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Volunteer Manager*| Staff working for the organization, who handles administrative issues pertaining to volunteer and event management."
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d\u003d Launch and shutdown"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003d\u003d\u003d Deleting a volunteer"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ". Deleting a volunteer while all persons are listed"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "   Expected: No volunteer is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 201,
      "Kratious": 148,
      "afiqlattif": 286,
      "sharan8": 182,
      "Scrubbius": 6,
      "-": 748
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d SocialCare - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W16-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "By: `Team W16-2`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Non-profit organizations rely on volunteer work to maintain parts of their operations. A volunteer management system is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "essential in helping to retain volunteers by ensuring that there is a large enough pool of volunteers who are motivated"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "to support the various events. Therefore, it is critical that a organization is able"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "to source the right person for the right activity."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare is an application that is designed to help your organization manage your volunteers effectively."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "You will be able to:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Manage volunteer information such as contact details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Manage events for your organization."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Create volunteering records for your volunteers."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Interested? Jump to \u003c\u003cQuick Start\u003e\u003e to get started."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Enjoy!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "// tag::quick-start[]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "This section contains information on how you can run SocialCare on your desktop."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "To begin, follow the steps below:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".  Check that you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".  Download the latest `socialcare.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for SocialCare."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".  Double-click the file to start the app. The Graphical User Interface (GUI) should appear in a few seconds."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".A labelled screenshot of the parts of the application"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::UiLabelled.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The figure above shows the typical arrangement of the parts of the application. It is currently showing the screen that"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "users will see upon startup."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "1. _Toolbar_: Provides quick access to exit the application or to open the user guide."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "2. _Panel_:  Displays volunteers or events, depending on which item you are managing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "3. _Display Box_: Shows more information for the selected item from the panel."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "4. _Command Box_: Allows you to input commands for execution."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "5. _Command Result Box_: Displays status of executed commands."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "6. _Status Bar_: Provides further information of application."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "To ensure that everything is running, you can try entering commands into the command box and press kbd:[Enter] to execute them. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare allows you to manage both volunteers and events. The panel will update to show the relevant items. See"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c\u003ccommand-switch\u003e\u003e for more details."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "You can refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "//end::quick-start[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Items in square brackets are optional e.g `[n/NAME]`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/charity`, `t/charity t/help` etc."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-help]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Opens a new window which shows the user guide."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `help` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "A new window appears which displays the user guide."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-history]]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `history` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The command result box will display the commands that you have entered in reverse chronological order."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "// tag::undoreo[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-undo]]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Restores the system to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Undoable commands: those commands that modify the system\u0027s content (`add`, `edit`, and `delete`)."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-redo]]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "// tag::command-clear[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-clear]]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Clears all data from the application."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `clear` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Resets the application to a clean state. The panel is also updated to reflect the changes."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Before clearing entries"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_clear_before.png[clear bef, 600]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".After clearing entries"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_clear_after.png[clear aft, 600]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The figures above shows the before and after state of clearing the entries of the application."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "//end::command-clear[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-exit]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the application : `exit`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Exits the application. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `exit` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Exits from the application and return to the user\u0027s desktop."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "// tag::command-switch[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-switch]]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Switching panels: `switch`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Switches the panel to display either volunteers or events +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `switch -CONTEXT_ID`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* The application will always display the \u0027volunteer\u0027 panel upon startup."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* This command allows you to switch the panel between two distinct entities: \u0027volunteers\u0027 and \u0027events\u0027."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* CONTEXT_ID for events is \u0027e\u0027."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* CONTEXT_ID for volunteers is \u0027v\u0027."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `switch -e` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Updates the panel displaying the list of volunteers to display the list of events. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The following figure shows the expected panel before and after entering the `switch` command."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Panel display changing from volunteers to events"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_switch.png[switch, 600]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Volunteer Management"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-volunteer-add]]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Registering new volunteer: `add`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Adds a volunteer to the system when in the volunteers context +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Format: `add n/NAME g/GENDER b/BIRTHDAY p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* Birthday is in the \u0027DD-MM-YYYY format\u0027."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* A volunteer can have any number of tags (including 0)."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ".Before adding a volunteer"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_volunteer_add_before.png[add command, 200]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "The figure above shows how the panel looks like before executing the commands below."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "* `add n/John Doe  g/m b/05-08-1995 p/87183749 e/John@gmail.com  a/Yishun Block 62 `"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "+"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Adds a volunteer with the following properties:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "+"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "[options\u003d\"header\", cols\u003d\"1,3\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Property   |Value"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Name       |John Doe"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Gender     |m"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Birthday   |05-08-1995"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Phone      |87183749"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Email      |John@gmail.com"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Address    |Yishun Block 62"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ".Output of `add`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_volunteer_add_after1.png[add command, 200]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "* `add n/Betty Sue  g/f b/31-12-1995 p/81749272 e/Betty@gmail.com  a/Ang Mo Kio Block 62 t/Longtime t/Helpful`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "+"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Adds a volunteer with the following properties:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "+"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "[options\u003d\"header\", cols\u003d\"1,3\"]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Property   |Value"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Name       |Betty Sue"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Gender     |f"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Birthday   |31-12-1995"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Phone      |81749272"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Email      |Betty@gmail.com"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Address    |Ang Mo Kio Block 62"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|Tags       |Longtime, Helpful"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ".Output of `add`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_volunteer_add_after2.png[add command, 200]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-volunteer-list]]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all volunteers : `list`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Lists all volunteers in the system when in the volunteers context. +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "The figure below shows the expected panel after executing the `list` command."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ".Output of `list`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_volunteer_list.png[list command, 200]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-volunteer-edit]]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Editing volunteers details : `edit`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Edit details of an existing volunteer in the system when in the volunteers context. +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "Format: `edit VOLUNTEER_INDEX [n/NAME]  [g/GENDER] [b/BIRTHDAY]  [p/PHONE_NUMBER] [a/ADDRESS] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Edits the volunteer at the specified `INDEX`. The index refers to the index number shown in the displayed volunteer list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* When editing tags, the existing tags of the volunteer will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* You can remove all the volunteer\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `edit 1 n/John Doe` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Edits the name of the volunteer at index 1"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "The figures below show the before and after results of an edit command."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "--"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ".Before entering the edit command"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_volunteer_edit_before.png[Before edit, 200]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ".The targeted volunteer is updated to reflect the new values after entering the edit command"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_volunteer_edit_after.png[After edit, 200]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "--"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-volunteer-delete]]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting volunteer details : `delete`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Deletes details of an existing volunteer in the system when in the volunteer context. +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `delete VOLUNTEER_INDEX`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Deletes the details of the volunteer specified at index 1"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "The figures below show the before and after results of a delete command."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "--"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ".The volunteer at index 1 is targeted before entering the delete command"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_volunteer_delete_before.png[Before delete, 200]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ".The targeted volunteer is deleted after entering the delete command"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_volunteer_delete_after.png[After delete, 200]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "--"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sharan8"
        },
        "content": "// tag::exportcert[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-volunteer-exportcert]]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting volunteer certificate : `exportcert`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sharan8"
        },
        "content": "Exports a PDF document to a folder in the user\u0027s current working directory or directly to the desktop, detailing the volunteer\u0027s involvement with the organisation. This document includes:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Title: \u0027Certificate of Recognition\u0027"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Date of export"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Volunteer name"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Volunteer ID"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* List of events involved in - Event name, hours contributed, event start and end dates"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sharan8"
        },
        "content": "Format: `exportcert VOLUNTEER_INDEX`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Exports PDF certificate for the volunteer at specified `VOLUNTEER INDEX`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* `VOLUNTEER INDEX` **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* If the index given exceeds the number of volunteers in the displayed volunteer list, the message \u0027The volunteer index provided is invalid.\u0027 will be shown."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* `exportcert 2` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sharan8"
        },
        "content": "Exports PDF certificate of volunteer at specified index 2 to folder \u0027Certs\u0027 in the current working directory, or directly to the Desktop."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sharan8"
        },
        "content": "A success message will also be displayed in the following form: \u0027Certificate exported for volunteer at INDEX \u003cINDEX\u003e to \u003cEXPORT PATH\u003e\u0027."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sharan8"
        },
        "content": "Here is what the exported certificate currently looks like:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sharan8"
        },
        "content": ".Current sample exported volunteer certificate [John Doe_1.pdf]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[.thumb]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sharan8"
        },
        "content": "image::CurrentVolunteerCert.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sharan8"
        },
        "content": "Here is the intended final form of the exported certificate:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sharan8"
        },
        "content": ".Intended sample exported volunteer certificate"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[.thumb]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sharan8"
        },
        "content": "image::FinalVolunteerCert.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sharan8"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sharan8"
        },
        "content": "To avoid exported file name clashes for volunteers with the same name, we have appended the volunteer ID to the filename as well. Exported file names will have the format \u0027\u003cVOLUNTEER NAME\u003e_\u003cVOLUNTEER ID\u003e.pdf\u0027 (E.g. John Doe_1.pdf)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sharan8"
        },
        "content": "// end::exportcert[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Kratious"
        },
        "content": "// tag::eventmanagement[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Event Management"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The following commands can only be accessed after switching to the \u0027event\u0027 panel. (see \u003c\u003ccommand-switch\u003e\u003e)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-event-add]]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Adding new event: `add`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Adds an event to the system. +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Kratious"
        },
        "content": "Format: `add n/NAME l/LOCATION sd/START_DATE ed/END_DATE st/START_TIME et/END_TIME d/DESCRIPTION [t/TAG]...`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* Start date and end date must be in \u0027DD-MM-YYYY format\u0027."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* Start time and end time must be in \u0027HH:MM format\u0027."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* An event can have any number of tags (including 0)."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The figure below shows how the panel looks like before executing the example(s) below."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".Panel before adding an event"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_event_add_before.png[add command, 300]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* `add n/Flag Day l/Yishun MRT sd/31-10-2018 ed/31-10-2018 st/09:00 et/15:00 d/For the children\u0027s home` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Kratious"
        },
        "content": "Adds an event with the properties specified in the command above. The expected result is shown in the figure below."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".Result of `add n/Flag Day l/Yishun MRT sd/31-10-2018 ed/31-10-2018 st/09:00 et/15:00 d/For the children\u0027s home`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Kratious"
        },
        "content": "image::command_event_add_before_after1.png[add command, 600]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* `add n/Fundraising l/Tampines Street 31 sd/15-11-2018 ed/17-11-2018 st/13:00 et/18:00 d/Raising funds t/fundraiser"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Kratious"
        },
        "content": "t/charity`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Kratious"
        },
        "content": "Adds an event with the properties specified in the command above. The expected result is shown in the figure below."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".Result of `add n/Fundraising l/Tampines Street 31 sd/15-11-2018 ed/17-11-2018 st/13:00 et/18:00 d/Raising funds t/fundraiser t/charity`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Kratious"
        },
        "content": "image::command_event_add_before_after2.png[add command, 600]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-event-list]]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all events : `list`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Lists all events in the system and display them in the panel. +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `list` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Kratious"
        },
        "content": "Displays all existing events in the system in the panel. +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The figure below shows a panel displaying all existing events after executing the `list` command."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Output of `list`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_event_list.png[list command, 200]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-event-edit]]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Editing event details : `edit`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Kratious"
        },
        "content": "Edit details of an existing event in the system when in the \u0027event\u0027 context. +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `edit EVENT_INDEX [n/NAME] [l/LOCATION] [sd/START_DATE] [ed/END_DATE] [st/START_TIME] [et/END_TIME] [d/DESCRIPTION] [t/TAG]...`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Edits the event at the specified `EVENT_INDEX`. The index refers to the index number shown in the displayed event list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* When editing tags, the existing tags of the event will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* You can remove all the event\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The figure below indicates the EVENT_INDEX and shows how the panel looks like before executing the example(s) below."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".Panel before editing an event, EVENT_INDEX is indicated in the circles"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Kratious"
        },
        "content": "image::command_event_edit_before.png[add command, 300]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* `edit 1 n/Charity Fun Run t/` +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Kratious"
        },
        "content": "Edits the name of event at index 1 and removes all tags."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The expected result is shown in the figure below."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".Result of `edit 1 n/Charity Fun Run t/`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Kratious"
        },
        "content": "image::command_event_edit_before_after.png[Before edit, 600]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-event-delete]]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting event: `delete`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Kratious"
        },
        "content": "Deletes an existing event in the system when in the \u0027event\u0027 context. +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `delete EVENT_INDEX`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The figure below indicates the EVENT_INDEX and shows how the panel looks like before executing the example(s) below."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* `delete 3` +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Kratious"
        },
        "content": "Deletes the event specified at index 3."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The expected result is shown in the figure below."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Kratious"
        },
        "content": "+"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".Result of `delete 3`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Kratious"
        },
        "content": "image::command_event_delete_before_after.png[Before delete, 600]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Kratious"
        },
        "content": "// end::eventmanagement[]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Record Management"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "This section contains commands related to managing a volunteering record."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* The `manage` command can only be accessed after switching to the \u0027event\u0027 panel. (see \u003c\u003ccommand-switch\u003e\u003e) +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* The other commands under this section can only be accessed after executing the `manage` command."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "// tag::command-record[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-record-manage]]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing event\u0027s volunteer records: `manage`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The panel updates to show the list of volunteers while the display area shows the volunteers currently registered for the selected event. +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `manage EVENT_INDEX`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `switch -e` (panel updates to show list of events) +"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`manage 1` (view the list of volunteers assigned to event at index 1) +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "See the figures below for a step by step guide."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Execute `switch -e`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_switch.png[switch execution, 600]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".`manage 1` targets the event at index 1"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_record_manage_eventIndex.png[switch execution, 200]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Labelled screenshot of what to expect after executing `manage 1`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_manage_view.png[manage, 600]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The last figure shows the screen you will see after executing the `manage` command successfully."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The following changes are observed:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "1. Panel displays the list of volunteers that you can assign to an event."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "2. Name of event being managed and total number of volunteers assigned to it."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "3. List of volunteers currently assigned to the event. It will be empty if no volunteers are assigned."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-record-add]]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Adding volunteer to event: `add`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Adds a volunteer to the event that is currently being managed. +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Refer to \u003c\u003ccommand-record-manage\u003e\u003e on how to manage events."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `add VOLUNTEER_INDEX [h/HOURS] [r/REMARKS]`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* VOLUNTEER_INDEX comes from the list of all volunteers shown in the panel."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Default value for HOURS is \u00270\u0027."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Default value for REMARKS is \u0027-\u0027."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The following examples are entered after executing the following commands: +"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "1. `switch -e` (update panel to display events) +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "2. `manage 1` (manage the event at index 1 in the panel. See figure below for expected screen)"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".After executing `manage 1`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_record_add.png[add command, 600]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `add 1` +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Adds a volunteer at index 1 to the event with 0 hours. +"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Expected display box is shown in the figure below."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Output of `add 1`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_record_add_after1.png[add command, 600]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "//end::command-record[]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `add 1 h/5 r/Driver` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Adds a volunteer at index 1 to the event with 5 hours and remarks of \u0027Driver\u0027. +"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Expected display box is shown in the figure below."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Output of `add 1 h/5 r/Driver`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_record_add_after2.png[add command, 600]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-record-edit]]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Updating volunteer record: `edit`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Updates a volunteer record in the event that is currently being managed. +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Refer to \u003c\u003ccommand-record-manage\u003e\u003e on how to manage events."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `edit VOLUNTEER_INDEX h/HOURS [r/REMARKS]`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* VOLUNTEER_INDEX comes from the volunteers currently registered for the event."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Just entering `r/` will save the remarks with the default value of \u0027-\u0027."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The figure below shows the highlighted column that indicates the VOLUNTEER_INDEX that you have to enter. +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "This display can be seen after executing the `manage` command."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".The VOLUNTEER_INDEX"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_record_edit_volunteerIndex.png[volunteer index, 600]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `edit 2 h/5 r/Emcee` +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Updates amount of hours volunteered for volunteer at index 3 to 5 hours with remarks of \u0027Emcee\u0027. +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The figures below show the display box before and after editing a record."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Before updating the volunteer record"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_record_edit.png[edit command, 600]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Output of `edit 2 h/5 r/Emcee`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_record_edit_after.png[edit command, 600]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[[command-record-delete]]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting volunteer record from event: `delete`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Deletes the volunteer record from the event that is currently being managed. +"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Refer to \u003c\u003ccommand-record-manage\u003e\u003e on how to manage events."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `delete VOLUNTEER_INDEX`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* VOLUNTEER_INDEX comes from the table view of existing volunteers."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The figure below shows the highlighted column that indicates the VOLUNTEER_INDEX that you have to enter. +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "This display can be seen after executing the `manage` command."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".The VOLUNTEER_INDEX"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_record_edit_volunteerIndex.png[volunteer index, 600]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Deletes the volunteer record at index 1. +"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The figures below show the display box before and after deleting a record."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Before deleting the volunteer record"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_record_edit_after.png[delete command, 600]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".Output of `delete 1`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::command_record_delete.png[delete command, 600]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Commands Summary"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "This section contains a summary of the commands available."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"10%, 30%, 30%, 30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| Command | Format | Example | Section Link"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Clear* | `clear` | `clear` | \u003c\u003ccommand-clear\u003e\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Help* | `help` | `help` | \u003c\u003ccommand-help\u003e\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *History* | `history` | `history` | \u003c\u003ccommand-history\u003e\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Redo* | `redo` | `redo` | \u003c\u003ccommand-redo\u003e\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Switch* | `switch -[CONTEXT_ID]` | `switch -e` | \u003c\u003ccommand-switch\u003e\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Undo* | `undo` | `undo` | \u003c\u003ccommand-undo\u003e\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Volunteer Management"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"10%, 30%, 30%, 30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| Command | Format | Example | Section Link"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Add* | `add n/NAME b/BIRTHDAY g/GENDER a/ADDRESS e/EMAIL p/PHONE_NUMBER [t/TAG]...` | `add n/John Doe b/05-08-199ck 62 p/87183749 e/John@gmail.com` | \u003c\u003ccommand-volunteer-add\u003e\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Delete* | `delete VOLUNTEER_INDEX`  | `delete 3` | \u003c\u003ccommand-volunteer-delete\u003e\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Edit* | `edit VOLUNTEER_INDEX [n/NAME][b/BIRTHDAY] [g/GENDER] [a/ADDRESS] [e/EMAIL] [p/PHONE_NUMBER] [t/TAG]...` | `edit 2 n/James Lee e/jameslee@example.com` | \u003c\u003ccommand-volunteer-edit\u003e\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Export Certificate* | `exportcert VOLUNTEER_INDEX` | `exportcert 2` | \u003c\u003ccommand-volunteer-exportcert\u003e\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *List* | `list` | `list` | \u003c\u003ccommand-volunteer-list\u003e\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Event Management"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"10%, 30%, 30%, 30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| Command | Format | Example | Section Link"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Add* | `add n/NAME l/LOCATION sd/START_DATE ed/END_DATE d/DESCRIPTION [t/TAG]...` | `add n/Fundraising l/Tampines S sd/31-09-2018 ed/31-09-2018 st/13:00 et/18:00 d/Raising funds t/fundraiser t/charity` | \u003c\u003ccommand-event-add\u003e\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Delete* | `delete EVENT_INDEX`  | `delete 3` | \u003c\u003ccommand-event-delete\u003e\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Edit* | `edit EVENT_INDEX [n/NAME] [l/LOCATION] [sd/START_DATE] [ed/END_DATE] [d/DESCRIPTION] [t/TAG]...` | `edit 2 n/Fundraiser` | \u003c\u003ccommand-event-edit\u003e\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *List* | `list` | `list` | \u003c\u003ccommand-event-list\u003e\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Record Management"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"10%, 30%, 30%, 30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| Command | Format | Example | Section Link"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Add* | `add VOLUNTEER_INDEX [h/HOURS] [r/REMARKS]` | `add 1 h/1` | \u003c\u003ccommand-record-add\u003e\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Delete* | `delete VOLUNTEER_INDEX`  | `delete 1` | \u003c\u003ccommand-record-delete\u003e\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Edit* | `edit VOLUNTEER_INDEX h/HOURS [VOLUNTEER_INDEX]` | `edit 1 h/8` | \u003c\u003ccommand-record-edit\u003e\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *Manage* | `manage EVENT_INDEX` | `manage 1` | \u003c\u003ccommand-record-manage\u003e\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"30%,70%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| Term| Explanation"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "| *GUI*| Graphical User Interface."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous SocialCare folder."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iMarbles": 397,
      "Kratious": 55,
      "afiqlattif": 61,
      "sharan8": 40,
      "-": 170
    }
  },
  {
    "path": "docs/team/afiqlattif.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d Afiq Lattif - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: SocialCare"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare morphs the given AddressBook - Level 4 application into a volunteer management system that allows Social Welfare Organisations to better manage their volunteers \u0026 events, and gain further statistical insights from the data. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 72
    }
  },
  {
    "path": "docs/team/imarbles.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d Amabel Yeo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W16-2/main/pull"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: SocialCare"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "This portfolio page documents my involvement in SocialCare, a project done as part of the CS21303T Software Engineering module taught in NUS."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare is a desktop application made for social welfare organizations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The application is designed to help manage volunteers and events effectively."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Users interact with the application using a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "In addition, SocialCare has a Graphical User Interface (GUI) to display information in a user-friendly manner."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "My role as a developer for SocialCare is to implement *record management functions*, which enables users to do the following:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Assign volunteers to event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Update volunteering records for volunteers"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Delete volunteering records of volunteer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "added commands to *manage volunteer records*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The commands implemented allows the user to manage volunteering records."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "They will be able to assign volunteers to events and update the number of hours contributed by the volunteer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "These functions are part of the core requirements for the application because we want users to be able to effectively manage volunteering records."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "added a command to allow users to *switch between panels*. The panels are used to display either volunteers or events for users to manage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Here is a https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dimarbles[link]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "to my code on the Project Code Dashboard."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Set up the team repository on GitHub"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Assigned and tracked project tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Ensured that project deliverables are done on time and in the right format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: link:{repoURL}/76/[#76], link:{repoURL}/129/[#129]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Rewrote the quick start section of the User Guide: link:{repoURL}/154/[#154]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Revised content for the Logic component in the Developer Guide: link:{repoURL}/93/[#93]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Reviewed PRs for team members (with non-trivial review comments): link:{repoURL}/58/[#58], link:{repoURL}/109/[#109], link:{repoURL}/114/[#114]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated Travis to the Github repository"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommand-switch]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommand-record]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcommand-switch]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcommand-manage]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iMarbles": 79
    }
  },
  {
    "path": "docs/team/kratious.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d Sem Jing Han - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ":pullURL: https://github.com/CS2103-AY1819S1-W16-2/main/pull"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: SocialCare"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "This portfolio documents my involvement in the SocialCare project, under the CS2103T Software Engineering module in NUS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "The main scope of the module requires students to modify an existing application with an established code base"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "while applying proper software engineering practices."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "SocialCare is a desktop application designed to serve the volunteer and event management needs of non-profit organizations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "Users primarily interact with the application using a Command Line Interface (CLI) with elements of a Graphical User Interface (GUI) to display information."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "My contributions to the project focused on the event management features as well as improving upon the original GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dkratious[Functional code]] [https://github.com[Test code]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "*** Managed releases `v1.1` - `v1.3` (3 releases) on GitHub"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "*** Updated the GUI aesthetics and layout (Pull requests link:{pullURL}/92/[#92],link:{pullURL}/148/[#148])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): link:{pullURL}/58/[#58],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "*** Contributed to forum discussions (examples:  )"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  )"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "*** Integrated a third party library (Natty) to the project ()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "include::../UserGuide.adoc[tag\u003deventmanagement]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deventmanagement]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 54,
      "Kratious": 24
    }
  },
  {
    "path": "docs/team/scrubbius.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d Ngoh Wen Jun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: SocialCare"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare morphs the given AddressBook - Level 4 application into a volunteer management system that allows Social Welfare Organisations to better manage their volunteers \u0026 events, and gain further statistical insights from the data. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 72
    }
  },
  {
    "path": "docs/team/sharan8.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d Thangavel Sharan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharan8"
        },
        "content": ":pullURL: https://github.com/CS2103-AY1819S1-W16-2/main/pull"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d PROJECT: _SocialCare_"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharan8"
        },
        "content": "This project portfolio page serves to document my contributions to _SocialCare_, a software engineering project that was"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharan8"
        },
        "content": "undertaken as part of the National University of Singapore (NUS) School of Computing\u0027s beginner Software Engineering"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharan8"
        },
        "content": "module, CS2103T. More information on this module can be found"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharan8"
        },
        "content": "https://nus-cs2103-ay1819s1.github.io/cs2103-website/admin/index.html[here]."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharan8"
        },
        "content": "_SocialCare_ is an *event and volunteer management system* for social welfare organisations, which runs on desktops."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharan8"
        },
        "content": "The user interacts with it using the Command Line Interface (CLI), and it has a Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharan8"
        },
        "content": "created using https://docs.oracle.com/javafx/2/overview/jfxpub-overview.htm[JavaFX]. The application is written in Java,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharan8"
        },
        "content": "and has about 10,000 lines of code."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharan8"
        },
        "content": "Key Features of _SocialCare_:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Add, remove and store volunteers and events."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Assign volunteers to events."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Create event records for each volunteer consisting of the event and volunteer IDs, hours contributed and related"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharan8"
        },
        "content": "remarks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* Export a PDF certificate detailing a volunteer’s involvement with the organisation (event records, contributed hours)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharan8"
        },
        "content": "Through the use of the CLI, _SocialCare_ enables the above functionalities to be executed faster than a typical"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharan8"
        },
        "content": "mouse/GUI driven application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharan8"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* *Major enhancement*: I added *the ability to export volunteer certificates in PDF format.*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharan8"
        },
        "content": "** _What it does_: This feature allows the user to export a volunteer’s event records and contributed hours in the form"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharan8"
        },
        "content": "of a PDF certificate."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharan8"
        },
        "content": "** _Justification_: This feature improves the product significantly as it automates a task that is currently done"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharan8"
        },
        "content": "largely manually, and offers the user a way to access information from outside of the application as well (via portable"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharan8"
        },
        "content": "and printable PDF files)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharan8"
        },
        "content": "** _Highlights_: This enhancement involved an in-depth analysis of available external open source libraries, and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharan8"
        },
        "content": "meticulous design of the exported PDF document."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharan8"
        },
        "content": "** _Credits_: This feature was developed with the use of https://pdfbox.apache.org/team.html[Apache PDFBox], which"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharan8"
        },
        "content": "provides the functionality to create and write to PDF files."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* *Minor enhancement*: I added the *total volunteer count to the status bar*. This enhancement is in line with our"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharan8"
        },
        "content": "application’s intention to provide the user with easy access to useful information pertaining to volunteers."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharan8"
        },
        "content": "* *Code contributed*: Here is a https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dsharan8[link]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharan8"
        },
        "content": "to my code on the Project Code Dashboard."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharan8"
        },
        "content": "*** Revised the introduction sections of the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharan8"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-2/main/blob/master/README.adoc[README] and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharan8"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-2/main/blob/master/docs/DeveloperGuide.adoc[Developer Guide] ({pullURL}/109[#109])"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharan8"
        },
        "content": "*** Reviewed PRs (with non-trivial review comments): {pullURL}/92[#92], {pullURL}/107[#107], {pullURL}/114[#114], {pullURL}/232[#232]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharan8"
        },
        "content": "*** Involved forum members in the resolution of a design consideration: https://github.com/nus-cs2103-AY1819S1/forum/issues/114[#114]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharan8"
        },
        "content": "*** Shared a personal learning point with forum members: https://github.com/nus-cs2103-AY1819S1/forum/issues/143[#143]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharan8"
        },
        "content": "*** Reported bugs and suggestions for other teams: To be updated."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharan8"
        },
        "content": "*** Some parts of the `exportcert` feature I added inspired the implementation of the import/export csv/xml feature."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharan8"
        },
        "content": "*** Integrated a third party library (https://pdfbox.apache.org/index.html[Apache PDFBox]) to the project"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharan8"
        },
        "content": "({pullURL}/161[#161])."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharan8"
        },
        "content": "** Project conceptualisation:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharan8"
        },
        "content": "*** Set up and managed a shared"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharan8"
        },
        "content": "https://docs.google.com/document/d/19iV64xK0EwaV8kjMaP72P1G7iGKKXtEX2my5M-QowKc/edit?usp\u003dsharing[Brainstorming Canvas]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharan8"
        },
        "content": "to brainstorm on product morphing ideas using the \u0027Target User Profile-Problem-Value Proposition\u0027 framework."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharan8"
        },
        "content": "*** Conceptualised and validated the idea for _SocialCare_ through conversing with staff from 2"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharan8"
        },
        "content": "social welfare organisations that I have worked with in the past."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharan8"
        },
        "content": "end-users._"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharan8"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexportcert]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharan8"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharan8"
        },
        "content": "documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharan8"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexportcert]"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 31,
      "sharan8": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 2, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 1,
      "-": 207
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String appTitle \u003d \"SocialCare\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    // General messages"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    // Volunteers messages"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX \u003d \"The volunteer index provided is invalid.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_VOLUNTEERS_LISTED_OVERVIEW \u003d \"%1$d volunteers listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    // Event messages"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    // Record messages"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_INVALID_RECORD_DISPLAYED_INDEX \u003d \"The record index provided is invalid\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 7,
      "afiqlattif": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return \"number of volunteers \" + data.getVolunteerList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ContextChangeEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents a selection change in the Event List Panel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class ContextChangeEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final String contextId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public ContextChangeEvent(String contextId) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.contextId \u003d contextId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String getNewContext() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return contextId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/EventPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents a selection change in the Event List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EventPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Event newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventPanelSelectionChangedEvent(Event newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Event getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToEventListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Indicates a request to jump to the list of events"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class JumpToEventListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public JumpToEventListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Indicates a request to jump to the list of volunteers"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/OverviewPanelChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents a change in the Overview Panel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class OverviewPanelChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/RecordChangeEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Indicates a request to jump to the list of volunteers"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RecordChangeEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Event currentEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordChangeEvent(Event newSelection) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.currentEvent \u003d newSelection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Event getCurrentEvent() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return currentEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 25,
      "afiqlattif": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ReplaceWithContextPanelEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents a change to current context panel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class ReplaceWithContextPanelEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/VolunteerPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Represents a selection change in the Volunteer List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Volunteer newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerPanelSelectionChangedEvent(Volunteer newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Volunteer getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/BirthdayUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Utility methods related to Birthday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class BirthdayUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns a friendly date string of a Volunteer Birthday object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static String getFriendlyDateFromVolunteerBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        SimpleDateFormat inf \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        SimpleDateFormat outf \u003d new SimpleDateFormat(\"d MMMMM yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return outf.format(inf.parse(birthday.value));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return birthday.value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateTimeUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Utility methods related to Date"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final int UPCOMING_EVENT \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final int ONGOING_EVENT \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final int COMPLETED_EVENT \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final int INVALID_STATUS \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String[] STATUS \u003d { \"Upcoming\", \"Ongoing\", \"Completed\" };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns a friendly date string of an Event Date object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static String getFriendlyDateFromEventDate(Date date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        SimpleDateFormat inf \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        SimpleDateFormat outf \u003d new SimpleDateFormat(\"EEE, d MMM yy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return outf.format(inf.parse(date.value));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return date.value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns a friendly time string of an Event Time object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static String getFriendlyTimeFromEventTime(Time time) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        SimpleDateFormat inf \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        SimpleDateFormat outf \u003d new SimpleDateFormat(\"K:mma\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return outf.format(inf.parse(time.value));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return time.value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static int getEventStatus(Date startDate, Time startTime, Date endDate, Time endTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        SimpleDateFormat inf \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            java.util.Date start \u003d inf.parse(startDate + \" \" + startTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            java.util.Date end \u003d inf.parse(endDate + \" \" + endTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            java.util.Date now \u003d new java.util.Date();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            if (now.compareTo(start) \u003c 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                return UPCOMING_EVENT;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            } else if (now.compareTo(start) \u003e\u003d 0 \u0026\u0026 now.compareTo(end) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                return ONGOING_EVENT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                return COMPLETED_EVENT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return INVALID_STATUS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/GenderUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Utility methods related to Gender"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class GenderUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String GENDER_MALE_VALIDATION_REGEX \u003d \"m\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String GENDER_FEMALE_VALIDATION_REGEX \u003d \"f\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String GENDER_MALE_FORMAT \u003d \"Male\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String GENDER_FEMALE_FORMAT \u003d \"Female\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static String formattedGender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns a friendly date string of a Volunteer Birthday object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static String getFriendlyGenderFromVolunteerGender(Gender gender) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (gender.value.equals(GENDER_FEMALE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            formattedGender \u003d GENDER_FEMALE_FORMAT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        } else if (gender.value.equals(GENDER_MALE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            formattedGender \u003d GENDER_MALE_FORMAT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return formattedGender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of volunteers */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    ObservableList\u003cVolunteer\u003e getFilteredVolunteerList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /** Returns the context id */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    String getContextId();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 7,
      "iMarbles": 3,
      "afiqlattif": 3,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText, model.getContextId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public ObservableList\u003cVolunteer\u003e getFilteredVolunteerList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return model.getFilteredRecordList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String getContextId() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return model.getContextId();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 11,
      "iMarbles": 4,
      "afiqlattif": 6,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Adds a volunteer to the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a volunteer to the application. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            + PREFIX_BIRTHDAY + \"BIRTHDAY \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            + PREFIX_GENDER + \"m \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            + PREFIX_BIRTHDAY + \"01-10-1985 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            + PREFIX_TAG + \"driver\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New volunteer added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VOLUNTEER \u003d \"This volunteer already exists in the application.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Volunteer toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Volunteer}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public AddCommand(Volunteer volunteer) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(volunteer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        toAdd \u003d volunteer;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (model.hasVolunteer(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.addVolunteer(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 20,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Adds an event to the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event record to the application. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_END_DATE + \"END DATE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_START_TIME + \"START TIME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_END_TIME + \"END TIME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_NAME + \"Youth Humanitarian Challenge \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_LOCATION + \"29 Havelock Road \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_START_DATE + \"28-09-2018 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_END_DATE + \"28-09-2018 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_START_TIME + \"10:00 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_END_TIME + \"14:00 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_DESCRIPTION + \"To engage youths in humanitarianism. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_TAG + \"Competition \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Creates an AddEventCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddRecordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD_HOUR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.events.ui.ContextChangeEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.events.ui.RecordChangeEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.RecordContainsEventIdPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Adds a record to the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class AddRecordCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a volunteer record to the event that \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"is currently managed.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Parameters: VOLUNTEER_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"[\" + PREFIX_RECORD_HOUR + \"HOURS] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"[\" + PREFIX_RECORD_REMARK + \"REMARKS]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + PREFIX_RECORD_HOUR + \"5 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + PREFIX_RECORD_REMARK + \"Emcee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Record added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"This volunteer is already registered.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Record toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public AddRecordCommand(Index index, Record record) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.toAdd \u003d record;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cVolunteer\u003e lastShownList \u003d model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Volunteer volunteerSelected \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record record \u003d new Record(model.getSelectedEvent().getEventId(), volunteerSelected.getVolunteerId(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                toAdd.getHour(), toAdd.getRemark());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        record.setVolunteerName(volunteerSelected.getName().fullName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (model.hasRecord(record)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.addRecord(record);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.updateFilteredRecordList(new RecordContainsEventIdPredicate(model.getSelectedEvent().getEventId()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // Posting event"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        EventsCenter.getInstance().post(new RecordChangeEvent(model.getSelectedEvent()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        EventsCenter.getInstance().post(new ContextChangeEvent(model.getContextId()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, record));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof AddRecordCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddRecordCommand) other).toAdd));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Clears the data from the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"SocialCare data has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.RecordContainsVolunteerIdPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Deletes a volunteer identified using it\u0027s displayed index from the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            + \": Deletes the volunteer identified by the index number used in the displayed volunteer list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_DELETE_VOLUNTEER_SUCCESS \u003d \"Deleted Volunteer: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        List\u003cVolunteer\u003e lastShownList \u003d model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.deleteVolunteer(volunteerToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.updateFilteredRecordList(new RecordContainsVolunteerIdPredicate(volunteerToDelete.getVolunteerId()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cRecord\u003e recordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        recordList.addAll(model.getFilteredRecordList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (Record r : recordList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            model.deleteRecord(r);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_VOLUNTEER_SUCCESS, volunteerToDelete));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 10,
      "afiqlattif": 9,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.RecordContainsEventIdPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Deletes an event identified using it\u0027s displayed index from the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \": Deletes the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public DeleteEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.updateFilteredRecordList(new RecordContainsEventIdPredicate(eventToDelete.getEventId()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cRecord\u003e recordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        recordList.addAll(model.getFilteredRecordList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (Record r : recordList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            model.deleteRecord(r);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 54,
      "iMarbles": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteRecordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.events.ui.RecordChangeEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Deletes a record identified using it\u0027s displayed index from the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class DeleteRecordCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \": Deletes the record identified by the index number used in the displayed records panel.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_DELETE_RECORD_SUCCESS \u003d \"Deleted record: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public DeleteRecordCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cRecord\u003e lastShownList \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record recordToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.deleteRecord(recordToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        EventsCenter.getInstance().post(new RecordChangeEvent(model.getSelectedEvent()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RECORD_SUCCESS, recordToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof DeleteRecordCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteRecordCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VOLUNTEERS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.VolunteerId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Edits the details of an existing volunteer in the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the volunteer identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            + \"by the index number used in the displayed volunteer list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_EDIT_VOLUNTEER_SUCCESS \u003d \"Edited Volunteer: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VOLUNTEER \u003d \"This volunteer already exists in the application.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final EditVolunteerDescriptor editVolunteerDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @param index of the volunteer in the filtered volunteer list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @param editVolunteerDescriptor details to edit the volunteer with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditCommand(Index index, EditVolunteerDescriptor editVolunteerDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(editVolunteerDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.editVolunteerDescriptor \u003d new EditVolunteerDescriptor(editVolunteerDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        List\u003cVolunteer\u003e lastShownList \u003d model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer editedVolunteer \u003d createEditedVolunteer(volunteerToEdit, editVolunteerDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!volunteerToEdit.isSameVolunteer(editedVolunteer) \u0026\u0026 model.hasVolunteer(editedVolunteer)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.updateVolunteer(volunteerToEdit, editedVolunteer);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_VOLUNTEER_SUCCESS, editedVolunteer));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Creates and returns a {@code Volunteer} with the details of {@code volunteerToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * edited with {@code editVolunteerDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static Volunteer createEditedVolunteer(Volunteer volunteerToEdit,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                                                   EditVolunteerDescriptor editVolunteerDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assert volunteerToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        VolunteerId volunteerId \u003d volunteerToEdit.getVolunteerId();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Name updatedName \u003d editVolunteerDescriptor.getName().orElse(volunteerToEdit.getName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Gender updatedGender \u003d editVolunteerDescriptor.getGender().orElse(volunteerToEdit.getGender());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Birthday updatedBirthday \u003d editVolunteerDescriptor.getBirthday().orElse(volunteerToEdit.getBirthday());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Phone updatedPhone \u003d editVolunteerDescriptor.getPhone().orElse(volunteerToEdit.getPhone());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Email updatedEmail \u003d editVolunteerDescriptor.getEmail().orElse(volunteerToEdit.getEmail());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Address updatedAddress \u003d editVolunteerDescriptor.getAddress().orElse(volunteerToEdit.getAddress());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editVolunteerDescriptor.getTags().orElse(volunteerToEdit.getTags());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new Volunteer(volunteerId, updatedName, updatedGender, updatedBirthday,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 editVolunteerDescriptor.equals(e.editVolunteerDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Stores the details to edit the volunteer with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * corresponding field value of the volunteer."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static class EditVolunteerDescriptor {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        private VolunteerId volunteerId;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        private Birthday birthday;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public EditVolunteerDescriptor() {}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public EditVolunteerDescriptor(EditVolunteerDescriptor toCopy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            setVolunteerId(toCopy.volunteerId);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            setBirthday(toCopy.birthday);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, gender, birthday, phone, email, address, tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public void setVolunteerId(VolunteerId volunteerId) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            this.volunteerId \u003d volunteerId;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public void setBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public Optional\u003cBirthday\u003e getBirthday() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return Optional.ofNullable(birthday);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            if (!(other instanceof EditVolunteerDescriptor)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            EditVolunteerDescriptor e \u003d (EditVolunteerDescriptor) other;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    \u0026\u0026 getBirthday().equals(e.getBirthday())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 85,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.EventId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Edits the details of an existing event in the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"by the index number used in the displayed event list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"[\" + PREFIX_EVENT_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"[\" + PREFIX_EVENT_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"[\" + PREFIX_EVENT_START_DATE + \"START DATE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"[\" + PREFIX_EVENT_END_DATE + \"END DATE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"[\" + PREFIX_EVENT_START_TIME + \"START TIME] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"[\" + PREFIX_EVENT_END_TIME + \"END TIME] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"[\" + PREFIX_EVENT_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_LOCATION + \"25, Tannery Lane #01-27 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + PREFIX_EVENT_DESCRIPTION + \"Charity drive\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param index of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EditEventCommand(Index index, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        model.updateEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Creates and returns an {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * edited with {@code editEventDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                                                        throws CommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        EventId eventId \u003d eventToEdit.getEventId();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Name updatedName \u003d editEventDescriptor.getName().orElse(eventToEdit.getName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Location updatedLocation \u003d editEventDescriptor.getLocation().orElse(eventToEdit.getLocation());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Date updatedStartDate \u003d editEventDescriptor.getStartDate().orElse(eventToEdit.getStartDate());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Date updatedEndDate \u003d editEventDescriptor.getEndDate().orElse(eventToEdit.getEndDate());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!updatedStartDate.isLessThanOrEqualTo(updatedEndDate)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new CommandException(Event.MESSAGE_START_END_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Time updatedStartTime \u003d editEventDescriptor.getStartTime().orElse(eventToEdit.getStartTime());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Time updatedEndTime \u003d editEventDescriptor.getEndTime().orElse(eventToEdit.getEndTime());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!updatedStartTime.isLessThanOrEqualTo(updatedEndTime)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new CommandException(Event.MESSAGE_START_END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Description updatedDescription \u003d editEventDescriptor.getDescription().orElse(eventToEdit.getDescription());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEventDescriptor.getTags().orElse(eventToEdit.getTags());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Event(eventId, updatedName, updatedLocation, updatedStartDate, updatedEndDate, updatedStartTime,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        updatedEndTime, updatedDescription, updatedTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Stores the details to edit the event with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * corresponding field value of the event."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        private EventId eventId;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        private Date startDate;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        private Date endDate;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        private Time startTime;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        private Time endTime;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public EditEventDescriptor() {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public EditEventDescriptor(EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            setEventId(toCopy.eventId);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, location, startDate, endDate, startTime, endTime,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                description, tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void setEventId(EventId eventId) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void setStartDate(Date startDate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public Optional\u003cDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void setEndDate(Date endDate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public Optional\u003cDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void setStartTime(Time startTime) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public Optional\u003cTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void setEndTime(Time endTime) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public Optional\u003cTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kratious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            if (!(other instanceof EditEventDescriptor)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            EditEventDescriptor e \u003d (EditEventDescriptor) other;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u0026\u0026 getStartTime().equals(e.getStartTime())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u0026\u0026 getEndTime().equals(e.getEndTime())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 276
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditRecordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD_HOUR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.events.ui.RecordChangeEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.event.EventId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.RecordContainsEventIdPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.volunteer.VolunteerId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Edits the details of an existing record in the application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class EditRecordCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the record identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"by the index number used in the displayed record list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Parameters: VOLUNTEER_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"[\" + PREFIX_RECORD_HOUR + \"HOURS] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"[\" + PREFIX_RECORD_REMARK + \"REMARKS]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + PREFIX_RECORD_HOUR + \"2 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + PREFIX_RECORD_REMARK + \"Driver\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_EDIT_RECORD_SUCCESS \u003d \"Edited Record: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"This record already exists in the application.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final EditRecordDescriptor editRecordDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param editRecordDescriptor details to edit the person with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public EditRecordCommand(Index index, EditRecordDescriptor editRecordDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(editRecordDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.editRecordDescriptor \u003d new EditRecordDescriptor(editRecordDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cRecord\u003e lastShownList \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record recordToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d createEditedRecord(recordToEdit, editRecordDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!recordToEdit.isSameRecord(editedRecord) \u0026\u0026 model.hasRecord(editedRecord)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.updateRecord(recordToEdit, editedRecord);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.updateFilteredRecordList(new RecordContainsEventIdPredicate(model.getSelectedEvent().getEventId()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        EventsCenter.getInstance().post(new RecordChangeEvent(model.getSelectedEvent()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_RECORD_SUCCESS, editedRecord));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static Record createEditedRecord(Record recordToEdit, EditRecordDescriptor editRecordDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assert recordToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        VolunteerId volunteerId \u003d recordToEdit.getVolunteerId();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        EventId eventId \u003d recordToEdit.getEventId();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Hour updatedHour \u003d editRecordDescriptor.getHour().orElse(recordToEdit.getHour());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Remark updatedRemark \u003d editRecordDescriptor.getRemark().orElse(recordToEdit.getRemark());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new Record(eventId, volunteerId, updatedHour, updatedRemark);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!(other instanceof EditRecordCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        EditRecordCommand e \u003d (EditRecordCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 editRecordDescriptor.equals(e.editRecordDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Stores the details to edit the record with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * corresponding field value of the record."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static class EditRecordDescriptor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        private EventId eventId;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        private VolunteerId volunteerId;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        private Hour hour;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        private int localIndex;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        private String volunteerName;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        private String phoneNo;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public EditRecordDescriptor() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public EditRecordDescriptor(EditRecordDescriptor toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            setEventId(toCopy.eventId);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            setVolunteerId(toCopy.volunteerId);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            setHour(toCopy.hour);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            setLocalIndex(toCopy.localIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            setVolunteerName(toCopy.volunteerName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            setPhoneNo(toCopy.phoneNo);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return CollectionUtil.isAnyNonNull(hour, remark);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void setEventId(EventId eventId) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void setVolunteerId(VolunteerId volunteerId) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            this.volunteerId \u003d volunteerId;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void setHour(Hour hour) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            this.hour \u003d hour;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public Optional\u003cHour\u003e getHour() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return Optional.ofNullable(hour);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void setLocalIndex(int localIndex) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            this.localIndex \u003d localIndex;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void setVolunteerName(String volunteerName) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            this.volunteerName \u003d volunteerName;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void setPhoneNo(String phoneNo) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            this.phoneNo \u003d phoneNo;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (!(other instanceof EditRecordDescriptor)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            EditRecordDescriptor e \u003d (EditRecordDescriptor) other;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return getHour().equals(e.getHour())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCertCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharan8"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPageContentStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDFont;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDType1Font;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.event.EventContainsEventIdPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.event.EventId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.record.RecordContainsVolunteerIdPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.volunteer.VolunteerId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharan8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharan8"
        },
        "content": " * Exports a PDF document with data on a volunteer\u0027s involvement with the organisation."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharan8"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharan8"
        },
        "content": "public class ExportCertCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exportcert\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports a PDF certificate for the volunteer at \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            + \"the specified index in the displayed volunteer list.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static final String MESSAGE_EXPORT_CERT_SUCCESS \u003d \"Certificate exported for volunteer at INDEX %1$d to \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static final String MESSAGE_EXPORT_FAILED \u003d \"Certificate export failed, please try again\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static final String PDF_SAVE_PATH \u003d System.getProperty(\"user.dir\") + File.separator + \"Certs\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            + File.separator;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static final String PDF_ALT_SAVE_PATH \u003d System.getProperty(\"user.home\") + File.separator + \"Desktop\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            + File.separator;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static final String MESSAGE_VOLUNTEER_NO_RECORD \u003d \"Selected volunteer has no stored event records\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private static final java.util.logging.Logger logger \u003d LogsCenter.getLogger(ExportCertCommand.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private static String currentSavePath \u003d PDF_SAVE_PATH;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * @param index of the volunteer in the filtered volunteer list whose certificate is to be generated and exported"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public ExportCertCommand(Index index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Create a folder in user\u0027s working directory to export certificates to, if possible"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        File exportDir \u003d new File(currentSavePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        if (!exportDir.exists()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                exportDir.mkdir();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                logger.info(\"Creating a new folder \u0027Certs\u0027 in user\u0027s current working directory.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            } catch (SecurityException se) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                logger.warning(\"Couldn\u0027t create a relative export path next to jar file. \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                        + \"Defaulting to user\u0027s Desktop.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                currentSavePath \u003d PDF_ALT_SAVE_PATH;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static String getCurrentSavePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        return currentSavePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        List\u003cVolunteer\u003e lastShownList \u003d model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Handle case where the index input exceeds or equals the size of the last displayed list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Get the Volunteer object whom the index corresponds to"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        Volunteer selectedVolunteer \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Return CommandException if volunteer has no records"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        if (!hasEventRecords(model, selectedVolunteer)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            logger.info(\"Volunteer has no records.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            throw new CommandException(MESSAGE_VOLUNTEER_NO_RECORD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Try creating and exporting the PDF for the selected volunteer"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            createPdf(model, selectedVolunteer);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            throw new CommandException(MESSAGE_EXPORT_FAILED);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Return a success result"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_CERT_SUCCESS + currentSavePath, index.getOneBased()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * Checks if a {@code volunteer} has any event {@code record}s."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * @param model from which the {@code volunteer}\u0027s {@code record}s will be retrieved, if present"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * @param volunteer who\u0027s presence of event {@code record}s is to be checked"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * @return true if {@code volunteer} has {@code record}s, and false otherwise"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private boolean hasEventRecords(Model model, Volunteer volunteer) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        VolunteerId volunteerId \u003d volunteer.getVolunteerId();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Attempt to retrieve a list of the volunteer\u0027s records"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        List\u003cRecord\u003e eventRecords \u003d model.getFilteredRecordList()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                .filtered(new RecordContainsVolunteerIdPredicate(volunteerId));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        return !eventRecords.isEmpty();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * Creates and exports a PDF document containing a {@code volunteer}\u0027s data"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * @param model from which the volunteer\u0027s event records will be accessed"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * @param volunteer who\u0027s data is to be input into the PDF document"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private void createPdf(Model model, Volunteer volunteer) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Retrieve the selected volunteer\u0027s attributes"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        VolunteerId volunteerId \u003d volunteer.getVolunteerId();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        Name volunteerName \u003d volunteer.getName();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Retrieve the volunteer\u0027s event records"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        List\u003cRecord\u003e eventRecords \u003d model.getFilteredRecordList()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                .filtered(new RecordContainsVolunteerIdPredicate(volunteerId));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Create the new document"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        PDDocument doc \u003d new PDDocument();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Create a new page and add it to the document"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        PDPage page \u003d new PDPage();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        doc.addPage(page);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Setup a new content stream to write to a page"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        PDPageContentStream contStream \u003d new PDPageContentStream(doc, page);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Populate the PDF with necessary details"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.beginText();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.setLeading(20f);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Set title font"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        PDFont titleFont \u003d PDType1Font.TIMES_BOLD_ITALIC;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        float titleFontSize \u003d 24;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.setFont(titleFont, titleFontSize);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Input title to the center of the page"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String title \u003d \"Certificate of Recognition\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        float titleWidth \u003d titleFont.getStringWidth(title) * titleFontSize / 1000f;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLineAtOffset(page.getMediaBox().getWidth() / 2 - titleWidth / 2, 740);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.showText(title);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Volunteer Name, ID and current date section"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.setFont(PDType1Font.TIMES_BOLD_ITALIC, 14);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLineAtOffset(-(page.getMediaBox().getWidth() / 2 - titleWidth / 2) + 20, 0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String volunteerNameLine \u003d \"Volunteer Name: \" + volunteerName;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.showText(volunteerNameLine);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String volunteerIdLine \u003d \"Volunteer ID: \" + volunteerId;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.showText(volunteerIdLine);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.showText(\"Date: \" + String.valueOf(LocalDate.now().format(DateTimeFormatter"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                .ofPattern(\"dd-MM-yyyy\"))));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Reduce the leading for main body of certificate"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.setLeading(17f);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Standardised formality text"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String formalityTextLine1 \u003d \"To whomever it may concern,\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.showText(formalityTextLine1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String formalityTextLine2 \u003d \"This is to certify \" + volunteerName"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                + \"\u0027s contributions to our organisation via the following event(s):\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.showText(formalityTextLine2);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Event contribution information"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        for (Record r: eventRecords) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            // Information from event record"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            Hour eventHours \u003d r.getHour();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            EventId eventId \u003d r.getEventId();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            // Get the exact corresponding event object and extract information from it"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            List\u003cEvent\u003e filteredEventList \u003d model.getFilteredEventList()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                    .filtered(new EventContainsEventIdPredicate(eventId));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            assert(filteredEventList.size() \u003d\u003d 1); // Make sure no duplicate events"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            Event event \u003d filteredEventList.get(0);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            seedu.address.model.event.Name eventName \u003d event.getName();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            Date startDate \u003d event.getStartDate();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            Date endDate \u003d event.getEndDate();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            String eventEntryLine \u003d eventName + \" - \" + eventHours + \" hour(s) from \" + startDate + \" to \" + endDate;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            contStream.showText(\"\\u2022  \"); // bullet"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            contStream.showText(eventEntryLine);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            contStream.newLine();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String appreciationLine \u003d \"We greatly appreciate \" + volunteerName"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                + \"\u0027s services rendered to our organisation.\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.showText(appreciationLine);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String regardsLine \u003d \"Regards,\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.showText(regardsLine);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.newLine();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Line for user to manually sign off on the certificate"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.showText(\"___________________\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Close the content stream"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.endText();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        contStream.close();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Save document as \u003cvolunteerName\u003e_\u003cvolunteerId\u003e.pdf to the save path"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        doc.save(PDF_SAVE_PATH + volunteerName + \"_\" + volunteerId + \".pdf\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Close the document"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        doc.close();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Case: Both same object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Case: Handle null, not instance of"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        if (!(other instanceof ExportCertCommand)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Compare internal fields"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        ExportCertCommand e \u003d (ExportCertCommand) other;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sharan8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharan8": 274
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportEventXmlCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.parsers.DocumentBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.parsers.DocumentBuilderFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.parsers.ParserConfigurationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.transform.Transformer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.transform.TransformerException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.transform.TransformerFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.transform.dom.DOMSource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.transform.stream.StreamResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import org.w3c.dom.Attr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import org.w3c.dom.Document;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import org.w3c.dom.Element;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " * Export an Event information as an XML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "public class ExportEventXmlCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exporteventxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": exports an XML file of the event \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"given the file path to the xml file\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String MESSAGE_EXPORT_EVENT_SUCCESS \u003d \"Event at %1$d exported\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String MESSAGE_EXPORT_EVENT_FAILED \u003d \"Event export failed, please try again.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String TRANSFORMER_ERROR \u003d \"Transformer error.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String PARSER_ERROR \u003d \"Parser error.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String DEFAULT_SAVE_PATH \u003d System.getProperty(\"user.dir\") + \"/Event Xml/\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String ALT_SAVE_PATH \u003d System.getProperty(\"user.home\") + \"/Desktop/\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static String SAVE_PATH \u003d DEFAULT_SAVE_PATH;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final java.util.logging.Logger logger \u003d LogsCenter.getLogger(ExportEventXmlCommand.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private final String exportTypeE \u003d \"EVENT\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param index of volunteer or event in the filtered list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public ExportEventXmlCommand(Index index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //Create folder for output"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        File exportDir \u003d new File(DEFAULT_SAVE_PATH);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        if (!exportDir.exists()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                exportDir.mkdir();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            } catch (SecurityException se) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                logger.warning(\"Couldn\u0027t create a relative export path next to jar file. \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                        + \"Defaulting to user\u0027s Desktop.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                SAVE_PATH \u003d ALT_SAVE_PATH;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        List\u003cEvent\u003e list \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // Handle case where the index input exceeds or equals the size of the last displayed list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // Get the Event object whom the index corresponds to"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Event selectedEvent \u003d list.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            createEventXml(model, selectedEvent);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (TransformerException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new CommandException(MESSAGE_EXPORT_EVENT_FAILED + TRANSFORMER_ERROR);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (ParserConfigurationException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new CommandException(MESSAGE_EXPORT_EVENT_FAILED + PARSER_ERROR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        return new CommandResult(MESSAGE_EXPORT_EVENT_SUCCESS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * Helper method to do the file creation and data writing"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param model model to take the entire list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param event the specified event given on index"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @throws ParserConfigurationException - document builder errors"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @throws TransformerException - transformer writing error"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private void createEventXml(Model model, Event event) throws TransformerException,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            ParserConfigurationException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //setting up the document builders"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        DocumentBuilderFactory dbFactory \u003d DocumentBuilderFactory.newInstance();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        DocumentBuilder docuBuilder \u003d dbFactory.newDocumentBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Document doc \u003d docuBuilder.newDocument();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //root element - currently tag as event"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Element rootElement \u003d doc.createElement(exportTypeE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        doc.appendChild(rootElement);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //root attributes to this particular event listing the details"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr eventNameAttr \u003d doc.createAttribute(\"Name\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        eventNameAttr.setValue(event.getName().toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(eventNameAttr);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr eventStartDateAttr \u003d doc.createAttribute(\"Start Date\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        eventStartDateAttr.setValue(event.getStartDate().toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(eventStartDateAttr);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr eventStartTimeAttr \u003d doc.createAttribute(\"Start Time\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        eventStartTimeAttr.setValue(event.getStartTime().toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(eventStartTimeAttr);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr eventEndDateAttr \u003d doc.createAttribute(\"End Date\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        eventEndDateAttr.setValue(event.getEndDate().toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(eventEndDateAttr);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr eventEndTimeAttr \u003d doc.createAttribute(\"End Time\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        eventEndTimeAttr.setValue(event.getEndTime().toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(eventEndTimeAttr);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr eventLocationAttr \u003d doc.createAttribute(\"Location\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        eventLocationAttr.setValue(event.getLocation().toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(eventLocationAttr);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr eventDescriptionAttr \u003d doc.createAttribute(\"Description\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        eventDescriptionAttr.setValue(event.getDescription().toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(eventDescriptionAttr);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr eventIdAttr \u003d doc.createAttribute(\"Event ID\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        eventIdAttr.setValue(event.getEventId().toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(eventIdAttr);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //elements 1 level below root - this is used to store volunteers for the event"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // Setting up transformer"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        TransformerFactory transformerFactory \u003d TransformerFactory.newInstance();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Transformer transformer \u003d transformerFactory.newTransformer();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        DOMSource source \u003d new DOMSource(doc);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // Setting up file path"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        File output \u003d new File(SAVE_PATH"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                + event.getName().toString() + event.getEventId().toString()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                + \".xml\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // writing to file"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        StreamResult result \u003d new StreamResult(output);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        transformer.transform(source, result);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Scrubbius": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportVolunteerCsvCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " * Exports a person\u0027s volunteer information from SocialCare"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "public class ExportVolunteerCsvCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exportvolunteercsv\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports a CSV file of the volunteer \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"the specified index in the displayed volunteer list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"You can specify more than one volunteer to add to the CSV \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"by adding a whitespace after each index number\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"Parameters: INDEX1 (must be a positive integer) INDEX2 INDEX3 ...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2 3 4 5 6 7\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String MESSAGE_EXPORT_VOLUNTEER_SUCCESS \u003d \"Volunteer(s) exported as CSV \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String MESSAGE_EXPORT_VOLUNTEER_FAILED \u003d \"Volunteer(s) export failed, please try again.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String DEFAULT_SAVE_PATH \u003d System.getProperty(\"user.dir\") + \"/Volunteer Csv/\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String ALT_SAVE_PATH \u003d System.getProperty(\"user.home\") + \"/Desktop/\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static String SAVE_PATH \u003d DEFAULT_SAVE_PATH;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final java.util.logging.Logger logger \u003d LogsCenter.getLogger(ExportVolunteerCsvCommand.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private final ArrayList\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param index of volunteer or event in the filtered list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public ExportVolunteerCsvCommand(ArrayList\u003cIndex\u003e index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //Create folder for output"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        File exportDir \u003d new File(DEFAULT_SAVE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        if (!exportDir.exists()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                exportDir.mkdir();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            } catch (SecurityException se) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                logger.warning(\"Couldn\u0027t create a relative export path next to jar file. \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                        + \"Defaulting to user\u0027s Desktop.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                SAVE_PATH \u003d ALT_SAVE_PATH;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        List\u003cVolunteer\u003e list \u003d model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //Validate the given input within available index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        for (Index i : index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            // Handle case where the index input exceeds or equals the size of the last displayed list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            if (i.getZeroBased() \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            createVolunteerCsv(model.getFilteredVolunteerList(), index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new CommandException(index.size() + \" \" + MESSAGE_EXPORT_VOLUNTEER_FAILED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        return new CommandResult(index.size() + \" \" + MESSAGE_EXPORT_VOLUNTEER_SUCCESS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * Helper method to create and write the csv file given the volunteer"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param list to contain the list of volunteers from model"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param index to hold the list of indexes to export"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private void createVolunteerCsv(ObservableList\u003cVolunteer\u003e list,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                                    ArrayList\u003cIndex\u003e index) throws FileNotFoundException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // Setting up file path"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        File output \u003d new File(SAVE_PATH"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                + Integer.toString(index.size()) + \"volunteers.csv\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // Setting up writer \u0026 stringbuilder for appending"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        PrintWriter pw \u003d new PrintWriter(output);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        String csvSplit \u003d \",\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //appending column titles"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        sb.append(\"Name\" + csvSplit);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        sb.append(\"Gender\" + csvSplit);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        sb.append(\"Birthday\" + csvSplit);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        sb.append(\"Phone\" + csvSplit);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        sb.append(\"Email\" + csvSplit);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        sb.append(\"Address\" + csvSplit);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        sb.append(\"Tags\" + csvSplit);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        sb.append(\"VolunteerID\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        sb.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        for (Index i : index) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Volunteer volunteer \u003d list.get(i.getOneBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            //appending volunteer information accordingly"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            sb.append(volunteer.getName().toString() + csvSplit);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            sb.append(volunteer.getPhone().toString() + csvSplit);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            sb.append(volunteer.getAddress().toString() + csvSplit);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            sb.append(volunteer.getEmail().toString() + csvSplit);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            sb.append(volunteer.getBirthday().toString() + csvSplit);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            sb.append(volunteer.getGender().toString() + csvSplit);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            sb.append(volunteer.getTags().toString() + csvSplit);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            sb.append(volunteer.getVolunteerId().toString() + csvSplit);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            sb.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        pw.write(sb.toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        pw.close();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Scrubbius": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportVolunteerXmlCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.parsers.DocumentBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.parsers.DocumentBuilderFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.parsers.ParserConfigurationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.transform.Transformer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.transform.TransformerException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.transform.TransformerFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.transform.dom.DOMSource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import javax.xml.transform.stream.StreamResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import org.w3c.dom.Attr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import org.w3c.dom.Document;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import org.w3c.dom.Element;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.event.EventId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " * Exports a person\u0027s volunteer information from SocialCare"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "public class ExportVolunteerXmlCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exportvolunteerxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports an XML file of the volunteer \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"the specified index in the displayed volunteer list.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String MESSAGE_EXPORT_VOLUNTEER_SUCCESS \u003d \"Volunteer exported for volunteer at %1$d \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String MESSAGE_EXPORT_VOLUNTEER_FAILED \u003d \"Volunteer export failed, please try again.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String TRANSFORMER_ERROR \u003d \"Transformer error.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String PARSER_ERROR \u003d \"Parser error.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String DEFAULT_SAVE_PATH \u003d System.getProperty(\"user.dir\") + \"/Volunteer Xml/\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String ALT_SAVE_PATH \u003d System.getProperty(\"user.home\") + \"/Desktop/\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static String SAVE_PATH \u003d DEFAULT_SAVE_PATH;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final java.util.logging.Logger logger \u003d LogsCenter.getLogger(ExportVolunteerXmlCommand.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private final String exportTypeV \u003d \"VOLUNTEER\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param index of volunteer or event in the filtered list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public ExportVolunteerXmlCommand(Index index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //Create folder for output"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        File exportDir \u003d new File(DEFAULT_SAVE_PATH);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        if (!exportDir.exists()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                exportDir.mkdir();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            } catch (SecurityException se) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                logger.warning(\"Couldn\u0027t create a relative export path next to jar file. \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                        + \"Defaulting to user\u0027s Desktop.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                SAVE_PATH \u003d ALT_SAVE_PATH;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        List\u003cVolunteer\u003e list \u003d model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // Handle case where the index input exceeds or equals the size of the last displayed list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // Get the Volunteer object whom the index corresponds to"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Volunteer selectedVolunteer \u003d list.get(index.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            createVolunteerXml(model, selectedVolunteer);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (TransformerException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new CommandException(MESSAGE_EXPORT_VOLUNTEER_FAILED + TRANSFORMER_ERROR);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (ParserConfigurationException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new CommandException(MESSAGE_EXPORT_VOLUNTEER_FAILED + PARSER_ERROR);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        return new CommandResult(MESSAGE_EXPORT_VOLUNTEER_SUCCESS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * Creates and write an XML of the volunteer details \u0026 events to user desktop"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param volunteer who\u0027s data to write"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param model to access volunteer event records"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private void createVolunteerXml(Model model, Volunteer volunteer) throws TransformerException,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            ParserConfigurationException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //setting up the document builders"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        DocumentBuilderFactory dbFactory \u003d DocumentBuilderFactory.newInstance();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        DocumentBuilder docuBuilder \u003d dbFactory.newDocumentBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Document doc \u003d docuBuilder.newDocument();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //root element - currently tag as volunteer"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Element rootElement \u003d doc.createElement(exportTypeV);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        doc.appendChild(rootElement);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //root attributes to this particular volunteer listing the details"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr nameAttr \u003d doc.createAttribute(\"Name\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        nameAttr.setValue(volunteer.getName().toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(nameAttr);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr phoneAttr \u003d doc.createAttribute(\"Phone\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        phoneAttr.setValue(volunteer.getPhone().toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(phoneAttr);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr addressAttr \u003d doc.createAttribute(\"Address\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        addressAttr.setValue(volunteer.getAddress().toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(addressAttr);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr emailAttr \u003d doc.createAttribute(\"Email\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        emailAttr.setValue(volunteer.getEmail().toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(emailAttr);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr bdayAttr \u003d doc.createAttribute(\"Birthday\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        bdayAttr.setValue(volunteer.getBirthday().toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(bdayAttr);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr genderAttr \u003d doc.createAttribute(\"Gender\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        genderAttr.setValue(volunteer.getGender().toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(genderAttr);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr tagsAttr \u003d doc.createAttribute(\"Tags\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        tagsAttr.setValue(volunteer.getTags().toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(tagsAttr);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Attr idAttr \u003d doc.createAttribute(\"VolunteerID\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        idAttr.setValue(volunteer.getVolunteerId().toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        rootElement.setAttributeNode(idAttr);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        //elements 1 level below root - this is used to store events"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // Retrieve the volunteer\u0027s events"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        List\u003cRecord\u003e eventRecords \u003d model.getFilteredRecordList().filtered((x) -\u003e x.getVolunteerId()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                .equals(volunteer.getVolunteerId()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d eventRecords.size(); i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            //take note of 0 \u0026 1 indexing difference"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Element element \u003d doc.createElement(\"EVENT\" + Integer.toString(i));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Record r \u003d eventRecords.get(i - 1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            EventId eventId \u003d r.getEventId();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Event event \u003d model.getFilteredEventList().filtered(e -\u003e e.getEventId().equals(eventId)).get(0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            //set attr"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            //this is used to store event details"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Attr eventNameAttr \u003d doc.createAttribute(\"Name\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            eventNameAttr.setValue(event.getName().toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            element.setAttributeNode(eventNameAttr);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Attr eventStartDateAttr \u003d doc.createAttribute(\"Start Date\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            eventStartDateAttr.setValue(event.getStartDate().toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            element.setAttributeNode(eventStartDateAttr);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Attr eventStartTimeAttr \u003d doc.createAttribute(\"Start Time\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            eventStartTimeAttr.setValue(event.getStartTime().toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            element.setAttributeNode(eventStartTimeAttr);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Attr eventEndDateAttr \u003d doc.createAttribute(\"End Date\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            eventEndDateAttr.setValue(event.getEndDate().toString());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            element.setAttributeNode(eventEndDateAttr);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Attr eventEndTimeAttr \u003d doc.createAttribute(\"End Time\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            eventEndTimeAttr.setValue(event.getEndTime().toString());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            element.setAttributeNode(eventEndTimeAttr);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Attr eventLocationAttr \u003d doc.createAttribute(\"Location\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            eventLocationAttr.setValue(event.getLocation().toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            element.setAttributeNode(eventLocationAttr);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Attr eventDescriptionAttr \u003d doc.createAttribute(\"Description\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            eventDescriptionAttr.setValue(event.getDescription().toString());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            element.setAttributeNode(eventDescriptionAttr);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            Attr eventIdAttr \u003d doc.createAttribute(\"Event ID\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            eventIdAttr.setValue(eventId.toString());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            element.setAttributeNode(eventIdAttr);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            //append node"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            rootElement.appendChild(element);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // Setting up transformer"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        TransformerFactory transformerFactory \u003d TransformerFactory.newInstance();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Transformer transformer \u003d transformerFactory.newTransformer();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        DOMSource source \u003d new DOMSource(doc);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // Setting up file path"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        File output \u003d new File(SAVE_PATH"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                + volunteer.getName().toString() + \".xml\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        // writing to file"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        StreamResult result \u003d new StreamResult(output);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        transformer.transform(source, result);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Scrubbius": 219
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Finds and lists all volunteers in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all volunteers whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.updateFilteredVolunteerList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                String.format(Messages.MESSAGE_VOLUNTEERS_LISTED_OVERVIEW, model.getFilteredVolunteerList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 5,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportVolunteerCsvCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " * Imports a list of volunteers in csv format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "public class ImportVolunteerCsvCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public static final String FILE_ERROR \u003d \"Unable to locate the file directory given.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"Please check your file format and try again\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"importvolunteercsv\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String FORMAT_ERROR \u003d \"The CSV must have the following format:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \" Name, Phone, Address, Email, Birthday, Gender, Tags, VolunteerID\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports a CSV file of the volunteer \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"given the directory to the file.\" + FORMAT_ERROR;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String MESSAGE_FORMAT_ERROR \u003d FORMAT_ERROR + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"Please check the validity of your csv inputs and try again.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String MESSAGE_IMPORT_COMPLETED \u003d \"Volunteer(s) imported from CSV file \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"to your Desktop.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String MESSAGE_IMPORT_VOLUNTEER_FAILED \u003d \"Volunteer(s) import failed, please try again.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static final String MESSAGE_IMPORT_VOLUNTEER_LACK_INFO \u003d \"Volunteer information incomplete.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            + \"Please check format and try again\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private final FileReader csvFile;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param file to be read as a csv data"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public ImportVolunteerCsvCommand(FileReader file) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        csvFile \u003d file;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(csvFile);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            // this is the first line and it should be the title row"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            br.readLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new CommandException(MESSAGE_IMPORT_VOLUNTEER_FAILED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            String currLine;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            while ((currLine \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                String[] arrayLine \u003d currLine.split(\",(?\u003d([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                String args \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                for (String i : arrayLine) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                    if ( i !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                        args +\u003d i + \" \";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                args \u003d args.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                        ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                                PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                                PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER, PREFIX_BIRTHDAY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                        || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                    throw new CommandException(MESSAGE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                Address address \u003d ParserUtil.parseAddress("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                        argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                Volunteer volunteer \u003d new Volunteer(name, gender, birthday, phone, email, address, tagList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                if (!model.hasVolunteer(volunteer)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                    model.addVolunteer(volunteer);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new CommandException(MESSAGE_IMPORT_VOLUNTEER_FAILED);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new CommandException(MESSAGE_IMPORT_VOLUNTEER_LACK_INFO);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        return new CommandResult(MESSAGE_IMPORT_COMPLETED);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * Taken from addCommandParser"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Scrubbius": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VOLUNTEERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Lists all volunteers in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all volunteers.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Lists all events in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class ListEventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all events.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ManageCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VOLUNTEERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.events.ui.ContextChangeEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.events.ui.RecordChangeEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.RecordContainsEventIdPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Selects a volunteer identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class ManageCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"manage\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \": Manages the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Parameters: EVENT_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_MANAGE_EVENT_SUCCESS \u003d \"Selected Event to Manage: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ManageCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cEvent\u003e filteredEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredEventList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.switchToRecordContext();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.setSelectedEvent(filteredEventList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.updateFilteredRecordList(new RecordContainsEventIdPredicate("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                filteredEventList.get(targetIndex.getZeroBased()).getEventId()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.resetStatePointer();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        EventsCenter.getInstance().post(new RecordChangeEvent("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                filteredEventList.get(targetIndex.getZeroBased())));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        EventsCenter.getInstance().post(new ContextChangeEvent(model.getContextId()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MANAGE_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                filteredEventList.get(targetIndex.getZeroBased()).getName().fullName)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                + \" [\" + targetIndex.getOneBased() + \"]\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof ManageCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ManageCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 71,
      "afiqlattif": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OverviewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.OverviewPanelChangedEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Opens the overview panel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class OverviewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"overview\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_OVERVIEW_EVENT_SUCCESS \u003d \"Showing overview panel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        EventsCenter.getInstance().post(new OverviewPanelChangedEvent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_OVERVIEW_EVENT_SUCCESS));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || other instanceof OverviewCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 31,
      "iMarbles": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VOLUNTEERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.events.ui.RecordChangeEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (model.getContextId().equals(Context.RECORD_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            EventsCenter.getInstance().post(new RecordChangeEvent(model.getSelectedEvent()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 9,
      "afiqlattif": 4,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Selects a volunteer identified using it\u0027s displayed index from the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            + \": Selects the volunteer identified by the index number used in the displayed volunteer list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_SELECT_VOLUNTEER_SUCCESS \u003d \"Selected Volunteer: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        List\u003cVolunteer\u003e filteredVolunteerList \u003d model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredVolunteerList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_VOLUNTEER_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 9,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.JumpToEventListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.ReplaceWithContextPanelEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Selects an event identified using it\u0027s displayed index from the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class SelectEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \": Selects the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_SELECT_EVENT_SUCCESS \u003d \"Selected Event: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public SelectEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        List\u003cEvent\u003e filteredEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredEventList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        EventsCenter.getInstance().post(new ReplaceWithContextPanelEvent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToEventListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_EVENT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof SelectEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SWITCH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.ContextChangeEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Adds a volunteer to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches the context of the system \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + PREFIX_SWITCH + \"CONTEXT_ID\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + PREFIX_SWITCH + Context.VOLUNTEER_CONTEXT_ID;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Context switched to %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final String contextId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public SwitchCommand(String contextToSwitch) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(contextToSwitch);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        contextId \u003d contextToSwitch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.setCurrentContext(contextId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.updateFilteredVolunteerList(Model.PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.updateFilteredEventList(Model.PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        model.updateFilteredRecordList(Model.PREDICATE_SHOW_ALL_RECORDS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.resetStatePointer();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        EventsCenter.getInstance().post(new ContextChangeEvent(contextId));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getContextName()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 41,
      "Kratious": 5,
      "afiqlattif": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VOLUNTEERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.events.ui.RecordChangeEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (model.getContextId().equals(Context.RECORD_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            EventsCenter.getInstance().post(new RecordChangeEvent(model.getSelectedEvent()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 9,
      "afiqlattif": 4,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Parses input arguments and creates a new AddVolunteerCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddVolunteerCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * and returns an AddVolunteerCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER, PREFIX_BIRTHDAY,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteer \u003d new Volunteer(name, gender, birthday, phone, email, address, tagList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new AddCommand(volunteer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 23,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_EVENT_LOCATION, PREFIX_EVENT_START_DATE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        PREFIX_EVENT_END_DATE, PREFIX_EVENT_START_TIME, PREFIX_EVENT_END_TIME, PREFIX_EVENT_DESCRIPTION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_NAME, PREFIX_EVENT_LOCATION, PREFIX_EVENT_START_DATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        PREFIX_EVENT_END_DATE, PREFIX_EVENT_START_TIME, PREFIX_EVENT_END_TIME, PREFIX_EVENT_DESCRIPTION)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Name name \u003d ParserEventUtil.parseName(argMultimap.getValue(PREFIX_EVENT_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Location location \u003d ParserEventUtil.parseLocation(argMultimap.getValue(PREFIX_EVENT_LOCATION).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Date startDate \u003d ParserEventUtil.parseDate(argMultimap.getValue(PREFIX_EVENT_START_DATE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Date endDate \u003d ParserEventUtil.parseDate(argMultimap.getValue(PREFIX_EVENT_END_DATE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        ParserEventUtil.parseStartEndDate(argMultimap.getValue(PREFIX_EVENT_START_DATE).get(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                                argMultimap.getValue(PREFIX_EVENT_END_DATE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Time startTime \u003d ParserEventUtil.parseTime(argMultimap.getValue(PREFIX_EVENT_START_TIME).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Time endTime \u003d ParserEventUtil.parseTime(argMultimap.getValue(PREFIX_EVENT_END_TIME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        ParserEventUtil.parseStartEndTime(argMultimap.getValue(PREFIX_EVENT_START_TIME).get(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                                argMultimap.getValue(PREFIX_EVENT_END_TIME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Description description \u003d ParserEventUtil.parseDescription(argMultimap.getValue(PREFIX_EVENT_DESCRIPTION)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                                                                            .get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event person \u003d new Event(name, location, startDate, endDate, startTime, endTime, description, tagList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new AddEventCommand(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddRecordCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD_HOUR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.AddRecordCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Parses input arguments and creates a new AddRecordCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class AddRecordCommandParser implements Parser\u003cAddRecordCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddRecordCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * and returns an AddRecordCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public AddRecordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECORD_HOUR, PREFIX_RECORD_REMARK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecordCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Hour hour;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Remark remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECORD_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            hour \u003d ParserRecordUtil.parseHour((argMultimap.getValue(PREFIX_RECORD_HOUR).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            hour \u003d new Hour(\"0\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECORD_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            remark \u003d ParserRecordUtil.parseRemark((argMultimap.getValue(PREFIX_RECORD_REMARK).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            remark \u003d new Remark(\"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record record \u003d new Record(hour, remark);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new AddRecordCommand(index, record);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.AddRecordCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.DeleteRecordCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.EditRecordCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.ExportCertCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.ExportEventXmlCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.ExportVolunteerCsvCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.ExportVolunteerXmlCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.ImportVolunteerCsvCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.ListEventCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.ManageCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.OverviewCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.SelectEventCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param contextId the current context"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Command parseCommand(String userInput, String contextId) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // Shared Commands"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // Executes commands for events"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (contextId.equals(Context.EVENT_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return parseEventCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // Executes commands for volunteers"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (contextId.equals(Context.VOLUNTEER_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return parseVolunteerCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // Execute commands for records"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (contextId.equals(Context.RECORD_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return parseRecordCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses user input specifically for event commands for execution."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Command parseEventCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // Replace all these commands"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return new EditEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        case SelectEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return new SelectEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        case ListEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return new ListEventCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        case OverviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return new OverviewCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case ManageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new ManageCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        case ExportEventXmlCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            return new ExportEventXmlCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses user input specifically for volunteer commands for execution."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private Command parseVolunteerCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        case OverviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return new OverviewCommand();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case ExportCertCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new ExportCertCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        case ExportVolunteerCsvCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            return new ExportVolunteerCsvCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        case ExportVolunteerXmlCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            return new ExportVolunteerXmlCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        case ImportVolunteerCsvCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            return new ImportVolunteerCsvCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses user input specifically for record management commands for execution."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private Command parseRecordCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case AddRecordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new AddRecordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case EditRecordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new EditRecordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case DeleteRecordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new DeleteRecordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 73,
      "Kratious": 29,
      "Scrubbius": 25,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /* Switch Prefix definitions */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Prefix PREFIX_SWITCH \u003d new Prefix(\"-\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /* Volunteer Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /* Event Prefix definitions */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Prefix PREFIX_EVENT_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Prefix PREFIX_EVENT_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Prefix PREFIX_EVENT_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Prefix PREFIX_EVENT_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Prefix PREFIX_EVENT_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Prefix PREFIX_EVENT_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Prefix PREFIX_EVENT_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /* Record Prefix definitions */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Prefix PREFIX_RECORD_HOUR \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Prefix PREFIX_RECORD_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 5,
      "Kratious": 9,
      "afiqlattif": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Parses input arguments and creates a new DeleteVolunteerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteVolunteerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * and returns an DeleteVolunteerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Parses input arguments and creates a new DeleteEventCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * and returns an DeleteEventCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteRecordCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.DeleteRecordCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Parses input arguments and creates a new DeleteRecordCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class DeleteRecordCommandParser implements Parser\u003cDeleteRecordCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteRecordCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * and returns an DeleteRecordCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public DeleteRecordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new DeleteRecordCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditVolunteerDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Parses input arguments and creates a new EditVolunteerCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditVolunteerCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * and returns an EditVolunteerCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor editVolunteerDescriptor \u003d new EditVolunteerDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            editVolunteerDescriptor.setName(ParserUtil.parseName(argMultimap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    .getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            editVolunteerDescriptor.setGender(ParserUtil.parseGender(argMultimap"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    .getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            editVolunteerDescriptor.setBirthday(ParserUtil.parseBirthday(argMultimap"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    .getValue(PREFIX_BIRTHDAY).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            editVolunteerDescriptor.setPhone(ParserUtil.parsePhone(argMultimap"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    .getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            editVolunteerDescriptor.setEmail(ParserUtil.parseEmail(argMultimap"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    .getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            editVolunteerDescriptor.setAddress(ParserUtil.parseAddress(argMultimap"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    .getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editVolunteerDescriptor::setTags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!editVolunteerDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new EditCommand(index, editVolunteerDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 31,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Parses input arguments and creates a new EditEventCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * and returns an EditEventCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EditEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_EVENT_LOCATION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                PREFIX_EVENT_START_DATE, PREFIX_EVENT_END_DATE, PREFIX_EVENT_START_TIME, PREFIX_EVENT_END_TIME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                PREFIX_EVENT_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            index \u003d ParserEventUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            editEventDescriptor.setName(ParserEventUtil.parseName(argMultimap.getValue(PREFIX_EVENT_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            editEventDescriptor.setLocation(ParserEventUtil.parseLocation("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                            argMultimap.getValue(PREFIX_EVENT_LOCATION).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            editEventDescriptor.setStartDate(ParserEventUtil.parseDate("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                            argMultimap.getValue(PREFIX_EVENT_START_DATE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            editEventDescriptor.setEndDate(ParserEventUtil.parseDate("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                            argMultimap.getValue(PREFIX_EVENT_END_DATE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            editEventDescriptor.setStartTime(ParserEventUtil.parseTime("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                            argMultimap.getValue(PREFIX_EVENT_START_TIME).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            editEventDescriptor.setEndTime(ParserEventUtil.parseTime("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                            argMultimap.getValue(PREFIX_EVENT_END_TIME).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            editEventDescriptor.setDescription(ParserEventUtil.parseDescription("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                            argMultimap.getValue(PREFIX_EVENT_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEventDescriptor::setTags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new EditEventCommand(index, editEventDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditRecordCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD_HOUR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.EditRecordCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Parses input arguments and creates a new EditRecordCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class EditRecordCommandParser implements Parser\u003cEditRecordCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditRecordCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * and returns an EditRecordCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public EditRecordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECORD_HOUR, PREFIX_RECORD_REMARK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    EditRecordCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        EditRecordCommand.EditRecordDescriptor editRecordDescriptor \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                new EditRecordCommand.EditRecordDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECORD_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            editRecordDescriptor.setHour(ParserRecordUtil.parseHour("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    argMultimap.getValue(PREFIX_RECORD_HOUR).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECORD_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            editRecordDescriptor.setRemark(ParserRecordUtil.parseRemark("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    argMultimap.getValue(PREFIX_RECORD_REMARK).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!editRecordDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(EditRecordCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new EditRecordCommand(index, editRecordDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCertCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharan8"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.logic.commands.ExportCertCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharan8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharan8"
        },
        "content": " * Parses input arguments and creates a new {@code ExportCertCommand} object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharan8"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharan8"
        },
        "content": "public class ExportCertCommandParser implements Parser\u003cExportCertCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ExportCertCommand}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * and returns a {@code ExportCertCommand} object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * @param userInput as a {@code String}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * @return ExportCertCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * @throws ParseException if the user input does not abide by the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public ExportCertCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                    ExportCertCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        return new ExportCertCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharan8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharan8": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportEventXmlCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.ExportEventXmlCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " * Parses input arguments and creates a new {@code ExportEventXmlCommand} object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "public class ExportEventXmlCommandParser implements Parser\u003cExportEventXmlCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ExportEventXmlCommand}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * and returns a {@code ExportEventXmlCommand} object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param userInput as a {@code String}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @return ExportEventXmlCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @throws ParseException if the user input does not abide by the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public ExportEventXmlCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                    ExportEventXmlCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        return new ExportEventXmlCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Scrubbius": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportVolunteerCsvCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.ExportVolunteerCsvCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " * Parses input arguments and creates a new {@code ExportVolunteerCsvCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "public class ExportVolunteerCsvCommandParser implements Parser\u003cExportVolunteerCsvCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ExportVolunteerCsvCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * and returns a {@code ExportVolunteerCsvCommand} object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param userInput as a {@code String}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @return ExportVolunteerCsvCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @throws ParseException if the user input does not abide by the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public ExportVolunteerCsvCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        ArrayList\u003cIndex\u003e index \u003d new ArrayList\u003cIndex\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            String[] inputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            for ( String i : inputs ) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                index.add(ParserUtil.parseIndex(i));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                    ExportVolunteerCsvCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        return new ExportVolunteerCsvCommand(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Scrubbius": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportVolunteerXmlCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.ExportVolunteerXmlCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " * Parses input arguments and creates a new {@code ExportVolunteerXmlCommand} object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "public class ExportVolunteerXmlCommandParser implements Parser\u003cExportVolunteerXmlCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ExportVolunteerXmlCommand}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * and returns a {@code ExportVolunteerXmlCommand} object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param userInput as a {@code String}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @return ExportVolunteerXmlCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @throws ParseException if the user input does not abide by the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public ExportVolunteerXmlCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                    ExportVolunteerXmlCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        return new ExportVolunteerXmlCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Scrubbius": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Parses input arguments and creates a new FindVolunteerCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindVolunteerCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * and returns an FindVolunteerCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 4,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportVolunteerCsvCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.commands.ImportVolunteerCsvCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " * Parses input arguments and creates a new {@code ImportVolunteerCsvCommand} object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "public class ImportVolunteerCsvCommandParser implements Parser\u003cImportVolunteerCsvCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ImportVolunteerCsvCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * and returns a {@code ImportVolunteerCsvCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @param userInput as a {@code String}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @return ImportVolunteerCsvCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     * @throws ParseException if the user input does not abide by the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    public ImportVolunteerCsvCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            FileReader csvFile \u003d new FileReader(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            return new ImportVolunteerCsvCommand(csvFile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "                    ImportVolunteerCsvCommand.FILE_ERROR));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Scrubbius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Scrubbius": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ManageCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.ManageCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class ManageCommandParser implements Parser\u003cManageCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * and returns an ManageCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ManageCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new ManageCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserEventUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes for Event entity."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class ParserEventUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException(Location.MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses a {@code String startDate} and a {@code String endDate } to check if startDate comes before endDate."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the given {@code startDate} is before {@code endDate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static void parseStartEndDate(String startDate, String endDate) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String trimmedStartDate \u003d startDate.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String trimmedEndDate \u003d endDate.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Date start \u003d new Date(trimmedStartDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Date end \u003d new Date(trimmedEndDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!start.isLessThanOrEqualTo(end)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException(Event.MESSAGE_START_END_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses a {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException(Time.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses a {@code String startTime} and a {@code String endTime } to check if startTime comes before endTime."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the given {@code startTime} is before {@code endTime}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static void parseStartEndTime(String startTime, String endTime) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String trimmedStartTime \u003d startTime.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String trimmedEndTime \u003d endTime.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Time start \u003d new Time(trimmedStartTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Time end \u003d new Time(trimmedEndTime);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!start.isLessThanOrEqualTo(end)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException(Event.MESSAGE_START_END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Location.isValidLocation(trimmedDescription)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserRecordUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Remark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class ParserRecordUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses a {@code String hour} into a {@code Hour}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws ParseException if the given {@code hour} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static Hour parseHour(String hour) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(hour);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String trimmedHour \u003d hour.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!Hour.isValidHour(trimmedHour)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(Hour.MESSAGE_HOUR_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new Hour(trimmedHour);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses a {@code String remark} into a {@code Remark}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws ParseException if the given {@code remark} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses a {@code String commandName} into a {@code String}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws ParseException if the given {@code commandName} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static String parseCommandId(String commandId) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(commandId);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!Context.isValidContextId(commandId)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(Context.MESSAGE_CONTEXT_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return commandId;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Parses a {@code String birthday} into an {@code Birthday}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @throws ParseException if the given {@code birthday} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static Birthday parseBirthday(String birthday) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String trimmedBirthday \u003d birthday.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!Birthday.isValidBirthday(trimmedBirthday)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new ParseException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!Birthday.isLessThanOrEqualToValidBirthday(trimmedBirthday)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new ParseException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new Birthday(trimmedBirthday);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 16,
      "afiqlattif": 39,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Parses input arguments and creates a new SelectVolunteerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectVolunteerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * and returns an SelectVolunteerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 3,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.commands.SelectEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Parses input arguments and creates a new SelectEventCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class SelectEventCommandParser implements Parser\u003cSelectEventCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public SelectEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return new SelectEventCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SwitchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SWITCH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwitchCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * and returns an SwitchCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SWITCH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SWITCH)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String contextName \u003d ParserUtil.parseCommandId(argMultimap.getValue(PREFIX_SWITCH).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new SwitchCommand(contextName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.UniqueVolunteerList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Wraps all data at the application level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Duplicates are not allowed (by .isSameVolunteer and .isSameRecord comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final UniqueVolunteerList volunteers;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final UniqueRecordList records;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteers \u003d new UniqueVolunteerList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Creates an AddressBook using the Volunteers in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Replaces the contents of the volunteer list with {@code volunteers}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code volunteers} must not contain duplicate volunteers."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void setVolunteers(List\u003cVolunteer\u003e volunteers) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.volunteers.setVolunteers(volunteers);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Replaces the contents of the record list with {@code records}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code records} must not contain duplicate records."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.records.setRecords(records);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        setVolunteers(newData.getVolunteerList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        setRecords(newData.getRecordList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    //// volunteer-level operations"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if a volunteer with the same identity as {@code volunteer} exists in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean hasVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(volunteer);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return volunteers.contains(volunteer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Adds a volunteer to the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * The volunteer must not already exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void addVolunteer(Volunteer v) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteers.add(v);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Replaces the given volunteer {@code target} in the list with {@code editedVolunteer}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * The volunteer identity of {@code editedVolunteer} must not be the same as another existing volunteer in"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void updateVolunteer(Volunteer target, Volunteer editedVolunteer) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(editedVolunteer);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteers.setVolunteer(target, editedVolunteer);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void removeVolunteer(Volunteer key) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteers.remove(key);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Adds an event to the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The event must not already exist in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        events.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// record-level operations"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the database."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return records.contains(record);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Adds a record to the address book."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record must not already exist in the database"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void addRecord(Record r) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records.add(r);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Replaces the given record {@code target} in the list with {@code editedRecord}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code target} must exist in the database."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as another existing record in the database."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void updateRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(editedRecord);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records.setRecord(target, editedRecord);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code key} must exist in the database."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void removeRecord(Record key) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records.remove(key);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return volunteers.asUnmodifiableObservableList().size() + \" volunteers. \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                + events.asUnmodifiableObservableList().size() + \" events. \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                + records.asUnmodifiableObservableList() + \" records. \";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public ObservableList\u003cVolunteer\u003e getVolunteerList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return volunteers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return records.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 volunteers.equals(((AddressBook) other).volunteers)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 events.equals(((AddressBook) other).events)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 records.equals(((AddressBook) other).records));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return Objects.hash(volunteers, events, records);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 20,
      "iMarbles": 64,
      "afiqlattif": 36,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Context.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.hash;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SWITCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Represents a Context in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContextId(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class Context {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String EVENT_CONTEXT_ID \u003d \"e\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VOLUNTEER_CONTEXT_ID \u003d \"v\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String RECORD_CONTEXT_ID \u003d \"r\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String EVENT_CONTEXT_NAME \u003d \"events\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VOLUNTEER_CONTEXT_NAME \u003d \"volunteers\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String RECORD_CONTEXT_NAME \u003d \"volunteer records\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_CONTEXT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            \"Context can only be \" + PREFIX_SWITCH + EVENT_CONTEXT_ID + \" or \" + PREFIX_SWITCH + VOLUNTEER_CONTEXT_ID;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String contextId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String contextName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs an {@code Context}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param contextId A valid context string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Context(String contextId, String contextName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(contextId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        checkArgument(isValidContextId(contextId), MESSAGE_CONTEXT_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.contextId \u003d contextId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.contextName \u003d contextName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets a context"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setContextValue(String contextId) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(contextId);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        checkArgument(isValidContextId(contextId), MESSAGE_CONTEXT_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.contextId \u003d contextId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (contextId.equals(EVENT_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            contextName \u003d EVENT_CONTEXT_NAME;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (contextId.equals(VOLUNTEER_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            contextName \u003d VOLUNTEER_CONTEXT_NAME;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns the context id"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String getContextId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return contextId;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns the context name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String getContextName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return contextName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * External command to switch to manage context"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void switchToRecordContext() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.contextId \u003d RECORD_CONTEXT_ID;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.contextName \u003d RECORD_CONTEXT_NAME;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a given contextId is a valid contextId."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static boolean isValidContextId(String test) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (test.equals(EVENT_CONTEXT_ID) || test.equals(VOLUNTEER_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return \"Context Id: \" + contextId + \" \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                + \"Context Name: \" + contextName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof Context // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 contextId.equals(((Context) other).contextId)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 contextName.equals(((Context) other).contextName)); // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return hash(contextId, contextName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    Predicate\u003cVolunteer\u003e PREDICATE_SHOW_ALL_VOLUNTEERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    Predicate\u003cRecord\u003e PREDICATE_SHOW_ALL_RECORDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Context Switching Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets the context"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void setCurrentContext(String contextId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Switches to record context"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void switchToRecordContext();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns the context Id"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    String getContextId();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns context name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    String getContextName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets the currently selected event"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void setSelectedEvent(Event eventId);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns the event of the selected event."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    Event getSelectedEvent();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Volunteer Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if a volunteer with the same identity as {@code volunteer} exists in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    boolean hasVolunteer(Volunteer volunteer);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Deletes the given volunteer."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * The volunteer must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    void deleteVolunteer(Volunteer target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Adds the given volunteer."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code volunteer} must not already exist in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    void addVolunteer(Volunteer volunteer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Replaces the given volunteer {@code target} with {@code editedVolunteer}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * The volunteer identity of {@code editedVolunteer} must not be the same as another existing volunteer in"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    void updateVolunteer(Volunteer target, Volunteer editedVolunteer);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns an unmodifiable view of the filtered volunteer list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    ObservableList\u003cVolunteer\u003e getFilteredVolunteerList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Updates the filter of the filtered volunteer list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    void updateFilteredVolunteerList(Predicate\u003cVolunteer\u003e predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Event Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event must exist in the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code event} must not already exist in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    void updateEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an unmodifiable view of the filtered event list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Record Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the database."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    boolean hasRecord(Record record);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Deletes the given record."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record must exist in the database."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void deleteRecord(Record target);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Adds the given record."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code record} must not already exist in the database."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void addRecord(Record record);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Replaces the given record {@code target} with {@code editedRecord}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code target} must exist in the database."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as another existing record in the database."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void updateRecord(Record target, Record editedRecord);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an unmodifiable view of the filtered record list"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Updates the filter of the filtered record list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Undo/Redo Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Restore the model\u0027s address book to the initial state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void resetStatePointer();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 26,
      "iMarbles": 96,
      "afiqlattif": 20,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Context context;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private Event selectedEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final FilteredList\u003cVolunteer\u003e filteredVolunteers;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final FilteredList\u003cRecord\u003e filteredRecords;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        context \u003d new Context(Context.VOLUNTEER_CONTEXT_ID, Context.VOLUNTEER_CONTEXT_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        selectedEvent \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        filteredVolunteers \u003d new FilteredList\u003c\u003e(versionedAddressBook.getVolunteerList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(versionedAddressBook.getEventList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        filteredRecords \u003d new FilteredList\u003c\u003e(versionedAddressBook.getRecordList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Context Switching Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setCurrentContext(String contextId) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireAllNonNull(contextId);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        context.setContextValue(contextId);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void switchToRecordContext() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        context.switchToRecordContext();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String getContextId() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return context.getContextId();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String getContextName() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return context.getContextName();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setSelectedEvent(Event event) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        selectedEvent \u003d event;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Event getSelectedEvent() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return selectedEvent;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Volunteer List Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean hasVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(volunteer);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return versionedAddressBook.hasVolunteer(volunteer);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void deleteVolunteer(Volunteer target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        versionedAddressBook.removeVolunteer(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void addVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        versionedAddressBook.addVolunteer(volunteer);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void updateVolunteer(Volunteer target, Volunteer editedVolunteer) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireAllNonNull(target, editedVolunteer);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        versionedAddressBook.updateVolunteer(target, editedVolunteer);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Volunteer Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Volunteer} backed by the internal list of"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public ObservableList\u003cVolunteer\u003e getFilteredVolunteerList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredVolunteers);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void updateFilteredVolunteerList(Predicate\u003cVolunteer\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        filteredVolunteers.setPredicate(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Event List Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return versionedAddressBook.hasEvent(event);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        versionedAddressBook.removeEvent(target);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        versionedAddressBook.addEvent(event);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        versionedAddressBook.updateEvent(target, editedEvent);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredEvents);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Record List Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return versionedAddressBook.hasRecord(record);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void deleteRecord(Record target) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        versionedAddressBook.removeRecord(target);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        versionedAddressBook.addRecord(record);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORDS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void updateRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        versionedAddressBook.updateRecord(target, editedRecord);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Record List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Record} backed by the internal list of"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredRecords);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        filteredRecords.setPredicate(predicate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void resetStatePointer() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        versionedAddressBook.resetStatePointer();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 filteredVolunteers.equals(other.filteredVolunteers)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 28,
      "iMarbles": 85,
      "afiqlattif": 21,
      "-": 165
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Overview.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Contains methods used when calling the overview command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class Overview {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private ObservableList\u003cVolunteer\u003e volunteers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private ObservableList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private ObservableList\u003cRecord\u003e records;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    // Event-related stats"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int numOfOngoingEvents;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int numOfUpcomingEvents;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int numOfCompletedEvents;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    // Volunteer-related stats"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int numOfMale;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int numOfFemale;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int numOfChildren; //Age 14 and below"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int numOfYouth; //Age 15 to 24"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int numOfAdult; //Age 25 to 64"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int numOfSenior; //Age 65 and above"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Overview(ObservableList\u003cVolunteer\u003e volunteers,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    ObservableList\u003cEvent\u003e events,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    ObservableList\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.volunteers \u003d volunteers;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.records \u003d records;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        calculateNumOfEvents();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        calculateVolunteerDemographics();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int getNumOfOngoingEvents() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return numOfOngoingEvents;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int getNumOfUpcomingEvents() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return numOfUpcomingEvents;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int getNumOfCompletedEvents() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return numOfCompletedEvents;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int getNumOfMale() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return numOfMale;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int getNumOfFemale() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return numOfFemale;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int getNumOfChildren() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return numOfChildren;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int getNumOfYouth() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return numOfYouth;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int getNumOfAdult() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return numOfAdult;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int getNumOfSenior() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return numOfSenior;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This method helps to get the number of events for the respective types based on time."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void calculateNumOfEvents() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        numOfUpcomingEvents \u003d 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        numOfOngoingEvents \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        numOfCompletedEvents \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            Event e \u003d events.get(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            int status \u003d DateTimeUtil.getEventStatus(e.getStartDate(), e.getStartTime(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    e.getEndDate(), e.getEndTime());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (status \u003d\u003d DateTimeUtil.UPCOMING_EVENT) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                numOfUpcomingEvents++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (status \u003d\u003d DateTimeUtil.ONGOING_EVENT) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                numOfOngoingEvents++;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (status \u003d\u003d DateTimeUtil.COMPLETED_EVENT) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                numOfCompletedEvents++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This method helps to calculate the volunteer demographics."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void calculateVolunteerDemographics() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        numOfMale \u003d 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        numOfFemale \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        numOfChildren \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        numOfYouth \u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        numOfAdult \u003d 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        numOfSenior \u003d 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //create calendar object for current day"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        long currentTime \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        now.setTimeInMillis(currentTime);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (int i \u003d 0; i \u003c volunteers.size(); i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            Volunteer v \u003d volunteers.get(i);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (v.getGender().value.equals(Gender.GENDER_MALE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                numOfMale++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (v.getGender().value.equals(Gender.GENDER_FEMALE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                numOfFemale++;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            int age \u003d 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Date birthDate \u003d sdf.parse(v.getBirthday().value);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                age \u003d calculateAge(now, birthDate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (age \u003c\u003d 14) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                numOfChildren++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (age \u003e\u003d 15 \u0026\u0026 age \u003c\u003d 24) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                numOfYouth++;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (age \u003e\u003d 25 \u0026\u0026 age \u003c\u003d 64) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                numOfAdult++;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (age \u003e\u003d 65) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                numOfSenior++;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Calculate the age of a volunteer."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param now       DateTime today"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param birthDate Birth date of a volunteer"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @return integer age of volunteer"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int calculateAge(Calendar now, Date birthDate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        int years \u003d 0;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        int months \u003d 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //create calendar object for birth day"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Calendar birthDay \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        birthDay.setTimeInMillis(birthDate.getTime());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //Get difference between years"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        years \u003d now.get(Calendar.YEAR) - birthDay.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        int currMonth \u003d now.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        int birthMonth \u003d birthDay.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //Get difference between months"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        months \u003d currMonth - birthMonth;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //if month difference is in negative then reduce years by one"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //and calculate the number of months."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (months \u003c 0) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            years--;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            months \u003d 12 - birthMonth + currMonth;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (now.get(Calendar.DATE) \u003c birthDay.get(Calendar.DATE)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                months--;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        } else if (months \u003d\u003d 0 \u0026\u0026 now.get(Calendar.DATE) \u003c birthDay.get(Calendar.DATE)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            years--;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            months \u003d 11;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //Create new Age object"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return years;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iMarbles": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns an unmodifiable view of the volunteers list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * This list will not contain any duplicate volunteers."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    ObservableList\u003cVolunteer\u003e getVolunteerList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns an unmodifiable view of the events list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an unmodifiable view of the records list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This list will not contain any duplicate records."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    ObservableList\u003cRecord\u003e getRecordList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 3,
      "iMarbles": 6,
      "afiqlattif": 7,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        setGuiSettings(1000, 600, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBook extends AddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cReadOnlyAddressBook\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final ReadOnlyAddressBook initialState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public VersionedAddressBook(ReadOnlyAddressBook initialState) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.initialState \u003d initialState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(initialState));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Resets the state pointer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void resetStatePointer() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBookStateList.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBookStateList.add(new AddressBook(initialState));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves a copy of the current {@code AddressBook} state at the end of the state list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(this));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof VersionedAddressBook)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook otherVersionedAddressBook \u003d (VersionedAddressBook) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 11,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event\u0027s date in the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Event dates can take in DD-MM-YYYY input, and should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * First character of DD must be 0-3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * First character of MM must be 0 or 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Regex not enough to check for valid dates. Need to use a SimpleDateFormat parser as well."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"[0-3]\\\\d-[01]\\\\d-\\\\d{4}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param date A valid Date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!test.matches(DATE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        SimpleDateFormat df \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        df.setLenient(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            df.parse(test);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if current date falls on an earlier date or on the same date as the other date."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean isLessThanOrEqualTo(Date otherDate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (otherDate \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String[] dateParts \u003d this.toString().split(\"-\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        //parseInt ignores leading zeros like 01 or 09 when converting from String to int"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int year \u003d Integer.parseInt(dateParts[2]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int month \u003d Integer.parseInt(dateParts[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int day \u003d Integer.parseInt(dateParts[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String[] otherDateParts \u003d otherDate.toString().split(\"-\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int otherYear \u003d Integer.parseInt(otherDateParts[2]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int otherMonth \u003d Integer.parseInt(otherDateParts[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int otherDay \u003d Integer.parseInt(otherDateParts[0]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (year \u003e otherYear) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            //start year is more than end year"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else if (year \u003d\u003d otherYear \u0026\u0026 month \u003e otherMonth) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            //same year but start month is more than end month"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else if (year \u003d\u003d otherYear \u0026\u0026 month \u003d\u003d otherMonth \u0026\u0026 day \u003e otherDay) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            //same year, same month but start day is more than end day"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event\u0027s description in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return test.matches(DESCRIPTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_START_END_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Start date should only be earlier than or the same as end date\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_START_END_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Start time should only be earlier than or the same as end time\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    // Used to keep track of current max Id in the system"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static int maxId \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    // Used for record class"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private EventId eventId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Time startTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Time endTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Used when creating new Event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Event(Name name, Location location, Date startDate, Date endDate,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                 Time startTime, Time endTime, Description description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireAllNonNull(name, location, startDate, endDate, description, tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        incrementMaxId();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.eventId \u003d new EventId(maxId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidStartAndEndDate(startDate, endDate), MESSAGE_START_END_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidStartAndEndTime(startTime, endTime), MESSAGE_START_END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Used when loading data from XML and editing Event."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Event(EventId eventId, Name name, Location location, Date startDate, Date endDate,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                 Time startTime, Time endTime, Description description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireAllNonNull(eventId, name, location, startDate, endDate, description, tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (isEventIdGreaterThanMaxId(eventId.id)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            replaceMaxIdWithEventId(eventId.id);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidStartAndEndDate(startDate, endDate), MESSAGE_START_END_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidStartAndEndTime(startTime, endTime), MESSAGE_START_END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Increments the current maxId by 1."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void incrementMaxId() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        maxId +\u003d 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Checks if event id is greater than current max id."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param eventId event id from an existing event."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private boolean isEventIdGreaterThanMaxId(int eventId) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return eventId \u003e maxId;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces max id with new event id."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param eventId event id from an existing event."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void replaceMaxIdWithEventId(int eventId) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        maxId \u003d eventId;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given start date is less than or equal to end date."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidStartAndEndDate(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return startDate.isLessThanOrEqualTo(endDate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given start time is less than or equal to end time."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidStartAndEndTime(Time startTime, Time endTime) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return startTime.isLessThanOrEqualTo(endTime);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventId getEventId() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return eventId;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Time getStartTime() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Time getEndTime() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if both Events of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 (otherEvent.getLocation().equals(getLocation()) || otherEvent.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    || otherEvent.getEndDate().equals(getEndDate()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return Objects.hash(name, location, startDate, endDate, startTime, endTime, description, tags);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" Location: \").append(getLocation())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" Start Date: \").append(getStartDate())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" End Date: \").append(getEndDate())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" Start Time: \").append(getStartTime())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" End Time: \").append(getEndTime())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" Description: \").append(getDescription())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 237
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventContainsEventIdPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharan8"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharan8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharan8"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code EventId} matches the given EventId."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharan8"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharan8"
        },
        "content": "public class EventContainsEventIdPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private final EventId eventId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public EventContainsEventIdPredicate(EventId eventId) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        return event.getEventId().id \u003d\u003d eventId.id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                || (other instanceof EventContainsEventIdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                \u0026\u0026 eventId \u003d\u003d ((EventContainsEventIdPredicate) other).eventId); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharan8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharan8": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event\u0027s Id in the application. Event Id is used in identifying record entries."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidId(int)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EventId {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Id should be more than zero, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final int id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs an {@code id}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param id A valid id."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventId(int id) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidId(int test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return Integer.toString(id);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof EventId // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 id \u003d\u003d ((EventId) other).id); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return Objects.hash(id);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 35,
      "iMarbles": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Location.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event\u0027s location in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_LOCATION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Locations can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The first character of the location must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String LOCATION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return test.matches(LOCATION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event\u0027s name in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Time.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event\u0027s time in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Event times can take in HH:mm input, and should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * HH accepts 0-9, 1-9, 00-09, 10-19, 20-23"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * mm accepts 00-59"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"([01]?[0-9]|2[0-3]):[0-5][0-9]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs an {@code Time}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param time A valid Time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return test.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if current time occurs at an earlier period or at the same period as the other time."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean isLessThanOrEqualTo(Time otherTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (otherTime \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String[] timeParts \u003d this.toString().split(\":\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        //parseInt ignores leading zeros like 01 or 09 when converting from String to int"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int minute \u003d Integer.parseInt(timeParts[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int hour \u003d Integer.parseInt(timeParts[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String[] otherTimeParts \u003d otherTime.toString().split(\":\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int otherMinute \u003d Integer.parseInt(otherTimeParts[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int otherHour \u003d Integer.parseInt(otherTimeParts[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (hour \u003e otherHour) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            //start hour is more than end hour"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else if (hour \u003d\u003d otherHour \u0026\u0026 minute \u003e otherMinute) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            //same hour but start min is later than end min"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * unique in terms of identity in the UniqueEventList. However, the removal of a event uses Event#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * as to ensure that the event with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if the list contains an equivalent event as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        internalList.set(index, editedEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Removes the equivalent event from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        super(\"Operation would result in duplicate event\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EventNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Hour.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Represents an Hour in a record"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Guarantees: immutable; hour is valid as declared in {@link #isValidHour(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class Hour {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_HOUR_CONSTRAINTS \u003d \"Hour can only be a positive integer.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String HOUR_VALIDATION_REGEX \u003d \"\\\\p{Digit}+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param hour A valid hour."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Hour(String hour) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(hour);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        checkArgument(isValidHour(hour), MESSAGE_HOUR_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.value \u003d hour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a given string is a valid hour."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static boolean isValidHour(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return test.matches(HOUR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof Hour // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 value.equals(((Hour) other).value)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Record.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.event.EventId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.VolunteerId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Represents a volunteer\u0027s event record in application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class Record {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final EventId eventId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final VolunteerId volunteerId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Hour hour;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int localIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String volunteerName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String phoneNo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Record(EventId eventId, VolunteerId volunteerId, Hour hour, Remark remark) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireAllNonNull(eventId, volunteerId, hour, remark);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.volunteerId \u003d volunteerId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Record(Hour hour, Remark remark) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireAllNonNull(hour, remark);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.eventId \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.volunteerId \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public EventId getEventId() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return eventId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerId getVolunteerId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return volunteerId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Hour getHour() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return hour;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int getLocalIndex() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return localIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String getVolunteerName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return volunteerName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String getPhoneNo() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return phoneNo;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setLocalIndex(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.localIndex \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setVolunteerName(String name) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.volunteerName \u003d name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setPhoneNo(String phoneNo) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.phoneNo \u003d phoneNo;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if both records have the same eventId and volunteerId"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This defines a weaker notion of equality between two records."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean isSameRecord(Record otherRecord) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (otherRecord \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return otherRecord !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 otherRecord.getEventId().equals(getEventId())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 otherRecord.getVolunteerId().equals(getVolunteerId());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if both records have the same identity and data fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This defines a stronger notion of equality between two records."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!(other instanceof Record)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record otherRecord \u003d (Record) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return otherRecord.getEventId().equals(getEventId())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 otherRecord.getVolunteerId().equals(getVolunteerId())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 otherRecord.getHour().equals(getHour())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 otherRecord.getRemark().equals(getRemark());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return Objects.hash(eventId, volunteerId, hour, remark);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        builder.append(getVolunteerName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .append(\" Hour: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .append(getHour())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .append(getRemark());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 132,
      "afiqlattif": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/RecordContainsEventIdPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.event.EventId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Tests that a {@code Record}\u0027s {@code EventId} matches the given EventId."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RecordContainsEventIdPredicate implements Predicate\u003cRecord\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final EventId eventId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordContainsEventIdPredicate(EventId eventId) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean test(Record record) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return record.getEventId().id \u003d\u003d eventId.id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof RecordContainsEventIdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 eventId \u003d\u003d ((RecordContainsEventIdPredicate) other).eventId); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/RecordContainsVolunteerIdPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.volunteer.VolunteerId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Tests that a {@code Record}\u0027s {@code personId} matches the given PersonId."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RecordContainsVolunteerIdPredicate implements Predicate\u003cRecord\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final VolunteerId volunteerId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordContainsVolunteerIdPredicate(VolunteerId volunteerId) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.volunteerId \u003d volunteerId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean test(Record record) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return record.getVolunteerId().id \u003d\u003d volunteerId.id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof RecordContainsVolunteerIdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 volunteerId \u003d\u003d ((RecordContainsVolunteerIdPredicate) other).volunteerId); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Remark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Represents a Remark in a record"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Guarantees: immutable; remark is valid as declared in {@link #isValidRemark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d \"Remarks can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String REMARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        checkArgument(isValidRemark(remark), MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.value \u003d remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return test.matches(REMARK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/UniqueRecordList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * A list of records that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * A record is considered unique by comparing using {@code Record#isSameRecord(Record)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * records uses Record#isSameRecord(Record) for equality so as to ensure that the record being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * unique in terms of identity in the UniqueRecordList. However, the removal of a record uses Record#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * as to ensure that the record with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * @see Record#isSameRecord(Record)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class UniqueRecordList implements Iterable\u003cRecord\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if the list contains an equivalent volunteer as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean contains(Record toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecord);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Adds a record to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void add(Record toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Replaces the record {@code target} in the list with {@code editedRecord}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as another existing record in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!target.isSameRecord(editedRecord) \u0026\u0026 contains(editedRecord)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        internalList.set(index, editedRecord);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Removes the equivalent record from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void remove(Record toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords(UniqueRecordList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Replaces the contents of this list with {@code records}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code records} must not contain duplicate records."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireAllNonNull(records);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!recordsAreUnique(records)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        internalList.setAll(records);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ObservableList\u003cRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Iterator\u003cRecord\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof UniqueRecordList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRecordList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if {@code records} contains only unique persons."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private boolean recordsAreUnique(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (int i \u003d 0; i \u003c records.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            for (int j \u003d i + 1; j \u003c records.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                if (records.get(i).isSameRecord(records.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 134,
      "afiqlattif": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/exceptions/DuplicateRecordException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Signals that the operation will result in duplicate Records (Records are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class DuplicateRecordException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public DuplicateRecordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        super(\"Operation would result in duplicate records\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/exceptions/RecordNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Signals that the operation is unable to find the specified record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RecordNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.event.EventId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.VolunteerId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static Volunteer[] getSampleVolunteers() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new Volunteer[]{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            new Volunteer(new Name(\"Alex Yeoh\"), new Gender(\"m\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    new Birthday(\"02-10-1996\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    getTagSet(\"student\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            new Volunteer(new Name(\"Bernice Yu\"), new Gender(\"f\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    new Birthday(\"15-03-1995\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    getTagSet(\"student\", \"driver\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            new Volunteer(new Name(\"Charlotte Oliveiro\"), new Gender(\"f\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    new Birthday(\"17-09-1992\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    getTagSet(\"adult\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            new Volunteer(new Name(\"David Li\"), new Gender(\"m\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    new Birthday(\"28-04-1994\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    getTagSet(\"student\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            new Volunteer(new Name(\"Irfan Ibrahim\"), new Gender(\"m\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    new Birthday(\"10-12-2000\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    getTagSet(\"student\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            new Volunteer(new Name(\"Roy Balakrishnan\"), new Gender(\"m\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    new Birthday(\"01-01-1984\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    getTagSet(\"adult\"))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Event[]{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Blood Donation Drive 2018\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    new Location(\"750E Chai Chee Road\"), new Date(\"02-10-2018\"), new Date(\"05-10-2018\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    new Time(\"11:30\"), new Time(\"17:30\"), new Description(\"Donation drive for blood.\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    getTagSet(\"Public\", \"Donation\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Youth Humanitarian Challenge\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    new Location(\"29 Havelock Road\"), new Date(\"28-09-2018\"), new Date(\"28-09-2018\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    new Time(\"10:00\"), new Time(\"14:00\"), new Description(\"To engage youths in humanitarianism.\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    getTagSet(\"Competition\")),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        };"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static Record[] getSampleRecord() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new Record[]{"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            new Record(new EventId(1), new VolunteerId(1), new Hour(\"1\"), new Remark(\"Emcee\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            new Record(new EventId(2), new VolunteerId(1), new Hour(\"1\"), new Remark(\"Delivery Man\"))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        for (Volunteer sampleVolunteer : getSampleVolunteers()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            sampleAb.addVolunteer(sampleVolunteer);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            sampleAb.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (Record sampleRecord : getSampleRecord()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            sampleAb.addRecord(sampleRecord);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 21,
      "iMarbles": 17,
      "afiqlattif": 36,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Represents a Volunteer\u0027s address in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Birthday.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Represents an Volunteer\u0027s birthday in the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class Birthday {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_BIRTHDAY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            \"Birthday dates can take in DD-MM-YYYY input, should be a valid date , and should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * First character of DD must be 0-3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * First character of MM must be 0 or 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Regex not enough to check for valid dates. Need to use a SimpleDateFormat parser as well."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String BIRTHDAY_VALIDATION_REGEX \u003d \"[0-3]\\\\d-[01]\\\\d-\\\\d{4}\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final int BIRTHDAY_VALIDATION_DIFFERENCE \u003d 7;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final int BIRTHDAY_MONTH_CORRECTION \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Constructs a {@code Birthday}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @param birthday A valid Birthday."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Birthday(String birthday) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        checkArgument(isValidBirthday(birthday), MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        checkArgument(isLessThanOrEqualToValidBirthday(birthday), MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        value \u003d birthday;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if a given string is a valid birthday."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static boolean isValidBirthday(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!test.matches(BIRTHDAY_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        SimpleDateFormat df \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        df.setLenient(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            df.parse(test);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if current date falls on an earlier date or on the same date as the valid date."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static boolean isLessThanOrEqualToValidBirthday(String test) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Calendar calendar \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String[] birthdayParts \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        //parseInt ignores leading zeros like 01 or 09 when converting from String to int"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int year \u003d Integer.parseInt(birthdayParts[2]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int month \u003d Integer.parseInt(birthdayParts[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int day \u003d Integer.parseInt(birthdayParts[0]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int otherYear \u003d calendar.get(Calendar.YEAR) - BIRTHDAY_VALIDATION_DIFFERENCE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int otherMonth \u003d calendar.get(Calendar.MONTH) + BIRTHDAY_MONTH_CORRECTION;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int otherDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (year \u003e otherYear) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            //start year is more than end year"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        } else if (year \u003d\u003d otherYear \u0026\u0026 month \u003e otherMonth) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            //same year but start month is more than end month"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        } else if (year \u003d\u003d otherYear \u0026\u0026 month \u003d\u003d otherMonth \u0026\u0026 day \u003e otherDay) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            //same year, same month but start day is more than end day"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                || (other instanceof Birthday // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 value.equals(((Birthday) other).value)); // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Represents a Volunteer\u0027s email in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Represents a Volunteer\u0027s gender in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_GENDER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            \"Gender should only contain m (for male), or f (for female), and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Gender must only be m (for male) or f (for female)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String GENDER_MALE_VALIDATION_REGEX \u003d \"m\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String GENDER_FEMALE_VALIDATION_REGEX \u003d \"f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Constructs a {@code Gender}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @param gender A valid gender."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        value \u003d gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if a given string is a valid gender."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return test.matches(GENDER_MALE_VALIDATION_REGEX)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                || test.matches(GENDER_FEMALE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Represents a Volunteer\u0027s name in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Tests that a {@code Volunteer}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cVolunteer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean test(Volunteer volunteer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(volunteer.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Represents a Volunteer\u0027s phone number in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/UniqueVolunteerList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.exceptions.DuplicateVolunteerException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.exceptions.VolunteerNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * A list of volunteers that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * A volunteer is considered unique by comparing using {@code Volunteer#isSameVolunteer(volunteer)}. As such, adding"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * and updating of volunteers uses Volunteer#isSameVolunteer(Volunteer) for equality so as to ensure that the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * volunteer being added or updated is unique in terms of identity in the UniqueVolunteerList. However, the removal of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * a volunteer uses Volunteer#equals(Object) so as to ensure that the volunteer with exactly the same fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * @see Volunteer#isSameVolunteer(Volunteer)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class UniqueVolunteerList implements Iterable\u003cVolunteer\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final ObservableList\u003cVolunteer\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if the list contains an equivalent volunteer as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean contains(Volunteer toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameVolunteer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Adds a volunteer to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * The volunteer must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void add(Volunteer toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new DuplicateVolunteerException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Replaces the volunteer {@code target} in the list with {@code editedVolunteer}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * The volunteer identity of {@code editedVolunteer} must not be the same as another existing volunteer in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void setVolunteer(Volunteer target, Volunteer editedVolunteer) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireAllNonNull(target, editedVolunteer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new VolunteerNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!target.isSameVolunteer(editedVolunteer) \u0026\u0026 contains(editedVolunteer)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new DuplicateVolunteerException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        internalList.set(index, editedVolunteer);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Removes the equivalent volunteer from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * The volunteer must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void remove(Volunteer toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new VolunteerNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void setVolunteers(UniqueVolunteerList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Replaces the contents of this list with {@code volunteers}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code volunteers} must not contain duplicate volunteers."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void setVolunteers(List\u003cVolunteer\u003e volunteers) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireAllNonNull(volunteers);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!volunteersAreUnique(volunteers)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new DuplicateVolunteerException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        internalList.setAll(volunteers);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public ObservableList\u003cVolunteer\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Iterator\u003cVolunteer\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                || (other instanceof UniqueVolunteerList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueVolunteerList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if {@code volunteers} contains only unique volunteers."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private boolean volunteersAreUnique(List\u003cVolunteer\u003e volunteers) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        for (int i \u003d 0; i \u003c volunteers.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            for (int j \u003d i + 1; j \u003c volunteers.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                if (volunteers.get(i).isSameVolunteer(volunteers.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Volunteer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Represents a Volunteer in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class Volunteer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    // Used to keep track of current max Id in the system"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static int maxId \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final VolunteerId volunteerId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Birthday birthday;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Used when creating new Volunteer. Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Volunteer(Name name, Gender gender, Birthday birthday, Phone phone, Email email,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                     Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireAllNonNull(name, gender, birthday, phone, email, address, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        incrementMaxId();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.volunteerId \u003d new VolunteerId(maxId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Used when loading data from XML and editing Volunteer."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Volunteer(VolunteerId volunteerId, Name name, Gender gender, Birthday birthday,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                     Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireAllNonNull(volunteerId, name, phone, email, address, tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (isVolunteerIdGreaterThanMaxId(volunteerId.id)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            replaceMaxIdWithVolunteerId(volunteerId.id);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.volunteerId \u003d volunteerId;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Increments the current maxId by 1."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void incrementMaxId() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        maxId +\u003d 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Checks if volunteer id is greater than current max id."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @param volunteerId event id from an existing volunteer."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private boolean isVolunteerIdGreaterThanMaxId(int volunteerId) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return volunteerId \u003e maxId;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Replaces max id with volunteer id."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @param volunteerId event id from an existing volunteer."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void replaceMaxIdWithVolunteerId(int volunteerId) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        maxId \u003d volunteerId;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerId getVolunteerId() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return volunteerId;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Birthday getBirthday() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if both volunteers of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * This defines a weaker notion of equality between two volunteers."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean isSameVolunteer(seedu.address.model.volunteer.Volunteer otherVolunteer) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (otherVolunteer \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return otherVolunteer !\u003d null"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 otherVolunteer.getName().equals(getName())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 (otherVolunteer.getPhone().equals(getPhone()) || otherVolunteer.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if both volunteers have the same identity and data fields."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * This defines a stronger notion of equality between two volunteers."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!(other instanceof seedu.address.model.volunteer.Volunteer)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        seedu.address.model.volunteer.Volunteer otherVolunteer \u003d (seedu.address.model.volunteer.Volunteer) other;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return otherVolunteer.getName().equals(getName())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 otherVolunteer.getGender().equals(getGender())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 otherVolunteer.getBirthday().equals(getBirthday())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 otherVolunteer.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 otherVolunteer.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 otherVolunteer.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 otherVolunteer.getTags().equals(getTags());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return Objects.hash(name, gender, birthday, phone, email, address, tags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(\" Birthday: \")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(getBirthday())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/VolunteerId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Represents an Volunteer\u0027s Id in the application. Volunteer Id is used in identifying record entries."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidId(int)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerId {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            \"Id should be more than zero, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public final int id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Constructs an {@code id}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @param id A valid id."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerId(int id) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static boolean isValidId(int test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return Integer.toString(id);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                || (other instanceof VolunteerId // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 id \u003d\u003d ((VolunteerId) other).id); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return Objects.hash(id);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/exceptions/DuplicateVolunteerException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Signals that the operation will result in duplicate Volunteers (Volunteers are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class DuplicateVolunteerException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public DuplicateVolunteerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        super(\"Operation would result in duplicate volunteers\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/exceptions/VolunteerNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.model.volunteer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Signals that the operation is unable to find the specified volunteer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.EventId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * JAXB-friendly version of the Event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class XmlAdaptedEvent {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private int eventId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public XmlAdaptedEvent() {}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given event details."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public XmlAdaptedEvent(int eventId, String name, String location, String startDate, String endDate,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                           String startTime, String endTime, String description, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Converts a given Event into this class for JAXB use."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedEvent"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public XmlAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventId \u003d source.getEventId().id;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startDate \u003d source.getStartDate().value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endDate \u003d source.getEndDate().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startTime \u003d source.getStartTime().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endTime \u003d source.getEndTime().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Converts this jaxb-friendly adapted event object into the model\u0027s Event object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final List\u003cTag\u003e eventTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            eventTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (eventId \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, EventId.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!EventId.isValidId(eventId)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(EventId.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        EventId modelEventId \u003d new EventId(eventId);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                            Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Date.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Date modelStartDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Date.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Date modelEndDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Time.isValidTime(startTime)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Time modelStartTime \u003d new Time(startTime);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Time.isValidTime(endTime)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Time modelEndTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(eventTags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Event(modelEventId, modelName, modelLocation, modelStartDate, modelEndDate, modelStartTime,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                            modelEndTime, modelDescription, modelTags);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!(other instanceof XmlAdaptedEvent)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent otherPerson \u003d (XmlAdaptedEvent) other;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(location, otherPerson.location)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(startDate, otherPerson.startDate)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(endDate, otherPerson.endDate)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(startTime, otherPerson.startTime)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(endTime, otherPerson.endTime)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(description, otherPerson.description)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.event.EventId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.VolunteerId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class XmlAdaptedRecord {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int eventId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private int volunteerId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String hour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs an XmlAdaptedRecord."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public XmlAdaptedRecord() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs an {@code XmlAdaptedRecord} with the given record details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public XmlAdaptedRecord(int eventId, int volunteerId, String hour, String remark) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.volunteerId \u003d volunteerId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Converts a given Record into this class for JAXB use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedRecord"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public XmlAdaptedRecord(Record source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        eventId \u003d source.getEventId().id;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        volunteerId \u003d source.getVolunteerId().id;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        hour \u003d source.getHour().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Converts this jaxb-friendly adapted record object into the model\u0027s Record object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted record"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Record toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!EventId.isValidId(eventId)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(EventId.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        final EventId modelEventId \u003d new EventId(eventId);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!VolunteerId.isValidId(volunteerId)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(VolunteerId.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final VolunteerId modelVolunteerId \u003d new VolunteerId(volunteerId);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (hour \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!Hour.isValidHour(hour)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(Hour.MESSAGE_HOUR_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        final Hour modelHour \u003d new Hour(hour);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!Remark.isValidRemark(remark)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new Record(modelEventId, modelVolunteerId, modelHour, modelRemark);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!(other instanceof XmlAdaptedRecord)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord otherRecord \u003d (XmlAdaptedRecord) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return Objects.equals(eventId, otherRecord.eventId)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 Objects.equals(volunteerId, otherRecord.volunteerId)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 Objects.equals(hour, otherRecord.hour)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 Objects.equals(remark, otherRecord.remark);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 106,
      "afiqlattif": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted volunteer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedVolunteer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.VolunteerId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * JAXB-friendly version of the Volunteer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class XmlAdaptedVolunteer {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Volunteer\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private int volunteerId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private String birthday;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Constructs an XmlAdaptedVolunteer."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public XmlAdaptedVolunteer() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Constructs an {@code XmlAdaptedVolunteer} with the given volunteer details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public XmlAdaptedVolunteer(String name, String gender, String birthday, String phone, String email,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                            String address, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Constructs an {@code XmlAdaptedVolunteer} with the given volunteer details."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public XmlAdaptedVolunteer(int volunteerId, String name, String gender, String birthday, String phone,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                            String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.volunteerId \u003d volunteerId;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Converts a given Volunteer into this class for JAXB use."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedVolunteer"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public XmlAdaptedVolunteer(Volunteer source) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerId \u003d source.getVolunteerId().id;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        gender \u003d source.getGender().value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        birthday \u003d source.getBirthday().value;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Converts this jaxb-friendly adapted volunteer object into the model\u0027s Volunteer object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted volunteer"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Volunteer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final List\u003cTag\u003e volunteerTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            volunteerTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (volunteerId \u003d\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    VolunteerId.class.getSimpleName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!VolunteerId.isValidId(volunteerId)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(VolunteerId.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        VolunteerId modelVolunteerId \u003d new VolunteerId(volunteerId);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (birthday \u003d\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    Birthday.class.getSimpleName()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!Birthday.isValidBirthday(birthday)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!Birthday.isLessThanOrEqualToValidBirthday(birthday)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final Birthday modelBirthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(volunteerTags);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new Volunteer(modelVolunteerId, modelName, modelGender, modelBirthday, modelPhone,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!(other instanceof XmlAdaptedVolunteer)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer otherVolunteer \u003d (XmlAdaptedVolunteer) other;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return Objects.equals(name, otherVolunteer.name)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 Objects.equals(gender, otherVolunteer.gender)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 Objects.equals(birthday, otherVolunteer.birthday)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherVolunteer.phone)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherVolunteer.email)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherVolunteer.address)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 tagged.equals(otherVolunteer.tagged);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 207
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VOLUNTEER \u003d \"Volunteers list contains duplicate volunteer(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"Record list contains duplicate record(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private List\u003cXmlAdaptedVolunteer\u003e volunteers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private List\u003cXmlAdaptedEvent\u003e events;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private List\u003cXmlAdaptedRecord\u003e records;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteers.addAll(src.getVolunteerList().stream().map(XmlAdaptedVolunteer::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records.addAll(src.getRecordList().stream().map(XmlAdaptedRecord::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *                               in the {@code XmlAdaptedPerson} or {@code XmlAdaptedRecord}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        for (XmlAdaptedVolunteer v : volunteers) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            Volunteer volunteer \u003d v.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            if (addressBook.hasVolunteer(volunteer)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            addressBook.addVolunteer(volunteer);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        for (XmlAdaptedEvent e : events) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            Event event \u003d e.toModelType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            if (addressBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            addressBook.addEvent(event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (XmlAdaptedRecord r : records) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            Record record \u003d r.toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (addressBook.hasRecord(record)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            addressBook.addRecord(record);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return volunteers.equals(((XmlSerializableAddressBook) other).volunteers)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 events.equals(((XmlSerializableAddressBook) other).events)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 records.equals(((XmlSerializableAddressBook) other).records);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 10,
      "iMarbles": 18,
      "afiqlattif": 14,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ContextIndicator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.ContextChangeEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * An UI component that displays information of the {@code Context}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class ContextIndicator extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String FXML \u003d \"ContextIndicator.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label contextName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public ContextIndicator(String contextId) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        setContextName(contextId);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void handleContextChangeEvent(ContextChangeEvent event) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        setContextName(event.getNewContext());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void setContextName(String contextId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (contextId.equals(Context.VOLUNTEER_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            contextName.setText(Context.VOLUNTEER_CONTEXT_NAME.substring(0, 1).toUpperCase()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    + Context.VOLUNTEER_CONTEXT_NAME.substring(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else if (contextId.equals(Context.EVENT_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            contextName.setText(Context.EVENT_CONTEXT_NAME.substring(0, 1).toUpperCase()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    + Context.EVENT_CONTEXT_NAME.substring(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else if (contextId.equals(Context.RECORD_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            contextName.setText(Context.RECORD_CONTEXT_NAME.substring(0, 1).toUpperCase()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    + Context.RECORD_CONTEXT_NAME.substring(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * An UI component that displays information of an {@code Event}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label eventLocation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        name.setText(event.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventLocation.setText(event.getLocation().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startDate.setText(DateTimeUtil.getFriendlyDateFromEventDate(event.getStartDate()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!event.getStartDate().equals(event.getEndDate())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            endDate.setText(\" - \" + DateTimeUtil.getFriendlyDateFromEventDate(event.getEndDate()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            endDate.setText(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String friendlyStartTime \u003d DateTimeUtil.getFriendlyTimeFromEventTime(event.getStartTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String friendlyEndTime \u003d DateTimeUtil.getFriendlyTimeFromEventTime(event.getEndTime());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startTime.setText(friendlyStartTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!friendlyStartTime.equals(friendlyEndTime)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            endTime.setText(\" - \" + friendlyEndTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            endTime.setText(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int status \u003d DateTimeUtil.getEventStatus(event.getStartDate(), event.getStartTime(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                                        event.getEndDate(), event.getEndTime());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (status !\u003d DateTimeUtil.INVALID_STATUS) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            Label statusLabel \u003d new Label(DateTimeUtil.STATUS[status]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            statusLabel.getStyleClass().add(DateTimeUtil.STATUS[status]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            tags.getChildren().add(statusLabel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        event.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.EventPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.JumpToEventListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.ReplaceWithContextPanelEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        setConnections(eventList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void setConnections(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        logger.fine(\"Selection in event list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        raise(new EventPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        raise(new ReplaceWithContextPanelEvent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Scrolls to the {@code EventCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            eventListView.scrollTo(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            eventListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Clears the selection in the ListView."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void clearSelection() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToEventListRequestEvent event) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.EventPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.record.RecordContainsEventIdPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Panel containing the event details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EventPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String FXML \u003d \"EventPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label eventNameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label numOfVolunteersLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label eventLocationLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label eventStartDateLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label eventEndDateLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label eventStartTimeLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label eventEndTimeLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label eventDescriptionLabel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private ObservableList\u003cRecord\u003e recordList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventPanel(ObservableList\u003cRecord\u003e recordList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.recordList \u003d recordList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void setLabelText(Event event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventNameLabel.setText(event.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventLocationLabel.setText(event.getLocation().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventStartDateLabel.setText(DateTimeUtil.getFriendlyDateFromEventDate(event.getStartDate()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!event.getStartDate().equals(event.getEndDate())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            eventEndDateLabel.setText(\" - \" + DateTimeUtil.getFriendlyDateFromEventDate(event.getEndDate()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            eventEndDateLabel.setText(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String friendlyStartTime \u003d DateTimeUtil.getFriendlyTimeFromEventTime(event.getStartTime());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String friendlyEndTime \u003d DateTimeUtil.getFriendlyTimeFromEventTime(event.getEndTime());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventStartTimeLabel.setText(friendlyStartTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!friendlyStartTime.equals(friendlyEndTime)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            eventEndTimeLabel.setText(\" - \" + friendlyEndTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            eventEndTimeLabel.setText(\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        numOfVolunteersLabel.setText(\"Total Number of Volunteers: \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                + String.valueOf(recordList.filtered(new RecordContainsEventIdPredicate(event.getEventId())).size()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventDescriptionLabel.setText(event.getDescription().description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int status \u003d DateTimeUtil.getEventStatus(event.getStartDate(), event.getStartTime(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                event.getEndDate(), event.getEndTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (status !\u003d DateTimeUtil.INVALID_STATUS) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            Label statusLabel \u003d new Label(DateTimeUtil.STATUS[status]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            statusLabel.getStyleClass().add(DateTimeUtil.STATUS[status]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            tags.getChildren().add(statusLabel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        event.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void handleEventPanelSelectionChangedEvent(EventPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        setLabelText(event.getNewSelection());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Ckears details in the event panel."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void clearDetails() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventNameLabel.setText(\"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        numOfVolunteersLabel.setText(\"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventLocationLabel.setText(\"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventStartDateLabel.setText(\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventEndDateLabel.setText(\"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventStartTimeLabel.setText(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventEndTimeLabel.setText(\"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventDescriptionLabel.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.model.Context.EVENT_CONTEXT_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.model.Context.RECORD_CONTEXT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.model.Context.VOLUNTEER_CONTEXT_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.ContextChangeEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.OverviewPanelChangedEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.ReplaceWithContextPanelEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private ContextIndicator contextIndicator;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private OverviewPanel overviewPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private VolunteerListPanel volunteerListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private VolunteerPanel volunteerPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private EventPanel eventPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private RecordEventPanel recordEventPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private StackPane contextIndicatorPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        overviewPanel \u003d new OverviewPanel(logic.getFilteredVolunteerList(), logic.getFilteredEventList(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                                                logic.getFilteredRecordList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerListPanel \u003d new VolunteerListPanel(logic.getFilteredVolunteerList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerPanel \u003d new VolunteerPanel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        browserPlaceholder.getChildren().add(volunteerPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventPanel \u003d new EventPanel(logic.getFilteredRecordList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        recordEventPanel \u003d new RecordEventPanel(logic.getFilteredRecordList(), logic.getFilteredVolunteerList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        contextIndicator \u003d new ContextIndicator(Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        contextIndicatorPlaceholder.getChildren().add(contextIndicator.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        listPanelPlaceholder.getChildren().add(volunteerListPanel.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                logic.getFilteredVolunteerList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the ListPanel with the appropriate context."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private void handleContextChange(ContextChangeEvent contextChangeEvent) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String contextId \u003d contextChangeEvent.getNewContext();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        browserPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (contextId.equals(EVENT_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            eventListPanel.clearSelection();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            eventPanel.clearDetails();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            listPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            browserPlaceholder.getChildren().add(eventPanel.getRoot());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else if (contextId.equals(VOLUNTEER_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            volunteerListPanel.clearSelection();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            volunteerPanel.clearDetails();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            listPanelPlaceholder.getChildren().add(volunteerListPanel.getRoot());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            browserPlaceholder.getChildren().add(volunteerPanel.getRoot());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else if (contextId.equals(RECORD_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            // TO_UPDATE: Shows all available volunteers for event"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            listPanelPlaceholder.getChildren().add(volunteerListPanel.getRoot());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            browserPlaceholder.getChildren().add(recordEventPanel.getRoot());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the browser panel children with overview panel."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void handleOverview() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        eventListPanel.clearSelection();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        volunteerListPanel.clearSelection();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        browserPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        browserPlaceholder.getChildren().add(overviewPanel.getRoot());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the overview panel with current context panel."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void handleReplaceWithContextPanel() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String contextId \u003d logic.getContextId();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (contextId.equals(EVENT_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            browserPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            browserPlaceholder.getChildren().add(eventPanel.getRoot());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else if (contextId.equals(VOLUNTEER_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            browserPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            browserPlaceholder.getChildren().add(volunteerPanel.getRoot());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerListPanel getVolunteerListPanel() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return volunteerListPanel;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventListPanel getEventListPanel() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return eventListPanel;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void handleContextChangeEvent(ContextChangeEvent event) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        logger.info(event.getNewContext());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        handleContextChange(event);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void handleOverviewEvent(OverviewPanelChangedEvent event) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        handleOverview();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void handleReplaceWithContextPanelEvent(ReplaceWithContextPanelEvent event) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        handleReplaceWithContextPanel();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 76,
      "iMarbles": 11,
      "afiqlattif": 15,
      "sharan8": 1,
      "-": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OverviewPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.util.StringConverter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.OverviewPanelChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.Overview;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Panel containing the statistics overview."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class OverviewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String FXML \u003d \"OverviewPanel.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label upcomingLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label ongoingLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Label completedLabel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private PieChart genderPieChart;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private BarChart ageBarChart;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private ObservableList\u003cVolunteer\u003e volunteerList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private ObservableList\u003cEvent\u003e eventList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private ObservableList\u003cRecord\u003e recordList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Overview overview;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public OverviewPanel(ObservableList\u003cVolunteer\u003e volunteerList, ObservableList\u003cEvent\u003e eventList,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                         ObservableList\u003cRecord\u003e recordList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.volunteerList \u003d volunteerList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.recordList \u003d recordList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.overview \u003d new Overview(volunteerList, eventList, recordList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void setLabelText() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        upcomingLabel.setText(Integer.toString(overview.getNumOfUpcomingEvents()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        ongoingLabel.setText(Integer.toString(overview.getNumOfOngoingEvents()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        completedLabel.setText(Integer.toString(overview.getNumOfCompletedEvents()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This method creates a pie chart which shows the gender ratio."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private void createGenderPieChart() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String male \u003d \"Male (\" + overview.getNumOfMale() + \")\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String female \u003d \"Female (\" + overview.getNumOfFemale() + \")\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                new PieChart.Data(male, overview.getNumOfMale()),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                new PieChart.Data(female, overview.getNumOfFemale()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        genderPieChart.getData().clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        genderPieChart.setData(pieChartData);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        genderPieChart.setLabelsVisible(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        genderPieChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This method creates a bar chart which shows the age distribution."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private void createAgeBarChart() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        xAxis.setCategories(FXCollections"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .observableArrayList(Arrays.asList(\"14 and Below\", \"15 to 24\", \"24 to 64\", \"65 and Above\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        yAxis.setLabel(\"Number\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        yAxis.setMinorTickVisible(false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        yAxis.setTickLabelFormatter(new StringConverter\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            public String toString(Number object) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                if (object.intValue() !\u003d object.doubleValue()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    return \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                return \"\" + (object.intValue());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            public Number fromString(String string) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Number val \u003d Double.parseDouble(string);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                return val.intValue();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //Prepare XYChart.Series objects by setting data"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        series.getData().add(new XYChart.Data\u003c\u003e(\"14 and Below\", overview.getNumOfChildren()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        series.getData().add(new XYChart.Data\u003c\u003e(\"15 to 24\", overview.getNumOfYouth()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        series.getData().add(new XYChart.Data\u003c\u003e(\"24 to 64\", overview.getNumOfAdult()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        series.getData().add(new XYChart.Data\u003c\u003e(\"65 and Above\", overview.getNumOfSenior()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        ageBarChart.getData().clear();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        ageBarChart.getData().add(series);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        ageBarChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private void handleOverviewPanelSelectionChangedEvent(OverviewPanelChangedEvent event) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        setLabelText();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        overview.calculateNumOfEvents();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        overview.calculateVolunteerDemographics();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        createGenderPieChart();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        createAgeBarChart();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 58,
      "iMarbles": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecordEventPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.events.ui.RecordChangeEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Panel containing the list of volunteers."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RecordEventPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String FXML \u003d \"RecordEventPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecordEventPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private Label eventNameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private Label numOfVolunteersLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private TableView\u003cRecord\u003e volunteerRecordTableView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private TableColumn\u003cString, Integer\u003e indexColumn;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private TableColumn\u003cRecord, String\u003e nameColumn;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private TableColumn\u003cRecord, String\u003e numberColumn;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private TableColumn\u003cRecord, String\u003e hourColumn;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private TableColumn\u003cRecord, String\u003e remarkColumn;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private ObservableList\u003cVolunteer\u003e volunteerList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private ObservableList\u003cRecord\u003e recordList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public RecordEventPanel(ObservableList\u003cRecord\u003e recordList, ObservableList\u003cVolunteer\u003e volunteerList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.recordList \u003d recordList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.volunteerList \u003d volunteerList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        mapVolunteerToRecord();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        setConnections();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private void handleRecordChangeEvent(RecordChangeEvent event) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        eventNameLabel.setText(event.getCurrentEvent().getName().fullName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        numOfVolunteersLabel.setText(String.valueOf(recordList.size()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        mapVolunteerToRecord();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Map volunteers to record."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private void mapVolunteerToRecord() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (int i \u003d 0; i \u003c recordList.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            for (int j \u003d 0; j \u003c volunteerList.size(); j++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                if (recordList.get(i).getVolunteerId().id \u003d\u003d volunteerList.get(j).getVolunteerId().id) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    recordList.get(i).setLocalIndex(i + 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    recordList.get(i).setVolunteerName(volunteerList.get(j).getName().fullName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    recordList.get(i).setPhoneNo(volunteerList.get(j).getPhone().value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private void setConnections() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        indexColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"localIndex\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        nameColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"volunteerName\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        numberColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"phoneNo\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        hourColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"hour\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        remarkColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"remark\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        volunteerRecordTableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        volunteerRecordTableView.setItems(recordList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 89,
      "afiqlattif": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        resultDisplay.setWrapText(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static final String TOTAL_VOLUNTEERS_STATUS \u003d \"Total Volunteer(s): %d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private StatusBar totalVolunteersStatus;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public StatusBarFooter(Path saveLocation, int totalVolunteers) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        setTotalVolunteers(totalVolunteers);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        setTotalVolunteers(abce.data.getVolunteerList().size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private void setTotalVolunteers(int totalVolunteers) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        Platform.runLater(() -\u003e totalVolunteersStatus.setText(String.format(TOTAL_VOLUNTEERS_STATUS, totalVolunteers)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 1,
      "sharan8": 10,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/VolunteerCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * An UI component that displays information of a {@code Volunteer}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String FXML \u003d \"VolunteerListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public final Volunteer volunteer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerCard(Volunteer volunteer, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.volunteer \u003d volunteer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        name.setText(volunteer.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        phone.setText(volunteer.getPhone().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        email.setText(volunteer.getEmail().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteer.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!(other instanceof VolunteerCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        VolunteerCard card \u003d (VolunteerCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 volunteer.equals(card.volunteer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 14,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/VolunteerListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.events.ui.ReplaceWithContextPanelEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.events.ui.VolunteerPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String FXML \u003d \"VolunteerListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(VolunteerListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private ListView\u003cVolunteer\u003e volunteerListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerListPanel(ObservableList\u003cVolunteer\u003e volunteerList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        setConnections(volunteerList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void setConnections(ObservableList\u003cVolunteer\u003e volunteerList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerListView.setItems(volunteerList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerListView.setCellFactory(listView -\u003e new VolunteerListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        logger.fine(\"Selection in volunteer list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        raise(new VolunteerPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        raise(new ReplaceWithContextPanelEvent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Scrolls to the {@code VolunteerCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            volunteerListView.scrollTo(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            volunteerListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Clears the selection in the ListView."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void clearSelection() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        volunteerListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code VolunteerCard}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    class VolunteerListViewCell extends ListCell\u003cVolunteer\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        protected void updateItem(Volunteer volunteer, boolean empty) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            super.updateItem(volunteer, empty);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            if (empty || volunteer \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                setGraphic(new VolunteerCard(volunteer, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 9,
      "afiqlattif": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/VolunteerPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.events.ui.VolunteerPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.util.BirthdayUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.util.GenderUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Panel containing the volunteer details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String FXML \u003d \"VolunteerPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Label volunteerNameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Label numOfVolunteersLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Label volunteerGenderLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Label volunteerBirthdayLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Label volunteerAddressLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Label volunteerPhoneLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Label volunteerEmailLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private FlowPane volunteerTag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private ObservableList\u003cRecord\u003e recordList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerPanel() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void setLabelText(Volunteer volunteer) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerNameLabel.setText(volunteer.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerGenderLabel.setText(GenderUtil.getFriendlyGenderFromVolunteerGender(volunteer.getGender()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerBirthdayLabel.setText(BirthdayUtil.getFriendlyDateFromVolunteerBirthday(volunteer.getBirthday()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerPhoneLabel.setText(volunteer.getPhone().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerEmailLabel.setText(volunteer.getEmail().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerAddressLabel.setText(volunteer.getAddress().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerTag.getChildren().clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteer.getTags().forEach(tag -\u003e volunteerTag.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void handleVolunteerPanelSelectionChangedEvent(VolunteerPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        setLabelText(event.getNewSelection());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Clears details in the volunteer panel."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void clearDetails() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerNameLabel.setText(\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerGenderLabel.setText(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerBirthdayLabel.setText(\"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerPhoneLabel.setText(\"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerEmailLabel.setText(\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerAddressLabel.setText(\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerTag.getChildren().clear();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 79
    }
  },
  {
    "path": "src/main/resources/view/ContextIndicator.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003cHBox id\u003d\"contextIndicator\" fx:id\u003d\"contextIndicator\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cLabel id\u003d\"contextName\" fx:id\u003d\"contextName\" styleClass\u003d\"cell_big_label\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kratious": 9
    }
  },
  {
    "path": "src/main/resources/view/Custom.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -black-1-: #0c0c0c;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -grey-1-: #212121;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -grey-2-: #303030;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -grey-3-: #424242;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -grey-4-: #e6e6e6;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -white-1-: #F5F5F5;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -primary-: #3E50B4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -pink-1-: #FF3F80;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -font-: #98a6ad;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -background-: #323b44;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -experimental-: #4c5667;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -card-1-: #36404a;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -card-2-: #474f57;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -table-border-: #98a6ad;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -yellow-primary-: #FFDE03;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -blue-primary-: #0336FF;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -red-primary-: #FF0266;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -red-1-: #ef5350;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -purple-1-: #7266ba;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -green-1-: #00b19d;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -blue-t-: #42A5F5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -amber-1-: #f7931e;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -blue-1-: #004ba0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -blue-2-: #1976d2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -blue-3-: #63a4ff;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -blue-n-: #0081cb;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -grey-b-: #E1E2E1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -grey-s-: #969696;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -swatch-100: #BBDEFB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -swatch-200: #90CAF9;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -swatch-300: #64BEF6;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -swatch-400: #42A5F5;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -swatch-500: #2196F3;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -swatch-grey: #c8c8c8;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -swatch-dark-grey: #969696;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -swatch-light-grey: #e6e6e6;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -swatch-toolbar: #F5F5F5;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -swatch-toolbar-selected: #D7D7D7;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    font-family: \u0027Open Sans\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    src: url(\u0027../fonts/OpenSans-Regular.ttf\u0027);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    font-family: \u0027IBM Plex Sans\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    src: url(\u0027../fonts/IBMPlexSans-Regular.ttf\u0027);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -grey-b-;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    background-color: -grey-b-; /* Used in the default.html file */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -background-;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: -white-1-;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -background-;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -background-;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -background-;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".grid-pane .stack-pane .label {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#contextIndicator {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -blue-2-;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#contextIndicator .label {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-alignment: left;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 1.5em;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 5 5 5 8;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 1 0 1 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -background-;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-box-boder: transparent;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-inset: 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-radius: 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 0px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -grey-b-;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 12px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent, -white-1-;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-insets: 0px, 0px;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-color: -grey-b-;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 2px;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".list-cell:filled:hover {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent, rgb(200.0, 200.0, 200.0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent, derive(#42A5F5, 50%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-color: #3080e8;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-width: 0 0 0 0;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-weight: 600;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: -grey-1-;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"IBM Plex Sans\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -background-;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -card-2-;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-color: -background-;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-width: 0.3;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#resultDisplay {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-color: -background-;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-width: 0.3;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent, -card-2-, transparent, -card-2-;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".scroll-bar:vertical\u003e.track-background, .scroll-bar:horizontal\u003e.track-background"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kratious"
        },
        "content": "{"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -grey-b-;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-insets: 1 0 0 0;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".scroll-bar:vertical\u003e.thumb, .scroll-bar:horizontal\u003e.thumb {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -grey-s-;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".scroll-bar\u003e.increment-button, .scroll-bar\u003e.decrement-button,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".scroll-bar:hover\u003e.increment-button, .scroll-bar:hover\u003e.decrement-button"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kratious"
        },
        "content": "{"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".scroll-bar\u003e.increment-button\u003e.increment-arrow, .scroll-bar\u003e.decrement-button\u003e.decrement-arrow"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kratious"
        },
        "content": "{"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -grey-s-;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".scroll-bar\u003e.track-background {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#browserPlaceholder {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 0 12 12 12;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -background-;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-insets: 0px, 10px;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgb(0.0, 0.0, 0.0, 0.15), 6.0, 0.7, 0.0, 1.5);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".browser-panel {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -card-1-;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 30;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#totalVolunteersStatus exit.label {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".event-name {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-weight: 700;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: -white-1-;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".detail {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: -white-1-;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 0 0 5 0;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -blue-2-;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 2 5 2 5;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 11.5;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#tags .Upcoming {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -amber-1-;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#tags .Ongoing {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -green-1-;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#tags .Completed {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -red-1-;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#eventDateBox {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 20 0 0 0;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#eventDescriptionLabel {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 20 0 0 0;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#numOfVolunteersLabel {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 20 0 0 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#numOfVolunteerBox .label{"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: -white-1-;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"IBM Plex Sans\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 0 0 20 0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ".volunteer-name {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    -fx-text-fill: -white-1-;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    -fx-font-family: \"IBM Plex Sans\";"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "#volunteerTag {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    -fx-padding: 0 0 5 0;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "#volunteerTag .label {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    -fx-background-color: -blue-2-;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    -fx-padding: 2 5 2 5;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    -fx-font-size: 11.5;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    -fx-font-family: \"Open Sans\""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-control-inner-background: -card-2-;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-table-cell-border-color: -table-border-;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-table-header-border-color: -table-border-;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-size: 50;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-width: 1 0 1 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            -table-border-"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            -table-border-"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-weight: 600;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".table-row-cell {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-cell-size: 40px;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".table-row-cell:empty {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".table-row-cell:empty .table-cell {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".table-cell {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-alignment: CENTER-LEFT;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".table-view *.scroll-bar:horizontal *.increment-button,"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".table-view *.scroll-bar:horizontal *.decrement-button {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    -fx-background-color: null;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".table-view *.scroll-bar:horizontal *.increment-arrow,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".table-view *.scroll-bar:horizontal *.decrement-arrow {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    -fx-background-color: null;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    -fx-shape: null;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#emptyTable {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 15pt;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".overview-category {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 18pt;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: -white-1-;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 0 0 5 0;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#overviewPanel .overviewEvent {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-padding: 15;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#overviewPanel .Upcoming {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -amber-1-;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#overviewPanel .Ongoing {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -green-1-;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#overviewPanel .Completed {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -red-1-;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Kratious"
        },
        "content": "#overviewPanel .Chart {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: #3d4853;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".overview-event-type {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 15pt;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".overview-type-number {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-weight: 700;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".chart-pie-label-line {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-stroke: white;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"IBM Plex Sans\";"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".default-color0.chart-pie { -fx-pie-color: -blue-2-; }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".default-color1.chart-pie { -fx-pie-color: -pink-1-; }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".default-color2.chart-pie { -fx-pie-color: -blue-2-; }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".default-color3.chart-pie { -fx-pie-color: -pink-1-; }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".chart-plot-background {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".axis {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-tick-label-font-size: 12pt;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-tick-label-fill: white;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-tick-label-font: \"IBM Plex Sans\";"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-tick-length: 1;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-minor-tick-length: 1;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".axis-label {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-font-family: \"IBM Plex Sans\";"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".chart-vertical-grid-lines {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".chart-horizontal-grid-lines {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Kratious"
        },
        "content": ".chart-bar {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-bar-fill: #22bad9;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: -purple-1-;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 447,
      "iMarbles": 17,
      "afiqlattif": 20
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    -fx-background-color: #36404a;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    background-color: #36404a; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 2,
      "iMarbles": 1,
      "sharan8": 1,
      "-": 314
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cLabel fx:id\u003d\"eventLocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$eventLocation\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Kratious": 42
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Kratious": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/EventPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003cVBox fx:id\u003d\"eventPanel\" styleClass\u003d\"browser-panel\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cLabel fx:id\u003d\"eventNameLabel\" styleClass\u003d\"event-name\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cHBox fx:id\u003d\"eventDateBox\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cLabel fx:id\u003d\"eventStartDateLabel\" styleClass\u003d\"detail\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cLabel fx:id\u003d\"eventEndDateLabel\" styleClass\u003d\"detail\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cLabel fx:id\u003d\"eventStartTimeLabel\" styleClass\u003d\"detail\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cLabel fx:id\u003d\"eventEndTimeLabel\" styleClass\u003d\"detail\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cLabel fx:id\u003d\"eventLocationLabel\" styleClass\u003d\"detail\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cLabel fx:id\u003d\"numOfVolunteersLabel\" styleClass\u003d\"detail\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cLabel fx:id\u003d\"eventDescriptionLabel\" styleClass\u003d\"detail\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Kratious": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cURL value\u003d\"@Custom.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "          \u003cVBox fx:id\u003d\"listPanel\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cStackPane fx:id\u003d\"contextIndicatorPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" id\u003d\"browserPlaceholder\" fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"12\" left\u003d\"12\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\" alignment\u003d\"BOTTOM_CENTER\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                       minHeight\u003d\"120\" prefHeight\u003d\"120\" maxHeight\u003d\"120\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cInsets right\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Kratious": 14,
      "-": 52
    }
  },
  {
    "path": "src/main/resources/view/OverviewPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003cVBox fx:id\u003d\"overviewPanel\" styleClass\u003d\"browser-panel\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cLabel fx:id\u003d\"eventOverviewLabel\" styleClass\u003d\"overview-category\" text\u003d\"Events\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cGridPane hgap\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cHBox id\u003d\"upcomingPane\" fx:id\u003d\"upcomingPane\" styleClass\u003d\"overviewEvent, Upcoming\" GridPane.columnIndex\u003d\"0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "              GridPane.rowIndex\u003d\"0\" GridPane.columnSpan\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cGridPane HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cVBox alignment\u003d\"TOP_LEFT\" minHeight\u003d\"70\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u003cLabel text\u003d\"Upcoming\" styleClass\u003d\"overview-event-type\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cVBox alignment\u003d\"BOTTOM_LEFT\" minHeight\u003d\"70\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u003cLabel fx:id\u003d\"upcomingLabel\" styleClass\u003d\"overview-type-number\" text\u003d\"-\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cHBox id\u003d\"ongoingPane\" fx:id\u003d\"ongoingPane\" styleClass\u003d\"overviewEvent, Ongoing\" GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "              GridPane.rowIndex\u003d\"0\" GridPane.columnSpan\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cGridPane HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cVBox alignment\u003d\"TOP_LEFT\" minHeight\u003d\"70\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u003cLabel text\u003d\"Ongoing\" styleClass\u003d\"overview-event-type\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cVBox alignment\u003d\"BOTTOM_LEFT\" minHeight\u003d\"70\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u003cLabel fx:id\u003d\"ongoingLabel\" styleClass\u003d\"overview-type-number\" text\u003d\"-\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cHBox id\u003d\"completedPane\" fx:id\u003d\"completedPane\" styleClass\u003d\"overviewEvent, Completed\" GridPane.columnIndex\u003d\"2\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "              GridPane.rowIndex\u003d\"0\" GridPane.columnSpan\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cGridPane HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cVBox alignment\u003d\"TOP_LEFT\" minHeight\u003d\"70\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u003cLabel text\u003d\"Completed\" styleClass\u003d\"overview-event-type\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cVBox alignment\u003d\"BOTTOM_LEFT\" minHeight\u003d\"70\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    \u003cLabel fx:id\u003d\"completedLabel\" styleClass\u003d\"overview-type-number\" text\u003d\"-\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cInsets bottom\u003d\"25\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cLabel fx:id\u003d\"volunteerOverviewLabel\" styleClass\u003d\"overview-category\" text\u003d\"Volunteers\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cGridPane hgap\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cHBox styleClass\u003d\"overviewEvent, Chart\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cVBox HBox.hgrow\u003d\"ALWAYS\" alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cLabel text\u003d\"Gender Ratio\" styleClass\u003d\"overview-event-type\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u003cPieChart fx:id\u003d\"genderPieChart\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cHBox styleClass\u003d\"overviewEvent, Chart\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cVBox HBox.hgrow\u003d\"ALWAYS\" alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cLabel text\u003d\"Age Distribution\" styleClass\u003d\"overview-event-type\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u003cBarChart fx:id\u003d\"ageBarChart\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    \u003cxAxis\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                        \u003cCategoryAxis fx:id\u003d\"xAxis\" side\u003d\"BOTTOM\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    \u003cyAxis\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                        \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\"/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kratious": 81,
      "iMarbles": 9
    }
  },
  {
    "path": "src/main/resources/view/RecordEventPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003cVBox fx:id\u003d\"recordEventPanel\" styleClass\u003d\"browser-panel\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" fx:id\u003d\"eventNameBox\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cLabel fx:id\u003d\"eventNameLabel\" styleClass\u003d\"event-name\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            Event Name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER_LEFT\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "          spacing\u003d\"10\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "          fx:id\u003d\"numOfVolunteerBox\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cLabel\u003eTotal Number of Volunteers:\u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cLabel fx:id\u003d\"numOfVolunteersLabel\"\u003e0\u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003cVBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cTableView fx:id\u003d\"volunteerRecordTableView\" prefWidth\u003d\"900\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003cplaceholder\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u003cLabel fx:id\u003d\"emptyTable\" text\u003d\"To begin, enter \u0027add volunteer_index\u0027.\u0026#10;e.g add 1 \"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \u003c/placeholder\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"indexColumn\" text\u003d\"#\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"nameColumn\" text\u003d\"Name\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"numberColumn\" text\u003d\"Contact Number\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"hourColumn\" text\u003d\"Hours\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"remarkColumn\" text\u003d\"Remarks\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            \u003c/columns\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 33,
      "Kratious": 5
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"grid-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" maxWidth\u003d\"260\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharan8"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"totalVolunteersStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharan8"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"2\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sharan8": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/resources/view/VolunteerListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/VolunteerListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "  \u003cListView fx:id\u003d\"volunteerListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/VolunteerPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003cVBox fx:id\u003d\"volunteerPanel\" styleClass\u003d\"browser-panel\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cLabel fx:id\u003d\"volunteerNameLabel\" styleClass\u003d\"event-name\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"volunteerTag\" hgap\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            \u003cLabel fx:id\u003d\"volunteerGenderLabel\" styleClass\u003d\"detail\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            \u003cLabel fx:id\u003d\"volunteerBirthdayLabel\" styleClass\u003d\"detail\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            \u003cLabel fx:id\u003d\"volunteerPhoneLabel\" styleClass\u003d\"detail\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            \u003cLabel fx:id\u003d\"volunteerEmailLabel\" styleClass\u003d\"detail\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cLabel fx:id\u003d\"volunteerAddressLabel\" styleClass\u003d\"detail\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 26
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidVolunteerAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c!-- Valid Volunteer --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e22-05-1987\u003c/birthday\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c!-- Volunteer with invalid gender field --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eunknown\u003c/gender\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e22-05-1987\u003c/birthday\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 11,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidVolunteerAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c!-- Volunteer with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e22-05-1987\u003c/birthday\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicateEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ceventId\u003e1\u003c/eventId\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cname\u003eBlood Donation Drive 2018\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003clocation\u003e750E Chai Chee Road\u003c/location\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartDate\u003e02-10-2018\u003c/startDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendDate\u003e05-10-2018\u003c/endDate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartTime\u003e11:30\u003c/startTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendTime\u003e17:30\u003c/endTime\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cdescription\u003eDonation drive for blood.\u003c/description\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003eDonation\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003ePublic\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c!-- Event with same identity as Blood Donation Drive 2018 --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ceventId\u003e2\u003c/eventId\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cname\u003eBlood Donation Drive 2018\u003c/name\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003clocation\u003e750E Chai Chee Road\u003c/location\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartDate\u003e02-10-2018\u003c/startDate\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendDate\u003e05-10-2018\u003c/endDate\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartTime\u003e11:30\u003c/startTime\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendTime\u003e17:30\u003c/endTime\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cdescription\u003eDonation drive for blood.\u003c/description\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003eDonation\u003c/tagged\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003ePublic\u003c/tagged\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kratious": 29
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicateRecordAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e1\u003c/eventId\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003e1\u003c/hour\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eEmcee\u003c/remark\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c!-- Record with same identity as first record--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e1\u003c/eventId\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003e2\u003c/hour\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eDelivery man\u003c/remark\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 16
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicateVolunteerAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday\u003e21-08-1986\u003c/birthday\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003ctagged\u003estudent\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c!-- Volunteer with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday\u003e21-08-1986\u003c/birthday\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 12,
      "-": 14
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c!-- Event with invalid start date field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cname\u003eBlood Donation Drive 2018\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003clocation\u003e750E Chai Chee Road\u003c/location\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartDate\u003e1234\u003c/startDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendDate\u003e05-10-2018\u003c/endDate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartTime\u003e11:30\u003c/startTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendTime\u003e17:30\u003c/endTime\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cdescription\u003eDonation drive for blood.\u003c/description\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003eDonation\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003ePublic\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kratious": 15
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidRecordAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c!-- Record with invalid hour field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e1\u003c/eventId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003eabc\u003c/hour\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eEmcee\u003c/remark\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidVolunteerAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c!-- Volunteer with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday iPrivate\u003d\"false\"\u003e22-05-1987\u003c/birthday\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalEventsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Event values as in TypicalEvents#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ceventId\u003e1\u003c/eventId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cname\u003eBlood Donation Drive 2018\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003clocation\u003e750E, Chai Chee Road, #08-111\u003c/location\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartDate\u003e02-10-2018\u003c/startDate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendDate\u003e05-10-2018\u003c/endDate\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartTime\u003e11:30\u003c/startTime\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendTime\u003e17:30\u003c/endTime\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cdescription\u003eDonation drive for blood.\u003c/description\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003eDonation\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003ePublic\u003c/tagged\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ceventId\u003e2\u003c/eventId\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cname\u003eYouth Humanitarian Challenge\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003clocation\u003e29 Havelock Road\u003c/location\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartDate\u003e28-09-2018\u003c/startDate\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendDate\u003e28-09-2018\u003c/endDate\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartTime\u003e10:00\u003c/startTime\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendTime\u003e14:00\u003c/endTime\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cdescription\u003eTo engage youths in humanitarianism.\u003c/description\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003eCompetition\u003c/tagged\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kratious": 27
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalRecordsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Record values as in TypicalRecords#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e1\u003c/eventId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003e1\u003c/hour\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eEmcee\u003c/remark\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e2\u003c/eventId\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e2\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003e2\u003c/hour\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eDelivery man\u003c/remark\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e2\u003c/eventId\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003e2\u003c/hour\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eFood delivery\u003c/remark\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 22
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalVolunteersAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Volunteer values as in TypicalVolunteers#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday\u003e21-08-1986\u003c/birthday\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003ctagged\u003estudent\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e2\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday\u003e29-09-1988\u003c/birthday\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003ctagged\u003edriver\u003c/tagged\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003ctagged\u003estudent\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e3\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday\u003e27-05-1990\u003c/birthday\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e4\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday\u003e31-10-1993\u003c/birthday\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003ctagged\u003estudent\u003c/tagged\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e5\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday\u003e13-11-1994\u003c/birthday\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e6\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday\u003e12-01-1995\u003c/birthday\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e7\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday\u003e14-01-1995\u003c/birthday\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 71
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidVolunteerField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c!-- Volunteer with an incorrect phone format --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003cvolunteer\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cgender\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cbirthday\u003e22-05-1987\u003c/birthday\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003ctagged\u003estudent\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c/volunteer\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 6,
      "-": 5
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingVolunteerField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c!-- Volunteer with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003cvolunteer\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cgender\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cbirthday\u003e22-05-1987\u003c/birthday\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003ctagged\u003estudent\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c/volunteer\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 10
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e22-05-1987\u003c/birthday\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e2\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e10-05-1987\u003c/birthday\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e3\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e02-09-1988\u003c/birthday\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e4\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e01-04-1989\u003c/birthday\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e5\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e06-09-1989\u003c/birthday\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e6\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e19-11-1990\u003c/birthday\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e7\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e20-04-1993\u003c/birthday\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e8\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e28-07-1993\u003c/birthday\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteers\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cvolunteerId\u003e9\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        \u003cbirthday isPrivate\u003d\"false\"\u003e30-06-1998\u003c/birthday\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003c/volunteers\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 45,
      "-": 39
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validVolunteer.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003cvolunteer\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cgender\u003em\u003c/gender\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003cbirthday\u003e22-05-1987\u003c/birthday\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    \u003ctagged\u003estudent\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "\u003c/volunteer\u003e"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 6,
      "-": 5
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final VolunteerListPanelHandle volunteerListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerListPanel \u003d new VolunteerListPanelHandle(getChildNode(VolunteerListPanelHandle"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .VOLUNTEER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerListPanelHandle getVolunteerListPanel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return volunteerListPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 5,
      "-": 41
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private static final String TOTAL_VOLUNTEERS_STATUS_ID \u003d \"#totalVolunteersStatus\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private final StatusBar totalVolunteersStatusNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private String lastRememberedTotalVolunteersStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        totalVolunteersStatusNode \u003d getChildNode(TOTAL_VOLUNTEERS_STATUS_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * Returns the text of the \u0027total volunteers\u0027 portion of the status bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public String getTotalVolunteersStatus() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        return totalVolunteersStatusNode.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * Remembers the content of the \u0027total volunteers\u0027 portion of the status bar."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public void rememberTotalVolunteersStatus() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        lastRememberedTotalVolunteersStatus \u003d getTotalVolunteersStatus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * Returns true if the current content of the \u0027total volunteers\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * recent {@code rememberTotalVolunteersStatus()} call."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public boolean isTotalVolunteersStatusChanged() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        return !lastRememberedTotalVolunteersStatus.equals(getTotalVolunteersStatus());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharan8": 26,
      "-": 72
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/VolunteerCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Provides a handle to a volunteer card in the volunteer list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if this handle contains {@code volunteer}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean equals(Volunteer volunteer) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return getName().equals(volunteer.getName().fullName)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 getPhone().equals(volunteer.getPhone().value)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 getEmail().equals(volunteer.getEmail().value)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(volunteer.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 10,
      "-": 69
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/VolunteerListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Provides a handle for {@code VolunteerListPanel} containing the list of {@code VolunteerCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerListPanelHandle extends NodeHandle\u003cListView\u003cVolunteer\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String VOLUNTEER_LIST_VIEW_ID \u003d \"#volunteerListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Optional\u003cVolunteer\u003e lastRememberedSelectedVolunteerCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerListPanelHandle(ListView\u003cVolunteer\u003e volunteerListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        super(volunteerListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns a handle to the selected {@code VolunteerCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        List\u003cVolunteer\u003e selectedVolunteerList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (selectedVolunteerList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new AssertionError(\"Volunteer list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .map(VolunteerCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedVolunteerList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        List\u003cVolunteer\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Navigates the listview to display {@code volunteer}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void navigateToCard(Volunteer volunteer) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (!getRootNode().getItems().contains(volunteer)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            throw new IllegalArgumentException(\"Volunteer does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            getRootNode().scrollTo(volunteer);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Selects the {@code VolunteerCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns the volunteer card handle of a volunteer associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerCardHandle getVolunteerCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .map(VolunteerCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .filter(handle -\u003e handle.equals(getVolunteer(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Volunteer getVolunteer(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Remembers the selected {@code VolunteerCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void rememberSelectedVolunteerCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        List\u003cVolunteer\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            lastRememberedSelectedVolunteerCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            lastRememberedSelectedVolunteerCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if the selected {@code VolunteerCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code rememberSelectedVolunteerCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean isSelectedVolunteerCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        List\u003cVolunteer\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return lastRememberedSelectedVolunteerCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return !lastRememberedSelectedVolunteerCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                    || !lastRememberedSelectedVolunteerCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 38,
      "-": 121
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/VolunteerPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Provides a handle to a volunteer card in the volunteer list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String GENDER_FIELD_ID \u003d \"#gender\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String BIRTHDAY_FIELD_ID \u003d \"#birthday\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Label genderLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Label birthdayLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerPanelHandle(Node panelNode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        super(panelNode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        genderLabel \u003d getChildNode(GENDER_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        birthdayLabel \u003d getChildNode(BIRTHDAY_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return genderLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String getBirthday() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return birthdayLabel.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns true if this handle contains {@code volunteer}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public boolean equals(Volunteer volunteer) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return getName().equals(volunteer.getName().fullName)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 getGender().equals(volunteer.getGender().value)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 getBirthday().equals(volunteer.getBirthday().value)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 getPhone().equals(volunteer.getPhone().value)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 getEmail().equals(volunteer.getEmail().value)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 getAddress().equals(volunteer.getAddress().value)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(volunteer.getTags().stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 106
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/NodeNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the node cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NodeNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 5,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredVolunteerList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 1,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : SocialCare\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.storage.XmlAdaptedVolunteer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final Path MISSING_VOLUNTEER_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingVolunteerField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final Path INVALID_VOLUNTEER_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidVolunteerField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final Path VALID_VOLUNTEER_FILE \u003d TEST_DATA_FOLDER.resolve(\"validVolunteer.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_GENDER \u003d \"m\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d \"22-05-1987\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_VOLUNTEER_TAGS \u003d Collections"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .singletonList(new XmlAdaptedTag(\"student\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(9, dataFromFile.getVolunteerList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void xmlAdaptedFromFile_fileWithMissingVolunteerField_validResult() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer actualVolunteer \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                MISSING_VOLUNTEER_FIELD_FILE, XmlAdaptedVolunteerWithRootElement.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer expectedVolunteer \u003d new XmlAdaptedVolunteer("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                null, VALID_GENDER, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                VALID_VOLUNTEER_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedVolunteer, actualVolunteer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void xmlAdaptedFromFile_fileWithInvalidVolunteerField_validResult() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer actualVolunteer \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                INVALID_VOLUNTEER_FIELD_FILE, XmlAdaptedVolunteerWithRootElement.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer expectedVolunteer \u003d new XmlAdaptedVolunteer(VALID_NAME, VALID_GENDER, VALID_BIRTHDAY,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_VOLUNTEER_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedVolunteer, actualVolunteer);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void xmlAdaptedFromFile_fileWithValidVolunteer_validResult() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer actualVolunteer \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                VALID_VOLUNTEER_FILE, XmlAdaptedVolunteerWithRootElement.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer expectedVolunteer \u003d new XmlAdaptedVolunteer("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                VALID_NAME, VALID_GENDER, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                VALID_VOLUNTEER_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedVolunteer, actualVolunteer);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                builder.withVolunteer(new VolunteerBuilder().build()).build());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code XmlAdaptedVolunteer} objects."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @XmlRootElement(name \u003d \"volunteer\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static class XmlAdaptedVolunteerWithRootElement extends XmlAdaptedVolunteer {}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 35,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void getFilteredVolunteerList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        logic.getFilteredVolunteerList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 4,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_newVolunteer_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer validVolunteer \u003d new VolunteerBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.addVolunteer(validVolunteer);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(new AddCommand(validVolunteer), model, commandHistory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validVolunteer), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_duplicateVolunteer_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerInList \u003d model.getAddressBook().getVolunteerList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(new AddCommand(volunteerInList), model, commandHistory,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 13,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void constructor_nullVolunteer_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_volunteerAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        ModelStubAcceptingVolunteerAdded modelStub \u003d new ModelStubAcceptingVolunteerAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer validVolunteer \u003d new VolunteerBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validVolunteer).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validVolunteer), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(Arrays.asList(validVolunteer), modelStub.volunteersAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_duplicateVolunteer_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer validVolunteer \u003d new VolunteerBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        AddCommand addVolunteerCommand \u003d new AddCommand(validVolunteer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithVolunteer(validVolunteer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        addVolunteerCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer alice \u003d new VolunteerBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer bob \u003d new VolunteerBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // different volunteer -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Context Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void setCurrentContext(String contextId) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void switchToRecordContext() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public String getContextId() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public String getContextName() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void setSelectedEvent(Event selectedEvent) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public Event getSelectedEvent() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Volunteer Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public boolean hasVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public void deleteVolunteer(Volunteer target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public void addVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public void updateVolunteer(Volunteer target, Volunteer editedVolunteer) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public ObservableList\u003cVolunteer\u003e getFilteredVolunteerList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public void updateFilteredVolunteerList(Predicate\u003cVolunteer\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Record Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void deleteRecord(Record target) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void addRecord(Record record) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void updateRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void resetStatePointer() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * A Model stub that contains a single volunteer."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private class ModelStubWithVolunteer extends ModelStub {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        private final Volunteer volunteer;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        ModelStubWithVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            requireNonNull(volunteer);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            this.volunteer \u003d volunteer;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public boolean hasVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            requireNonNull(volunteer);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return this.volunteer.isSameVolunteer(volunteer);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * A Model stub that always accept the volunteer being added."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private class ModelStubAcceptingVolunteerAdded extends ModelStub {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final ArrayList\u003cVolunteer\u003e volunteersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public boolean hasVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            requireNonNull(volunteer);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            return volunteersAdded.stream().anyMatch(volunteer::isSameVolunteer);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public void addVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            requireNonNull(volunteer);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            volunteersAdded.add(volunteer);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 7,
      "iMarbles": 72,
      "afiqlattif": 43,
      "-": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SWITCH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.EditVolunteerDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_COMMANDID_EVENT \u003d \"e\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final int VALID_EVENTID_E1 \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final int VALID_EVENTID_E2 \u003d 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final int VALID_VOLUNTEERID_V1 \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final int VALID_VOLUNTEERID_V2 \u003d 2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_HOUR_H1 \u003d \"1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_HOUR_H2 \u003d \"2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_REMARK_R1 \u003d \"Emcee\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_REMARK_R2 \u003d \"Delivery man\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"f\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"m\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String VALID_BIRTHDAY_AMY \u003d \"01-10-1995\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String VALID_BIRTHDAY_BOB \u003d \"11-02-1991\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String VALID_TAG_DRIVER \u003d \"driver\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String VALID_TAG_STUDENT \u003d \"student\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_NAME_YOUTH \u003d \"Youth Humanitarian Challenge\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_LOCATION_YOUTH \u003d \"29 Havelock Road\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_START_DATE_YOUTH \u003d \"28-09-2018\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_END_DATE_YOUTH \u003d \"28-09-2018\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_START_TIME_YOUTH \u003d \"10:00\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_END_TIME_YOUTH \u003d \"14:00\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_DESCRIPTION_YOUTH \u003d \"To engage youths in humanitarianism.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_TAG_PUBLIC \u003d \"Public\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_TAG_DONATION \u003d \"Donation\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_TAG_COMPETITION \u003d \"Competition\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String CONTEXT_VALID_DESC \u003d \" \" + PREFIX_SWITCH + VALID_COMMANDID_EVENT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String CONTEXT_INVALID_DESC \u003d \" \" + PREFIX_SWITCH + \"i\"; // Not recognised"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String TAG_DESC_STUDENT \u003d \" \" + PREFIX_TAG + VALID_TAG_STUDENT;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String TAG_DESC_DRIVER \u003d \" \" + PREFIX_TAG + VALID_TAG_DRIVER;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String INVALID_VOLUNTEER_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"unknown\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    // only \u0027male\u0027 or \u0027female\u0027 is allowed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"11-12-19913\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    //only 4 digits in year"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final EditCommand.EditVolunteerDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final EditCommand.EditVolunteerDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        DESC_AMY \u003d new EditVolunteerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withGender(VALID_GENDER_AMY).withBirthday(VALID_BIRTHDAY_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withTags(VALID_TAG_STUDENT).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        DESC_BOB \u003d new EditVolunteerDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withGender(VALID_GENDER_BOB).withBirthday(VALID_BIRTHDAY_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withTags(VALID_TAG_DRIVER, VALID_TAG_STUDENT).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * - the address book and the filtered volunteer list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                                            CommandHistory actualCommandHistory, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        List\u003cVolunteer\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredVolunteerList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredVolunteerList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the volunteer at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code model}\u0027s application."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static void showVolunteerAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredVolunteerList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteer \u003d model.getFilteredVolunteerList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final String[] splitName \u003d volunteer.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.updateFilteredVolunteerList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(1, model.getFilteredVolunteerList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Deletes the first volunteer in {@code model}\u0027s filtered list from {@code model}\u0027s application."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static void deleteFirstVolunteer(Model model) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer firstVolunteer \u003d model.getFilteredVolunteerList().get(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.deleteVolunteer(firstVolunteer);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * - a file with the {@code volunteer}\u0027s name exists."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static void assertExportCommandSuccess(Command command, Model model, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                                            String expectedMessage, Volunteer volunteer) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            CommandResult result \u003d command.execute(model, actualCommandHistory);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            // For now we just check if the exported file exists"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            File file \u003d new File(ExportCertCommand.getCurrentSavePath() + volunteer.getName() + \"_\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                    + volunteer.getVolunteerId() + \".pdf\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            assertTrue(file.exists());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 12,
      "Kratious": 11,
      "afiqlattif": 51,
      "sharan8": 23,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showVolunteerAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_validVolunteerIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerToDelete \u003d model.getFilteredVolunteerList().get(INDEX_FIRST_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_VOLUNTEER_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                volunteerToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.deleteVolunteer(volunteerToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_invalidVolunteerIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredVolunteerList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_validVolunteerIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(model, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerToDelete \u003d model.getFilteredVolunteerList().get(INDEX_FIRST_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_VOLUNTEER_SUCCESS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                volunteerToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.deleteVolunteer(volunteerToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showNoVolunteer(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_invalidVolunteerIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(model, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getVolunteerList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void executeUndoRedo_validVolunteerIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerToDelete \u003d model.getFilteredVolunteerList().get(INDEX_FIRST_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.deleteVolunteer(volunteerToDelete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // delete -\u003e first volunteer deleted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered volunteer list to show all volunteers"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // redo -\u003e same first volunteer deleted again"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void executeUndoRedo_invalidVolunteerIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredVolunteerList().size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 1. Deletes a {@code Volunteer} from a filtered list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted volunteer in the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the volunteer object regardless of indexing."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void executeUndoRedo_validVolunteerIndexFilteredList_sameVolunteerDeleted() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(model, INDEX_SECOND_VOLUNTEER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerToDelete \u003d model.getFilteredVolunteerList().get(INDEX_FIRST_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.deleteVolunteer(volunteerToDelete);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // delete -\u003e deletes second volunteer in unfiltered volunteer list / first volunteer in filtered volunteer list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered volunteer list to show all volunteers"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertNotEquals(volunteerToDelete, model.getFilteredVolunteerList()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .get(INDEX_FIRST_VOLUNTEER.getZeroBased()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // redo -\u003e deletes same second volunteer in unfiltered volunteer list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_VOLUNTEER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // different volunteer -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void showNoVolunteer(Model model) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.updateFilteredVolunteerList(p -\u003e false);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(model.getFilteredVolunteerList().isEmpty());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 69,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRIVER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showVolunteerAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditVolunteerDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.EditVolunteerDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredVolunteerList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer editedVolunteer \u003d new VolunteerBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder(editedVolunteer).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_VOLUNTEER, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_VOLUNTEER_SUCCESS, editedVolunteer);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.updateVolunteer(model.getFilteredVolunteerList().get(0), editedVolunteer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredVolunteerList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index indexLastVolunteer \u003d Index.fromOneBased(model.getFilteredVolunteerList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer lastVolunteer \u003d model.getFilteredVolunteerList().get(indexLastVolunteer.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        VolunteerBuilder volunteerInList \u003d new VolunteerBuilder(lastVolunteer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer editedVolunteer \u003d volunteerInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_DRIVER).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_DRIVER).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastVolunteer, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_VOLUNTEER_SUCCESS, editedVolunteer);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.updateVolunteer(lastVolunteer, editedVolunteer);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredVolunteerList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_VOLUNTEER,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new EditVolunteerDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer editedVolunteer \u003d model.getFilteredVolunteerList().get(INDEX_FIRST_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_VOLUNTEER_SUCCESS, editedVolunteer);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_filteredVolunteerList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(model, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerInFilteredList \u003d model.getFilteredVolunteerList()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .get(INDEX_FIRST_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer editedVolunteer \u003d new VolunteerBuilder(volunteerInFilteredList)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_VOLUNTEER,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new EditVolunteerDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_VOLUNTEER_SUCCESS, editedVolunteer);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.updateVolunteer(model.getFilteredVolunteerList().get(0), editedVolunteer);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_duplicateVolunteerUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer firstVolunteer \u003d model.getFilteredVolunteerList().get(INDEX_FIRST_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder(firstVolunteer).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_VOLUNTEER, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                EditCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_duplicateVolunteerFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(model, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // edit volunteer in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerInList \u003d model.getAddressBook().getVolunteerList()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .get(INDEX_SECOND_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_VOLUNTEER,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new EditVolunteerDescriptorBuilder(volunteerInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                EditCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_invalidVolunteerIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredVolunteerList().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_invalidVolunteerIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(model, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getVolunteerList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new EditVolunteerDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredVolunteerList_success() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer editedVolunteer \u003d new VolunteerBuilder().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerToEdit \u003d model.getFilteredVolunteerList().get(INDEX_FIRST_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder(editedVolunteer).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_VOLUNTEER, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.updateVolunteer(volunteerToEdit, editedVolunteer);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // edit -\u003e first volunteer edited"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered volunteer list to show all volunteers"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // redo -\u003e same first volunteer edited again"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredVolunteerList_failure() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredVolunteerList().size() + 1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 1. Edits a {@code Volunteer} from a filtered list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited volunteer in the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the volunteer object regardless of indexing."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameVolunteerEdited() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer editedVolunteer \u003d new VolunteerBuilder().build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder(editedVolunteer).build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_VOLUNTEER, descriptor);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(model, INDEX_SECOND_VOLUNTEER);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerToEdit \u003d model.getFilteredVolunteerList().get(INDEX_FIRST_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.updateVolunteer(volunteerToEdit, editedVolunteer);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // edit -\u003e edits second volunteer in unfiltered volunteer list / first volunteer in filtered volunteer list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered volunteer list to show all volunteers"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertNotEquals(model.getFilteredVolunteerList().get(INDEX_FIRST_VOLUNTEER.getZeroBased()), volunteerToEdit);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // redo -\u003e edits same second volunteer in unfiltered volunteer list"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_VOLUNTEER, DESC_AMY);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor copyDescriptor \u003d new EditVolunteerDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_VOLUNTEER, copyDescriptor);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_VOLUNTEER, DESC_AMY)));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_VOLUNTEER, DESC_BOB)));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 112,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditVolunteerDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRIVER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditVolunteerDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.EditVolunteerDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class EditVolunteerDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptorWithSameValues \u003d new EditVolunteerDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor editedAmy \u003d new EditVolunteerDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // different gender -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        editedAmy \u003d new EditVolunteerDescriptorBuilder(DESC_AMY).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // different birthday -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        editedAmy \u003d new EditVolunteerDescriptorBuilder(DESC_AMY).withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        editedAmy \u003d new EditVolunteerDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        editedAmy \u003d new EditVolunteerDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        editedAmy \u003d new EditVolunteerDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        editedAmy \u003d new EditVolunteerDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withTags(VALID_TAG_DRIVER).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 23,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCertCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharan8"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertExportCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showVolunteerAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteersWithRecords.getTypicalVolunteersWithRecordsAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharan8"
        },
        "content": " * Contains integration tests (interaction with the {@code Model} and unit tests for {@code ExportCertCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharan8"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharan8"
        },
        "content": "public class ExportCertCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private Model modelWithRecords \u003d new ModelManager(getTypicalVolunteersWithRecordsAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private Model modelWithNoRecords \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public void execute_volunteerHasNoRecord_throwsCommandException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Create the export cert command with the first volunteer\u0027s index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        ExportCertCommand exportCertCommand \u003d new ExportCertCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // First volunteer has no event records"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCertCommand.MESSAGE_VOLUNTEER_NO_RECORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Make sure the command fails and a command exception is raised with an expected message"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertCommandFailure(exportCertCommand, modelWithNoRecords, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public void execute_validVolunteerIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Get the volunteer to be exported"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        Volunteer volunteerToExport \u003d modelWithRecords.getFilteredVolunteerList()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                .get(INDEX_FIRST_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Create the export cert command with the first volunteer\u0027s index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        ExportCertCommand exportCertCommand \u003d new ExportCertCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCertCommand.MESSAGE_EXPORT_CERT_SUCCESS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                + ExportCertCommand.getCurrentSavePath(), INDEX_FIRST_VOLUNTEER.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Make sure there is a pdf file with the volunteer\u0027s name ONLY"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertExportCommandSuccess(exportCertCommand, modelWithRecords, commandHistory,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                expectedMessage, volunteerToExport);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public void execute_invalidVolunteerIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Find an invalid volunteer index that is out of bounds"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(modelWithRecords.getFilteredVolunteerList().size() + 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Create the export cert command with the invalid out of bound index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        ExportCertCommand exportCertCommand \u003d new ExportCertCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertCommandFailure(exportCertCommand, modelWithRecords, commandHistory,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public void execute_validVolunteerIndexFilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Filter to only show the volunteer at INDEX_FIRST_VOLUNTEER"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        showVolunteerAtIndex(modelWithRecords, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Get the volunteer to be exported"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        Volunteer volunteerToExport \u003d modelWithRecords.getFilteredVolunteerList()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                .get(INDEX_FIRST_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Create the export cert command with the first volunteer\u0027s index"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        ExportCertCommand exportCertCommand \u003d new ExportCertCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCertCommand.MESSAGE_EXPORT_CERT_SUCCESS"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                        + ExportCertCommand.getCurrentSavePath(), INDEX_FIRST_VOLUNTEER.getOneBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertExportCommandSuccess(exportCertCommand, modelWithRecords, commandHistory,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                expectedMessage, volunteerToExport);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public void execute_invalidVolunteerIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Filter to only show the volunteer at INDEX_FIRST_VOLUNTEER"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        showVolunteerAtIndex(modelWithRecords, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Invalid volunteer index that is out of filtered bounds"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Make sure outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                \u003c modelWithRecords.getAddressBook().getVolunteerList().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Create the export cert command with the invalid out of bound index"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        ExportCertCommand exportCertCommand \u003d new ExportCertCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertCommandFailure(exportCertCommand, modelWithRecords, commandHistory,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        final ExportCertCommand standardCommand \u003d new ExportCertCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // different object, same value -\u003e return true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        ExportCertCommand commandWithSameValue \u003d new ExportCertCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValue));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // same object, same values -\u003e return true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // different type -\u003e return false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertFalse(standardCommand.equals(new ListCommand()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // different index value -\u003e return false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertFalse(standardCommand.equals(new ExportCertCommand(INDEX_SECOND_VOLUNTEER)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharan8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharan8": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VOLUNTEERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        NameContainsKeywordsPredicate firstVolunteerPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        NameContainsKeywordsPredicate secondVolunteerPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        FindCommand findFirstVolunteerCommand \u003d new FindCommand(firstVolunteerPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        FindCommand findSecondVolunteerCommand \u003d new FindCommand(secondVolunteerPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // different volunteer -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(findFirstVolunteerCommand.equals(findFirstVolunteerCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        FindCommand findFirstVolunteerCommandCopy \u003d new FindCommand(firstVolunteerPredicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(findFirstVolunteerCommand.equals(findFirstVolunteerCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(findFirstVolunteerCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(findFirstVolunteerCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // different volunteer -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(findFirstVolunteerCommand.equals(findSecondVolunteerCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_zeroKeywords_noVolunteerFound() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_VOLUNTEERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.updateFilteredVolunteerList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredVolunteerList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void execute_multipleKeywords_multipleVolunteersFound() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_VOLUNTEERS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.updateFilteredVolunteerList(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredVolunteerList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private NameContainsKeywordsPredicate prepareVolunteerPredicate(String userInput) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 45,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showVolunteerAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(model, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 9,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstVolunteer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deleteFirstVolunteer(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deleteFirstVolunteer(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deleteFirstVolunteer(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deleteFirstVolunteer(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 10,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showVolunteerAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_VOLUNTEER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index lastVolunteerIndex \u003d Index.fromOneBased(model.getFilteredVolunteerList().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_VOLUNTEER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertExecutionSuccess(lastVolunteerIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredVolunteerList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(model, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(expectedModel, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(model, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteerAtIndex(expectedModel, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .getVolunteerList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_VOLUNTEER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // different volunteer -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code JumpToListRequestEvent} is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_VOLUNTEER_SUCCESS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                index.getOneBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * a {@code CommandException} is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 34,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SwitchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.model.Context.EVENT_CONTEXT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.model.Context.EVENT_CONTEXT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class SwitchCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void execute_switch_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(Context.EVENT_CONTEXT_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d String.format(SwitchCommand.MESSAGE_SUCCESS, EVENT_CONTEXT_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedModel.setCurrentContext(EVENT_CONTEXT_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertCommandSuccess(switchCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstVolunteer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalVolunteerAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deleteFirstVolunteer(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deleteFirstVolunteer(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deleteFirstVolunteer(expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deleteFirstVolunteer(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 8,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VOLUNTEER_NAME_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRIVER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer expectedVolunteer \u003d new VolunteerBuilder(BOB).withTags(VALID_TAG_STUDENT).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_STUDENT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new AddCommand(expectedVolunteer));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_STUDENT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new AddCommand(expectedVolunteer));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // multiple genders - last gender accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_AMY + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT, new AddCommand(expectedVolunteer));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // multiple birthdays - last birthday accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT, new AddCommand(expectedVolunteer));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT, new AddCommand(expectedVolunteer));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT, new AddCommand(expectedVolunteer));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT, new AddCommand(expectedVolunteer));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer expectedVolunteerMultipleTags \u003d new VolunteerBuilder(BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withTags(VALID_TAG_STUDENT, VALID_TAG_DRIVER).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + TAG_DESC_DRIVER + TAG_DESC_STUDENT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new AddCommand(expectedVolunteerMultipleTags));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer expectedVolunteer \u003d new VolunteerBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new AddCommand(expectedVolunteer));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_GENDER_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // missing birthday prefix"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + VALID_BIRTHDAY_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_GENDER_BOB + VALID_BIRTHDAY_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, INVALID_VOLUNTEER_NAME_DESC + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + TAG_DESC_DRIVER + TAG_DESC_STUDENT, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_GENDER_DESC + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + TAG_DESC_DRIVER + TAG_DESC_STUDENT, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // invalid birthday"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + INVALID_BIRTHDAY_DESC"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + TAG_DESC_DRIVER + TAG_DESC_STUDENT, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + TAG_DESC_DRIVER + TAG_DESC_STUDENT, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + TAG_DESC_DRIVER + TAG_DESC_STUDENT, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + TAG_DESC_DRIVER + TAG_DESC_STUDENT, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_STUDENT, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, INVALID_VOLUNTEER_NAME_DESC + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_DRIVER + TAG_DESC_STUDENT,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 111,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SWITCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.logic.commands.ExportCertCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.EditVolunteerDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void parseCommand_switch() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // TODO: Fix the parse for switch"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String cmd \u003d SwitchCommand.COMMAND_WORD + \" \" + PREFIX_SWITCH + Context.EVENT_CONTEXT_ID;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(cmd,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof SwitchCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteer \u003d new VolunteerBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                VolunteerUtil.getAddCommand(volunteer),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(new AddCommand(volunteer), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ClearCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + INDEX_FIRST_VOLUNTEER.getOneBased(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_VOLUNTEER), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteer \u003d new VolunteerBuilder().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditCommand.EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder(volunteer).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + INDEX_FIRST_VOLUNTEER.getOneBased() + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + VolunteerUtil.getEditVolunteerDescriptorDetails(descriptor),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_VOLUNTEER, descriptor), command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ExitCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ExitCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof HelpCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof HelpCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            parser.parseCommand(\"histories\", Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ListCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ListCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_VOLUNTEER), command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof RedoCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof RedoCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof UndoCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof UndoCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        parser.parseCommand(\"\", Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        parser.parseCommand(\"unknownCommand\", Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public void parseCommand_exportcert() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        ExportCertCommand command \u003d (ExportCertCommand) parser.parseCommand(ExportCertCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased(), Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertEquals(new ExportCertCommand(INDEX_FIRST_VOLUNTEER), command);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 50,
      "afiqlattif": 18,
      "sharan8": 7,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void parse_validArgs_returnsDeleteVolunteerCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_VOLUNTEER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 5,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VOLUNTEER_NAME_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRIVER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_VOLUNTEER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditVolunteerDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.EditVolunteerDescriptorBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_VOLUNTEER_NAME_DESC,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Gender.MESSAGE_GENDER_CONSTRAINTS); // invalid gender"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BIRTHDAY_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS); // invalid birthday"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_STUDENT + TAG_DESC_DRIVER + TAG_EMPTY,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_STUDENT + TAG_EMPTY + TAG_DESC_STUDENT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_STUDENT + TAG_DESC_DRIVER,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_VOLUNTEER_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + VALID_ADDRESS_AMY + VALID_PHONE_AMY + VALID_GENDER_AMY"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + VALID_BIRTHDAY_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_DRIVER"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY + TAG_DESC_STUDENT;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withGender(VALID_GENDER_AMY).withBirthday(VALID_BIRTHDAY_AMY)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withTags(VALID_TAG_DRIVER, VALID_TAG_STUDENT).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_VOLUNTEER;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // gender"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor \u003d new EditVolunteerDescriptorBuilder().withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // birthday"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor \u003d new EditVolunteerDescriptorBuilder().withBirthday(VALID_BIRTHDAY_AMY).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor \u003d new EditVolunteerDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor \u003d new EditVolunteerDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor \u003d new EditVolunteerDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_STUDENT;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor \u003d new EditVolunteerDescriptorBuilder().withTags(VALID_TAG_STUDENT).build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY + TAG_DESC_STUDENT"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_AMY + TAG_DESC_STUDENT + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withGender(VALID_GENDER_BOB).withBirthday(VALID_BIRTHDAY_BOB)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withTags(VALID_TAG_STUDENT, VALID_TAG_DRIVER).build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor \u003d new EditVolunteerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withGender(VALID_GENDER_BOB).withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_VOLUNTEER;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        EditVolunteerDescriptor descriptor \u003d new EditVolunteerDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 105,
      "-": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCertCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharan8"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.logic.commands.ExportCertCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharan8"
        },
        "content": "public class ExportCertCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private ExportCertCommandParser parser \u003d new ExportCertCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public void parse_validArgs_returnsExportCertCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String userInput \u003d Integer.toString(INDEX_FIRST_VOLUNTEER.getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertParseSuccess(parser, userInput, new ExportCertCommand(INDEX_FIRST_VOLUNTEER));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // no argument provided --\u003e fail"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCertCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // alphabet given instead of number --\u003e fail"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        userInput \u003d \" a\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCertCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharan8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharan8": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 3,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String INVALID_CONTEXTID \u003d \"3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"unknown\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String INVALID_BIRTHDAY \u003d \"44-44-44444\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#student\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String VALID_CONTEXTID \u003d \"e\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_GENDER \u003d \"f\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d \"01-01-1991\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"student\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"driver\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void parseCommandId_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCommandId(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void parseCommandId_invalidContext_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCommandId(INVALID_CONTEXTID));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void parseCommandId_validContext_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(VALID_CONTEXTID, ParserUtil.parseCommandId(VALID_CONTEXTID));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(INDEX_FIRST_VOLUNTEER, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(INDEX_FIRST_VOLUNTEER, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void parseGender_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGender((String) null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void parseGender_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseGender(INVALID_GENDER));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(VALID_GENDER));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void parseGender_validValueWithWhitespace_returnsTrimmedGender() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String genderWithWhitespace \u003d WHITESPACE + VALID_GENDER + WHITESPACE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(genderWithWhitespace));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void parseBirthday_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBirthday((String) null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void parseBirthday_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseBirthday(INVALID_BIRTHDAY));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void parseBirthday_validValueWithoutWhitespace_returnsBirthday() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedBirthday, ParserUtil.parseBirthday(VALID_BIRTHDAY));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void parseBirthday_validValueWithWhitespace_returnsTrimmedBirthday() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String birthdayWithWhitespace \u003d WHITESPACE + VALID_BIRTHDAY + WHITESPACE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedBirthday, ParserUtil.parseBirthday(birthdayWithWhitespace));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 17,
      "afiqlattif": 63,
      "-": 198
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * Test scope: similar to {@code DeleteVolunteerCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void parse_validArgs_returnsSelectVolunteerCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_VOLUNTEER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 6,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SwitchCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTEXT_INVALID_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTEXT_VALID_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class SwitchCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private SwitchCommandParser parser \u003d new SwitchCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // invalid contextId"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertParseFailure(parser, CONTEXT_INVALID_DESC, Context.MESSAGE_CONTEXT_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + CONTEXT_VALID_DESC,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_YOUTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HOUR_H2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_R2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRIVER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.BLOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.exceptions.DuplicateVolunteerException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getVolunteerList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getRecordList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        AddressBook newData \u003d getTypicalVolunteerAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    //// Volunteer Tests"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void resetData_withDuplicateVolunteers_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // Two volunteers with the same identity fields"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer editedBenson \u003d new VolunteerBuilder(BENSON).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withTags(VALID_TAG_DRIVER).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        List\u003cVolunteer\u003e newVolunteers \u003d Arrays.asList(BENSON, editedBenson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newVolunteers, null, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        thrown.expect(DuplicateVolunteerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void hasVolunteer_nullVolunteer_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        addressBook.hasVolunteer(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void hasVolunteer_volunteerNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(addressBook.hasVolunteer(BENSON));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void hasVolunteer_volunteerInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        addressBook.addVolunteer(BENSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(addressBook.hasVolunteer(BENSON));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void hasVolunteer_volunteerWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        addressBook.addVolunteer(BENSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer editedBenson \u003d new VolunteerBuilder(BENSON).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withTags(VALID_TAG_DRIVER).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(addressBook.hasVolunteer(editedBenson));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void getVolunteerList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        addressBook.getVolunteerList().remove(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    //// Event Tests"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void resetData_withDuplicateEvents_throwsDuplicateEventsException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // Two events with the same identity fields"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        List\u003cEvent\u003e newEvents \u003d Arrays.asList(BLOOD, editedEvent);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(null, newEvents, null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.hasEvent(null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_eventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(addressBook.hasEvent(BLOOD));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_eventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.addEvent(BLOOD);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(addressBook.hasEvent(BLOOD));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_eventWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.addEvent(BLOOD);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(addressBook.hasEvent(editedEvent));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void getEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.getEventList().remove(0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Record Tests"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void resetData_withDuplicateRecords_throwsDuplicateRecordException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // Two records with the same identity fields"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withHour(VALID_HOUR_H2).withRemark(VALID_REMARK_R2)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cRecord\u003e newRecords \u003d Arrays.asList(R1, editedRecord);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(null, null, newRecords);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(DuplicateRecordException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBook.hasRecord(null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_recordNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(addressBook.hasRecord(R1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_recordInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBook.addRecord(R1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(addressBook.hasRecord(R1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_recordWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBook.addRecord(R1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withHour(VALID_HOUR_H2).withRemark(VALID_REMARK_R2)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(addressBook.hasRecord(editedRecord));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void getRecordList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBook.getRecordList().remove(0);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * A stub ReadOnlyAddressBook whose volunteers list can violate interface constraints."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        private final ObservableList\u003cVolunteer\u003e volunteers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        private final ObservableList\u003cRecord\u003e records \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        AddressBookStub(Collection\u003cVolunteer\u003e volunteers, Collection\u003cEvent\u003e events,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        Collection\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            if (volunteers !\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                this.volunteers.setAll(volunteers);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (events !\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                this.events.setAll(events);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (records !\u003d null) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                this.records.setAll(records);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        public ObservableList\u003cVolunteer\u003e getVolunteerList() { return volunteers; }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return records;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 49,
      "iMarbles": 39,
      "afiqlattif": 37,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ContextTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class ContextTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Context(null, null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_invalidContextId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String invalidContextId \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Context(invalidContextId, invalidContextId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void isValidContext() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null contextId"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Context.isValidContextId(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // invalid contextId"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Context.isValidContextId(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Context.isValidContextId(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // valid contextId"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Context.isValidContextId(Context.EVENT_CONTEXT_ID));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Context.isValidContextId(Context.VOLUNTEER_CONTEXT_ID)); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VOLUNTEERS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.BLOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.YOUTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.CARL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.DANIEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Test switch"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setCurrentContext_nullContextId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.setCurrentContext(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setCurrentContext_validContextId_assertTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.setCurrentContext(Context.EVENT_CONTEXT_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(modelManager.getContextId(), Context.EVENT_CONTEXT_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(modelManager.getContextName(), Context.EVENT_CONTEXT_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.setCurrentContext(Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(modelManager.getContextId(), Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(modelManager.getContextName(), Context.VOLUNTEER_CONTEXT_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    //// Test volunteer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void hasVolunteer_nullVolunteer_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        modelManager.hasVolunteer(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void hasVolunteer_volunteerNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(modelManager.hasVolunteer(CARL));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void hasVolunteer_volunteerInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        modelManager.addVolunteer(CARL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(modelManager.hasVolunteer(CARL));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void getFilteredVolunteerList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        modelManager.getFilteredVolunteerList().remove(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Test event"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        modelManager.hasEvent(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_eventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(modelManager.hasEvent(BLOOD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_eventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        modelManager.addEvent(BLOOD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(modelManager.hasEvent(BLOOD));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.getFilteredEventList().remove(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Test Record"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.hasRecord(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_recordNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(modelManager.hasRecord(R1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_recordInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.addRecord(R1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(modelManager.hasRecord(R1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void getFilteredRecordList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.getFilteredRecordList().remove(0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .withVolunteer(CARL).withVolunteer(DANIEL)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .withEvent(BLOOD).withEvent(YOUTH)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .withRecord(R1).withRecord(R2).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String[] keywords \u003d CARL.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        modelManager.updateFilteredVolunteerList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        modelManager.updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 37,
      "Kratious": 19,
      "afiqlattif": 20,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withVolunteer(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withVolunteer(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withVolunteer(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 6,
      "-": 292
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null Date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // blank Date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"-12-2018\")); // missing day"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"31--2018\")); // missing month"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02-05-\")); // missing year"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"123-08-2008\")); // invalid day with 3 characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02-123-2008\")); // invalid month with 3 characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02-12-20081\")); // invalid year with 5 characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"42-08-2008\")); // invalid day with first character 4"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"39-08-2020\")); // invalid day with first character 3"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"05-13-2020\")); // invalid month more than 12"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02--05-2018\")); // double dash between day and month"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02-05--2018\")); // double dash between month and year"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02/05/2018\")); // invalid delimiter"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"29-02-2018\")); // non-leap year 2018"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-04-2018\")); // invalid day for April"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-06-2018\")); // invalid day for June"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-09-2018\")); // invalid day for September"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-11-2018\")); // invalid day for September"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // valid Date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"05-08-2018\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"01-01-2018\")); // first day of January"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"15-06-2018\")); // middle of June"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"31-12-2018\")); // last day of December"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"29-02-2020\")); // leap year 2020"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"29-02-2024\")); // leap year 2024"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Description.isValidDescription(\"To engage youths in humanitarianism.\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Singapore’s blood needs are currently shouldered by 1.8% of \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        + \"Singapore’s residential population. #BloodDonationDrive2018\")); // long description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_YOUTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_YOUTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_YOUTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_YOUTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_YOUTH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_YOUTH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_YOUTH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPETITION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.BLOOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.YOUTH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        event.getTags().remove(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidStartAndEndDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // BLOOD startDate - 02-10-2018"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // BLOOD endDate - 05-10-2018"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startDate before endDate -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.isValidStartAndEndDate(BLOOD.getStartDate(), BLOOD.getEndDate()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startDate same as endDate -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withStartDate(BLOOD.getEndDate().toString()).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(editedBlood.isValidStartAndEndDate(editedBlood.getStartDate(), editedBlood.getEndDate()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startDate more than endDate -\u003e returns IllegalArgumentException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventBuilder(BLOOD)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                                        .withStartDate(\"06-10-2018\").build());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidStartAndEndTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // BLOOD startTime - 11:30"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // BLOOD endTime - 17:30"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startTime before endTime -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.isValidStartAndEndTime(BLOOD.getStartTime(), BLOOD.getEndTime()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startTime same as endTime -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withStartTime(BLOOD.getEndTime().toString()).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(editedBlood.isValidStartAndEndTime(editedBlood.getStartTime(), editedBlood.getEndTime()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startTime more than endTime -\u003e returns IllegalArgumentException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventBuilder(BLOOD)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withStartTime(\"18:30\").build());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isSameEvent() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.isSameEvent(BLOOD));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.isSameEvent(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different location, start date and end date -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withLocation(VALID_LOCATION_YOUTH)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withStartDate(VALID_START_DATE_YOUTH).withEndDate(VALID_END_DATE_YOUTH).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.isSameEvent(editedBlood));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withName(VALID_NAME_YOUTH).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.isSameEvent(editedBlood));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // same name, same location, same start and end date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withStartTime(VALID_START_TIME_YOUTH).withEndTime(VALID_END_TIME_YOUTH)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.isSameEvent(editedBlood));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withLocation(VALID_LOCATION_YOUTH)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_YOUTH).withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.isSameEvent(editedBlood));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event bloodCopy \u003d new EventBuilder(BLOOD).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.equals(bloodCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.equals(BLOOD));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(5));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(YOUTH));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withName(VALID_NAME_YOUTH).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withLocation(VALID_LOCATION_YOUTH).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different startDate -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withStartDate(VALID_START_DATE_YOUTH).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different startTime -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withStartTime(VALID_START_TIME_YOUTH).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different endTime -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withEndTime(VALID_END_TIME_YOUTH).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different endTime -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/LocationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // invalid locations"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // valid locations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Location.isValidLocation(\"19 Tanglin Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Location.isValidLocation(\"5 Business Park IT BUILDING, 609914, Singapore\")); // long location"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Name.isValidName(\"charity*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Name.isValidName(\"charity.\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Name.isValidName(\"donation\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Name.isValidName(\"flag 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Name.isValidName(\"Flag Day\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Name.isValidName(\"Blood Donation Drive 2018\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 7,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/TimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null Time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // blank Time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\":59\")); // missing hour"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"1:\")); // missing minute"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"12:\")); // missing minute"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"25:00\")); // invalid hour over 24"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"13:60\")); // invalid minute over 59"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"1122\")); // no delimiter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"11-22\")); // wrong delimiter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"13:6\")); // invalid one character for minute"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // valid Time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Time.isValidTime(\"15:15\")); // 3:15 PM"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Time.isValidTime(\"9:00\")); // valid one character for hour"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Time.isValidTime(\"0:00\")); // 12:00 AM"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Time.isValidTime(\"23:59\")); // 11:59 PM"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/UniqueEventListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_YOUTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPETITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.BLOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.YOUTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class UniqueEventListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void contains_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void contains_eventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(uniqueEventList.contains(BLOOD));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void contains_eventInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(uniqueEventList.contains(BLOOD));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void contains_eventWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(uniqueEventList.contains(editedBlood));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void add_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void add_duplicateEvent_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_nullTargetEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(null, BLOOD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_nullEditedEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_targetEventNotInList_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, BLOOD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_editedEventIsSameEvent_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, BLOOD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        expectedUniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_editedEventHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, editedBlood);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        expectedUniqueEventList.add(editedBlood);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_editedEventHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, YOUTH);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        expectedUniqueEventList.add(YOUTH);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_editedEventHasNonUniqueIdentity_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(YOUTH);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, YOUTH);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void remove_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void remove_eventDoesNotExist_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.remove(BLOOD);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void remove_existingEvent_removesEvent() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.remove(BLOOD);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents_nullUniqueEventList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvents((UniqueEventList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents_uniqueEventList_replacesOwnListWithProvidedUniqueEventList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        expectedUniqueEventList.add(YOUTH);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvents(expectedUniqueEventList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvents((List\u003cEvent\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d Collections.singletonList(YOUTH);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvents(eventList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        expectedUniqueEventList.add(YOUTH);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents_listWithDuplicateEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        List\u003cEvent\u003e listWithDuplicateEvents \u003d Arrays.asList(BLOOD, BLOOD);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvents(listWithDuplicateEvents);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/HourTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class HourTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Hour(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_invalidHour_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String invalidHour \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Hour(invalidHour));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void isValidHour() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null hour"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Hour.isValidHour(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // invalid hour"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Hour.isValidHour(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Hour.isValidHour(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Hour.isValidHour(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Hour.isValidHour(\"0*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // valid hour"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Hour.isValidHour(\"1\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/RecordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENTID_E1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENTID_E2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HOUR_H2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_R2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VOLUNTEERID_V1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VOLUNTEERID_V2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RecordTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void isSameRecord() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(R1.isSameRecord(R1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.isSameRecord(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different eventId and volunteerId -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withEventId(VALID_EVENTID_E2)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .withVolunteerId(VALID_VOLUNTEERID_V2).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.isSameRecord(editedRecord));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // same eventId, same volunteerId -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        editedRecord \u003d new RecordBuilder(R1).withEventId(VALID_EVENTID_E1)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .withVolunteerId(VALID_VOLUNTEERID_V1).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(R1.isSameRecord(editedRecord));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // same eventId, same volunteerId, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        editedRecord \u003d new RecordBuilder(R1).withEventId(VALID_EVENTID_E1).withVolunteerId(VALID_VOLUNTEERID_V1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .withHour(VALID_HOUR_H2).withRemark(VALID_REMARK_R2).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(R1.isSameRecord(editedRecord));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record r1Copy \u003d new RecordBuilder(R1).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(R1.equals(r1Copy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(R1.equals(R1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(5));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different Record -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(R2));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different eventId -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withEventId(VALID_EVENTID_E2).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(editedRecord));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different volunteerId -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        editedRecord \u003d new RecordBuilder(R1).withVolunteerId(VALID_VOLUNTEERID_V2).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(editedRecord));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different hour -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        editedRecord \u003d new RecordBuilder(R1).withHour(VALID_HOUR_H2).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(editedRecord));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        editedRecord \u003d new RecordBuilder(R1).withRemark(VALID_REMARK_R2).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(editedRecord));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/RemarkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Remark(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_invalidRemark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String invalidRemark \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Remark(invalidRemark));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void isValidRemark() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null Remark"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // invalid Remark"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Remark.isValidRemark(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Remark.isValidRemark(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // valid Remark"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"Emcee\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"To be the emcee for event\")); // long remark"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/UniqueRecordListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HOUR_H2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_R2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class UniqueRecordListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final UniqueRecordList uniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void contains_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void contains_recordNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(uniqueRecordList.contains(R1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void contains_recordInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(uniqueRecordList.contains(R1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void contains_recordWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withHour(VALID_HOUR_H2).withRemark(VALID_REMARK_R2)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(uniqueRecordList.contains(editedRecord));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void add_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void add_duplicateRecord_throwsDuplicateRecordException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(DuplicateRecordException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_nullTargetRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(null, R1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_nullEditedRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_targetRecordNotInList_throwsRecordNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(RecordNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, R1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_editedRecordIsSameRecord_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, R1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedUniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_editedRecordHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withHour(VALID_HOUR_H2).withRemark(VALID_REMARK_R2)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, editedRecord);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedUniqueRecordList.add(editedRecord);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_editedRecordHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, R2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedUniqueRecordList.add(R2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_editedRecordHasNonUniqueIdentity_throwsDuplicateRecordException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(DuplicateRecordException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, R2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void remove_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void remove_recordDoesNotExist_throwsRecordNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(RecordNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.remove(R1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void remove_existingRecord_removesRecord() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.remove(R1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords_nullUniqueRecordList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecords((UniqueRecordList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords_uniqueRecordList_replacesOwnListWithProvidedUniqueRecordList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedUniqueRecordList.add(R2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecords(expectedUniqueRecordList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecords((List\u003cRecord\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cRecord\u003e recordList \u003d Collections.singletonList(R2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecords(recordList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedUniqueRecordList.add(R2);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords_listWithDuplicateRecords_throwsDuplicateRecordException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cRecord\u003e listWithDuplicateRecords \u003d Arrays.asList(R1, R1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(DuplicateRecordException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecords(listWithDuplicateRecords);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        AddressBook original \u003d getTypicalVolunteerAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 2,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.storage.XmlAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.YOUTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class XmlAdaptedEventTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_NAME \u003d \" Bl@@d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \"123\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_END_DATE \u003d \"456\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_START_TIME \u003d \"789\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_END_TIME \u003d \"555\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final int VALID_ID \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_NAME \u003d YOUTH.getName().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_LOCATION \u003d YOUTH.getLocation().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_START_DATE \u003d YOUTH.getStartDate().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_END_DATE \u003d YOUTH.getEndDate().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_START_TIME \u003d YOUTH.getStartTime().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_END_TIME \u003d YOUTH.getEndTime().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d YOUTH.getDescription().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d YOUTH.getTags().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_validEventDetails_returnsEvent() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(YOUTH);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(YOUTH, event.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_ID, INVALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_ID, null, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_ID, VALID_NAME, INVALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Location.MESSAGE_LOCATION_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_ID, VALID_NAME, null, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_ID, VALID_NAME, VALID_LOCATION, INVALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_ID, VALID_NAME, VALID_LOCATION, null, VALID_END_DATE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_ID, VALID_NAME, VALID_LOCATION, VALID_START_DATE, INVALID_END_DATE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_ID, VALID_NAME, VALID_LOCATION, VALID_START_DATE, null,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_ID, VALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        INVALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Time.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_ID, VALID_NAME, VALID_LOCATION, VALID_START_DATE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_END_DATE, null, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_ID, VALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, INVALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Time.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_ID, VALID_NAME, VALID_LOCATION, VALID_START_DATE,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_END_DATE, VALID_START_TIME, null, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_ID, VALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, INVALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_DESCRIPTION_CONSTRAINTS;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_ID, VALID_NAME, VALID_LOCATION, VALID_START_DATE,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_END_DATE, VALID_START_TIME, VALID_END_TIME, null, VALID_TAGS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_ID, VALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, invalidTags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 177
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedRecordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.storage.XmlAdaptedRecord.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.event.EventId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.VolunteerId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class XmlAdaptedRecordTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final int INVALID_EVENTID \u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final int INVALID_VOLUNTEERID \u003d -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String INVALID_HOUR \u003d \"1abc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String INVALID_REMARK \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final int VALID_EVENTID \u003d R2.getEventId().id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final int VALID_VOLUNTEERID \u003d R2.getVolunteerId().id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String VALID_HOUR \u003d R2.getHour().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String VALID_REMARK \u003d R2.getRemark().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_validRecordDetails_returnsRecord() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d new XmlAdaptedRecord(R1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(R1, record.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_invalidEventId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                new XmlAdaptedRecord(INVALID_EVENTID, VALID_VOLUNTEERID, VALID_HOUR, VALID_REMARK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d EventId.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_invalidVolunteerId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                new XmlAdaptedRecord(VALID_EVENTID, INVALID_VOLUNTEERID, VALID_HOUR, VALID_REMARK);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d VolunteerId.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_invalidHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                new XmlAdaptedRecord(VALID_EVENTID, VALID_VOLUNTEERID, INVALID_HOUR, VALID_REMARK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d Hour.MESSAGE_HOUR_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_nullHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d new XmlAdaptedRecord(VALID_EVENTID, VALID_VOLUNTEERID, null, VALID_REMARK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_invalidRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                new XmlAdaptedRecord(VALID_EVENTID, VALID_VOLUNTEERID, VALID_HOUR, INVALID_REMARK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d Remark.MESSAGE_REMARK_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_nullRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d new XmlAdaptedRecord(VALID_EVENTID, VALID_VOLUNTEERID, VALID_HOUR, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 77,
      "afiqlattif": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedVolunteerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.storage.XmlAdaptedVolunteer.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class XmlAdaptedVolunteerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"unknown\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String INVALID_BIRTHDAY \u003d \"44-44-4444\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final int VALID_VOLUNTEERID \u003d BENSON.getVolunteerId().id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_validVolunteerDetails_returnsVolunteer() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d new XmlAdaptedVolunteer(BENSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(BENSON, volunteer.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        INVALID_NAME, VALID_GENDER, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                null, VALID_GENDER, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_NAME, INVALID_GENDER, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_GENDER_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                VALID_NAME, null, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_invalidBirthday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_NAME, VALID_GENDER, INVALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_nullBirthday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                VALID_NAME, VALID_GENDER, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Birthday.class.getSimpleName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_NAME, VALID_GENDER, VALID_BIRTHDAY, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                VALID_NAME, VALID_GENDER, VALID_BIRTHDAY, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_NAME, VALID_GENDER, VALID_BIRTHDAY, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                VALID_NAME, VALID_GENDER, VALID_BIRTHDAY, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_NAME, VALID_GENDER, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                VALID_NAME, VALID_GENDER, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, volunteer::toModelType);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlAdaptedVolunteer volunteer \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                new XmlAdaptedVolunteer(VALID_VOLUNTEERID,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        VALID_NAME, VALID_GENDER, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, volunteer::toModelType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteerAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void readAddressBook_invalidAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        readAddressBook(\"invalidVolunteerAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void readAddressBook_invalidAndValidAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        readAddressBook(\"invalidAndValidVolunteerAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        AddressBook original \u003d getTypicalVolunteerAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        original.addVolunteer(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        original.removeVolunteer(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        original.addVolunteer(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 12,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.TypicalEvents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.TypicalRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.TypicalVolunteers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final Path TYPICAL_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEventsAddressBook.xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final Path INVALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventAddressBook.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final Path DUPLICATE_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventAddressBook.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final Path TYPICAL_VOLUNTEERS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalVolunteersAddressBook.xml\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final Path INVALID_VOLUNTEER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidVolunteerAddressBook.xml\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final Path DUPLICATE_VOLUNTEER_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateVolunteerAddressBook.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final Path TYPICAL_RECORDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRecordsAddressBook.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final Path INVALID_RECORD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRecordAddressBook.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final Path DUPLICATE_RECORD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRecordAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    //// Volunteer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_typicalVolunteersFile_success() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_VOLUNTEERS_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        AddressBook typicalVolunteersAddressBook \u003d TypicalVolunteers.getTypicalVolunteerAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(addressBookFromFile, typicalVolunteersAddressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_invalidVolunteerFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_VOLUNTEER_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void toModelType_duplicateVolunteers_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_VOLUNTEER_FILE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Events"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_typicalEventsFile_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_EVENTS_FILE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        AddressBook typicalEventsAddressBook \u003d TypicalEvents.getTypicalAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(addressBookFromFile, typicalEventsAddressBook);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidEventFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_EVENT_FILE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_duplicateEvents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_EVENT_FILE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Records"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_typicalRecordsFile_success() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_RECORDS_FILE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddressBook typicalRecordsAddressBook \u003d TypicalRecords.getTypicalAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(addressBookFromFile, typicalRecordsAddressBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_invalidRecordFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_RECORD_FILE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_duplicateRecords_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_RECORD_FILE,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 15,
      "iMarbles": 32,
      "afiqlattif": 14,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Adds a new {@code Volunteer} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public AddressBookBuilder withVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        addressBook.addVolunteer(volunteer);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Adds a new {@code Event} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public AddressBookBuilder withEvent(Event event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.addEvent(event);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Adds a new {@code Record} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public AddressBookBuilder withRecord(Record record) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBook.addRecord(record);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 9,
      "iMarbles": 9,
      "afiqlattif": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditVolunteerDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditVolunteerDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * A utility class to help with building EditVolunteerDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class EditVolunteerDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private EditVolunteerDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditVolunteerDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor \u003d new EditVolunteerDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditVolunteerDescriptorBuilder(EditVolunteerDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.descriptor \u003d new EditVolunteerDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns an {@code EditVolunteerDescriptor} with fields containing {@code volunteer}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditVolunteerDescriptorBuilder(Volunteer volunteer) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor \u003d new EditVolunteerDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setVolunteerId(volunteer.getVolunteerId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setName(volunteer.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setGender(volunteer.getGender());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setBirthday(volunteer.getBirthday());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setPhone(volunteer.getPhone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setEmail(volunteer.getEmail());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setAddress(volunteer.getAddress());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setTags(volunteer.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Name} of the {@code EditVolunteerDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditVolunteerDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditVolunteerDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditVolunteerDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Birthday} of the {@code EditVolunteerDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditVolunteerDescriptorBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setBirthday(new Birthday(birthday));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditVolunteerDescriptor} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditVolunteerDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Email} of the {@code EditVolunteerDescriptor} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditVolunteerDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPVolunteerDescriptor} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditVolunteerDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditVolunteerDescriptor}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditVolunteerDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public EditVolunteerDescriptor build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * A utility class to help with building Event objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Blood Donation Drive 2018\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"750E, Chai Chee Road, #08-111\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"02-10-2018\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"05-10-2018\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"11:30\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"17:30\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Donation drive for blood.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Time startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Time endTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startDate \u003d new Date(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endDate \u003d new Date(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startTime \u003d new Time(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endTime \u003d new Time(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        name \u003d eventToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        location \u003d eventToCopy.getLocation();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startDate \u003d eventToCopy.getStartDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endDate \u003d eventToCopy.getEndDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startTime \u003d eventToCopy.getStartTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endTime \u003d eventToCopy.getEndTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(eventToCopy.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the {@code Name} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Event} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the {@code Location} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the start {@code Date} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the end {@code Date} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the start {@code Time} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startTime \u003d new Time(startTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the end {@code Time} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the {@code Description} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Event(name, location, startDate, endDate, startTime, endTime, description, tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecordBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.event.EventId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Remark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.VolunteerId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RecordBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final int DEFAULT_EVENTID \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final int DEFAULT_VOLUNTEERID \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String DEFAULT_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Emcee for event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private EventId eventId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private VolunteerId volunteerId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private Hour hour;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        eventId \u003d new EventId(DEFAULT_EVENTID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerId \u003d new VolunteerId(DEFAULT_VOLUNTEERID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        hour \u003d new Hour(DEFAULT_HOUR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Initializes the RecordBuilder with the data of {@code recordoCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder(Record recordToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        eventId \u003d recordToCopy.getEventId();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        volunteerId \u003d recordToCopy.getVolunteerId();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        hour \u003d recordToCopy.getHour();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        remark \u003d recordToCopy.getRemark();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets the {@code EventId} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder withEventId(int eventId) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.eventId \u003d new EventId(eventId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets the {@code VolunteerId} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder withVolunteerId(int volunteerId) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.volunteerId \u003d new VolunteerId(volunteerId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets the {@code Hour} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder withHour(String hour) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.hour \u003d new Hour(hour);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets the {@code Remark} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @return record"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Record build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new Record(eventId, volunteerId, hour, remark);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 75,
      "afiqlattif": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns the middle index of the volunteer in the {@code model}\u0027s volunteer list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return Index.fromOneBased(model.getFilteredVolunteerList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns the last index of the volunteer in the {@code model}\u0027s volunteer list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return Index.fromOneBased(model.getFilteredVolunteerList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns the volunteer in the {@code model}\u0027s volunteer list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static Volunteer getVolunteer(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return model.getFilteredVolunteerList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_YOUTH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_YOUTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_YOUTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_YOUTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_YOUTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_YOUTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_YOUTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPETITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Event BLOOD \u003d new EventBuilder().withName(\"Blood Donation Drive 2018\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withLocation(\"750E, Chai Chee Road, #08-111\").withStartDate(\"02-10-2018\").withEndDate(\"05-10-2018\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withStartTime(\"11:30\").withEndTime(\"17:30\").withDescription(\"Donation drive for blood.\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withTags(\"Public\", \"Donation\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    // Manually added - Event\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Event YOUTH \u003d new EventBuilder().withName(VALID_NAME_YOUTH)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withLocation(VALID_LOCATION_YOUTH).withStartDate(VALID_START_DATE_YOUTH).withEndDate(VALID_END_DATE_YOUTH)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withStartTime(VALID_START_TIME_YOUTH).withEndTime(VALID_END_TIME_YOUTH)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_YOUTH).withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical events."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            ab.addEvent(event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BLOOD, YOUTH));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Index INDEX_FIRST_VOLUNTEER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Index INDEX_SECOND_VOLUNTEER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Index INDEX_THIRD_VOLUNTEER \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRecords.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * A utility class containing a list of {@code Records} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class TypicalRecords {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Record R1 \u003d new RecordBuilder().withEventId(1)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withVolunteerId(1)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withHour(\"1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withRemark(\"Emcee\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Record R2 \u003d new RecordBuilder().withEventId(2)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withVolunteerId(2)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withHour(\"2\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withRemark(\"Delivery man\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Record R3 \u003d new RecordBuilder().withEventId(2)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withVolunteerId(1)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withHour(\"2\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withRemark(\"Food delivery\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private TypicalRecords() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical records."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (Record record : getTypicalRecords()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            ab.addRecord(record);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static List\u003cRecord\u003e getTypicalRecords() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(R1, R2, R3));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalVolunteers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRIVER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * A utility class containing a list of {@code Volunteer} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class TypicalVolunteers {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Volunteer ALICE \u003d new VolunteerBuilder().withVolunteerId(1)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withGender(\"f\").withBirthday(\"21-08-1986\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withTags(\"student\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Volunteer BENSON \u003d new VolunteerBuilder().withVolunteerId(2)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withGender(\"m\").withBirthday(\"29-09-1988\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withTags(\"driver\", \"student\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Volunteer CARL \u003d new VolunteerBuilder().withVolunteerId(3)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withName(\"Carl Kurz\").withGender(\"m\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withBirthday(\"27-05-1990\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Volunteer DANIEL \u003d new VolunteerBuilder().withVolunteerId(4)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withName(\"Daniel Meier\").withGender(\"m\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withBirthday(\"31-10-1993\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"student\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Volunteer ELLE \u003d new VolunteerBuilder().withVolunteerId(5)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withName(\"Elle Meyer\").withGender(\"f\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withBirthday(\"13-11-1994\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Volunteer FIONA \u003d new VolunteerBuilder().withVolunteerId(6)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withName(\"Fiona Kunz\").withGender(\"f\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withBirthday(\"12-01-1995\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Volunteer GEORGE \u003d new VolunteerBuilder().withVolunteerId(7)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withName(\"George Best\").withGender(\"m\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withBirthday(\"14-01-1995\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Volunteer HOON \u003d new VolunteerBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withVolunteerId(8)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withName(\"Hoon Meier\").withGender(\"m\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withBirthday(\"03-04-1996\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Volunteer IDA \u003d new VolunteerBuilder()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withVolunteerId(9)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withName(\"Ida Mueller\").withGender(\"f\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withBirthday(\"15-04-1996\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    // Manually added - Volunteer\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Volunteer AMY \u003d new VolunteerBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withVolunteerId(10)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withBirthday(VALID_BIRTHDAY_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withTags(VALID_TAG_STUDENT).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final Volunteer BOB \u003d new VolunteerBuilder()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withVolunteerId(11)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withName(VALID_NAME_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withBirthday(VALID_BIRTHDAY_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            .withTags(VALID_TAG_DRIVER, VALID_TAG_STUDENT).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private TypicalVolunteers() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical volunteers."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static AddressBook getTypicalVolunteerAddressBook() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        for (Volunteer volunteer : getTypicalVolunteers()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            ab.addVolunteer(volunteer);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static List\u003cVolunteer\u003e getTypicalVolunteers() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalVolunteersWithRecords.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharan8"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.BLOOD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.record.Remark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharan8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharan8"
        },
        "content": " * A utility class containing {@code Volunteer} objects with {@code records}, to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharan8"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharan8"
        },
        "content": "public class TypicalVolunteersWithRecords {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private TypicalVolunteersWithRecords() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical {@code volunteers} and their {@code records}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    public static AddressBook getTypicalVolunteersWithRecordsAddressBook() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Use only a single event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        ab.addEvent(BLOOD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        // Add 1 record for each typical volunteer for this single event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        for (Volunteer volunteer : TypicalVolunteers.getTypicalVolunteers()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            ab.addVolunteer(volunteer);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharan8"
        },
        "content": "            ab.addRecord(new Record("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                    BLOOD.getEventId(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                    volunteer.getVolunteerId(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                    new Hour(\"1\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                    new Remark(\"Participant\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharan8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharan8": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/VolunteerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.VolunteerId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final int DEFAULT_VOLUNTEERID \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"f\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String DEFAULT_BIRTHDAY \u003d \"01-02-1993\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private VolunteerId volunteerId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Birthday birthday;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerId \u003d new VolunteerId(DEFAULT_VOLUNTEERID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Initializes the VolunteerBuilder with the data of {@code volunteerToCopy}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerBuilder(Volunteer volunteerToCopy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerId \u003d volunteerToCopy.getVolunteerId();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        name \u003d volunteerToCopy.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        gender \u003d volunteerToCopy.getGender();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        birthday \u003d volunteerToCopy.getBirthday();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        phone \u003d volunteerToCopy.getPhone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        email \u003d volunteerToCopy.getEmail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        address \u003d volunteerToCopy.getAddress();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(volunteerToCopy.getTags());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code VolunteerId} of the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerBuilder withVolunteerId(int volunteerId) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.volunteerId \u003d new VolunteerId(volunteerId);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Name} of the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerBuilder withName(String name) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Gender} of the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Birthday} of the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.birthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Address} of the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Phone} of the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Sets the {@code Email} of the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public Volunteer build() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return new Volunteer(name, gender, birthday, phone, email, address, tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/VolunteerUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditVolunteerDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " * A utility class for Volunteer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns an add command string for adding the {@code volunteer}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static String getAddCommand(Volunteer volunteer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getVolunteerDetails(volunteer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns the part of command string for the given {@code volunteer}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static String getVolunteerDetails(Volunteer volunteer) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        sb.append(PREFIX_NAME + volunteer.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        sb.append(PREFIX_GENDER + volunteer.getGender().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        sb.append(PREFIX_BIRTHDAY + volunteer.getBirthday().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        sb.append(PREFIX_PHONE + volunteer.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        sb.append(PREFIX_EMAIL + volunteer.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        sb.append(PREFIX_ADDRESS + volunteer.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteer.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns the part of command string for the given {@code EditVolunteerDescriptor}\u0027s details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static String getEditVolunteerDescriptorDetails(EditVolunteerDescriptor descriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.getBirthday().ifPresent(birthday -\u003e sb.append(PREFIX_BIRTHDAY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(birthday.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_VOLUNTEERS_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            new AddressBookBuilder().withVolunteer(ALICE).build());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private static final int INITIAL_TOTAL_VOLUNTEERS \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITIAL_TOTAL_VOLUNTEERS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                String.format(TOTAL_VOLUNTEERS_STATUS, INITIAL_TOTAL_VOLUNTEERS));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                String.format(TOTAL_VOLUNTEERS_STATUS, EVENT_STUB.data.getVolunteerList().size()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}, and the total volunteers matches that of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * {@code expectedTotalVolunteersStatus}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                                        String expectedTotalVolunteersStatus) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertEquals(expectedTotalVolunteersStatus, statusBarFooterHandle.getTotalVolunteersStatus());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 3,
      "sharan8": 14,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/VolunteerCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysVolunteer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import guitests.guihandles.VolunteerCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerWithNoTags \u003d new VolunteerBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        VolunteerCard volunteerCard \u003d new VolunteerCard(volunteerWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        uiPartRule.setUiPart(volunteerCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCardDisplay(volunteerCard, volunteerWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerWithTags \u003d new VolunteerBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerCard \u003d new VolunteerCard(volunteerWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        uiPartRule.setUiPart(volunteerCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCardDisplay(volunteerCard, volunteerWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteer \u003d new VolunteerBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        VolunteerCard volunteerCard \u003d new VolunteerCard(volunteer, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // same volunteer, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        VolunteerCard copy \u003d new VolunteerCard(volunteer, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(volunteerCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(volunteerCard.equals(volunteerCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(volunteerCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(volunteerCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // different volunteer, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer differentVolunteer \u003d new VolunteerBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(volunteerCard.equals(new VolunteerCard(differentVolunteer, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // same volunteer, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(volunteerCard.equals(new VolunteerCard(volunteer, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Asserts that {@code volunteerCard} displays the details of {@code expectedVolunteer} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void assertCardDisplay(VolunteerCard volunteerCard, Volunteer expectedVolunteer, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        VolunteerCardHandle volunteerCardHandle \u003d new VolunteerCardHandle(volunteerCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", volunteerCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // verify volunteer details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCardDisplaysVolunteer(expectedVolunteer, volunteerCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/VolunteerListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteers;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysVolunteer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import guitests.guihandles.VolunteerCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import guitests.guihandles.VolunteerListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "public class VolunteerListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final ObservableList\u003cVolunteer\u003e TYPICAL_VOLUNTEERS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            FXCollections.observableList(getTypicalVolunteers());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            new JumpToListRequestEvent(INDEX_SECOND_VOLUNTEER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private VolunteerListPanelHandle volunteerListPanelHandle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        initUi(TYPICAL_VOLUNTEERS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_VOLUNTEERS.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            volunteerListPanelHandle.navigateToCard(TYPICAL_VOLUNTEERS.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            Volunteer expectedVolunteer \u003d TYPICAL_VOLUNTEERS.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            VolunteerCardHandle actualCard \u003d volunteerListPanelHandle.getVolunteerCardHandle(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            assertCardDisplaysVolunteer(expectedVolunteer, actualCard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        initUi(TYPICAL_VOLUNTEERS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        VolunteerCardHandle expectedVolunteer \u003d volunteerListPanelHandle"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                .getVolunteerCardHandle(INDEX_SECOND_VOLUNTEER.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        VolunteerCardHandle selectedVolunteer \u003d volunteerListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCardEquals(expectedVolunteer, selectedVolunteer);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code VolunteerListPanel} requires lesser than"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        ObservableList\u003cVolunteer\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }, \"Creation and deletion of volunteer cards exceeded time limit\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns a list of persons containing {@code volunteerCount} persons that is used to populate the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code VolunteerListPanel}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private ObservableList\u003cVolunteer\u003e createBackingList(int volunteerCount) throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithVolunteers(volunteerCount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getVolunteerList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns a .xml file containing {@code volunteerCount} volunteer. This file will be deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * when the JVM terminates."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Path createXmlFileWithVolunteers(int volunteerCount) throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        for (int i \u003d 0; i \u003c volunteerCount; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            builder.append(\"\u003cvolunteers\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            builder.append(\"\u003cvolunteerId\u003e\").append(i + 1).append(\"\u003c/volunteerId\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            builder.append(\"\u003cgender\u003em\u003c/gender\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            builder.append(\"\u003cbirthday\u003e01-01-1991\u003c/birthday\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            builder.append(\"\u003c/volunteers\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Path manyVolunteersFile \u003d TEST_DATA_FOLDER.resolve(\"manyVolunteers.xml\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        FileUtil.createFile(manyVolunteersFile);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        FileUtil.writeToFile(manyVolunteersFile, builder.toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        manyVolunteersFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return manyVolunteersFile;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Initializes {@code volunteerListPanelHandle} with a {@code VolunteerListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code VolunteerListPanel}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void initUi(ObservableList\u003cVolunteer\u003e backingList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        VolunteerListPanel volunteerListPanel \u003d new VolunteerListPanel(backingList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        uiPartRule.setUiPart(volunteerListPanel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerListPanelHandle \u003d new VolunteerListPanelHandle(getChildNode(volunteerListPanel.getRoot(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                VolunteerListPanelHandle.VOLUNTEER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import guitests.guihandles.VolunteerCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import guitests.guihandles.VolunteerListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static void assertCardEquals(VolunteerCardHandle expectedCard, VolunteerCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedVolunteer}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static void assertCardDisplaysVolunteer(Volunteer expectedVolunteer, VolunteerCardHandle actualCard) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedVolunteer.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedVolunteer.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedVolunteer.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedVolunteer.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Asserts that the list in {@code volunteerListPanelHandle} displays the details of {@code volunteers} correctly"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * and in the correct order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static void assertListMatching(VolunteerListPanelHandle volunteerListPanelHandle, Volunteer... volunteers) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        for (int i \u003d 0; i \u003c volunteers.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            volunteerListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            assertCardDisplaysVolunteer(volunteers[i], volunteerListPanelHandle.getVolunteerCardHandle(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Asserts that the list in {@code volunteerListPanelHandle} displays the details of {@code volunteers}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * correctly and in the correct order."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static void assertListMatching(VolunteerListPanelHandle volunteerListPanelHandle,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                                          List\u003cVolunteer\u003e volunteers) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertListMatching(volunteerListPanelHandle, volunteers.toArray(new Volunteer[0]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Asserts the size of the list in {@code volunteerListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static void assertListSize(VolunteerListPanelHandle volunteerListPanelHandle, int size) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int numberOfPeople \u003d volunteerListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 24,
      "-": 49
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.ALICE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.CARL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.HOON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.IDA;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerUtil;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a volunteer without tags to a non-empty address book, command with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "         * leading spaces and trailing spaces -\u003e added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer toAdd \u003d AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + GENDER_DESC_AMY + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_AMY + \" \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + \"   \" + TAG_DESC_STUDENT + \" \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.addVolunteer(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a volunteer with all fields same as another volunteer in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        toAdd \u003d new VolunteerBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_STUDENT;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a volunteer with all fields same as another volunteer in the address book except phone and email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        toAdd \u003d new VolunteerBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d VolunteerUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deleteAllVolunteers();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a volunteer with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_STUDENT + PHONE_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + NAME_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_DRIVER + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a volunteer, missing tags -\u003e added */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: filters the volunteer list before adding -\u003e added */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* ---------------------- Perform add operation while a volunteer card is selected ------------------------- */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: selects first card in the volunteer list, add a volunteer -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        selectVolunteer(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a duplicate volunteer -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d VolunteerUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a duplicate volunteer except with different gender -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        toAdd \u003d new VolunteerBuilder(HOON).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d VolunteerUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a duplicate volunteer except with different birthday -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        toAdd \u003d new VolunteerBuilder(HOON).withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d VolunteerUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a duplicate volunteer except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        toAdd \u003d new VolunteerBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d VolunteerUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a duplicate volunteer except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        toAdd \u003d new VolunteerBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d VolunteerUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a duplicate volunteer except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        toAdd \u003d new VolunteerBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d VolunteerUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: add a duplicate volunteer except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d VolunteerUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: missing gender -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: missing birthday -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d \"adds \" + VolunteerUtil.getVolunteerDetails(toAdd);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: invalid gender -\u003e rejected */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_GENDER_DESC + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: invalid birthday -\u003e rejected */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + INVALID_BIRTHDAY_DESC + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 4. {@code Storage} and {@code VolunteerListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void assertCommandSuccess(Volunteer toAdd) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(VolunteerUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Volunteer)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void assertCommandSuccess(String command, Volunteer toAdd) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.addVolunteer(toAdd);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 2. {@code Storage} and {@code VolunteerListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Volunteer)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 4. {@code Storage} and {@code VolunteerListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 127,
      "sharan8": 1,
      "-": 167
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharan8"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_VOLUNTEERS_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import guitests.guihandles.VolunteerListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.TypicalVolunteers;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return TypicalVolunteers.getTypicalVolunteerAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public VolunteerListPanelHandle getVolunteerListPanel() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return mainWindowHandle.getVolunteerListPanel();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    protected void showAllVolunteers() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(getModel().getAddressBook().getVolunteerList().size(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                getModel().getFilteredVolunteerList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    protected void showVolunteersWithName(String keyword) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(getModel().getFilteredVolunteerList().size()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                \u003c getModel().getAddressBook().getVolunteerList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Selects the volunteer at {@code index} of the displayed list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    protected void selectVolunteer(Index index) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(index.getZeroBased(), getVolunteerListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    protected void deleteAllVolunteers() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getVolunteerList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same volunteer objects as {@code expectedModel}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * and the volunteer list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertListMatching(getVolunteerListPanel(), expectedModel.getFilteredVolunteerList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code VolunteerListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        statusBarFooterHandle.rememberTotalVolunteersStatus();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        getVolunteerListPanel().rememberSelectedVolunteerCard();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * of the previously selected volunteer."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(getVolunteerListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the volunteer in the volunteer list panel at"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @see VolunteerListPanelHandle#isSelectedVolunteerCardChanged()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        getVolunteerListPanel().navigateToCard(getVolunteerListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String selectedCardName \u003d getVolunteerListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getVolunteerListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the volunteer list panel remain unchanged."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @see VolunteerListPanelHandle#isSelectedVolunteerCardChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(getVolunteerListPanel().isSelectedVolunteerCardChanged());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertFalse(handle.isTotalVolunteersStatusChanged());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location and the total volunteer"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * list remains the same."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertFalse(handle.isTotalVolunteersStatusChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sharan8"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * Asserts that the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, and total volunteers was changed to match the total"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     * number of volunteers in the address book, while the save location remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sharan8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sharan8"
        },
        "content": "    protected void assertStatusBarChangedExceptSaveLocation() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        final int totalVolunteers \u003d testApp.getModel().getAddressBook().getVolunteerList().size();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertEquals(String.format(TOTAL_VOLUNTEERS_STATUS, totalVolunteers), handle.getTotalVolunteersStatus());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertListMatching(getVolunteerListPanel(), getModel().getFilteredVolunteerList());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertEquals(String.format(TOTAL_VOLUNTEERS_STATUS, getModel().getAddressBook().getVolunteerList().size()),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sharan8"
        },
        "content": "                getStatusBarFooter().getTotalVolunteersStatus());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 35,
      "sharan8": 20,
      "-": 235
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: selects first card in volunteer list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        selectVolunteer(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: filters the volunteer list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 5,
      "sharan8": 1,
      "-": 95
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_VOLUNTEER_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TestUtil.getVolunteer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: delete the first volunteer in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_VOLUNTEER.getOneBased()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + \"       \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer deletedVolunteer \u003d removeVolunteer(expectedModel, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_VOLUNTEER_SUCCESS, deletedVolunteer);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: delete the last volunteer in the list -\u003e deleted */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: undo deleting the last volunteer in the list -\u003e last volunteer restored */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: redo deleting the last volunteer in the list -\u003e last volunteer deleted again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        removeVolunteer(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: delete the middle volunteer in the list -\u003e deleted */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: filtered volunteer list, delete index within bounds of address book and volunteer list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index index \u003d INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredVolunteerList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: filtered volunteer list, delete index within bounds of address book but out of bounds of volunteer list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getVolunteerList().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* ------------------- Performing delete operation while a volunteer card is selected ---------------------- */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: delete the selected volunteer -\u003e volunteer list panel selects the volunteer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            before the deleted volunteer */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showAllVolunteers();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        selectVolunteer(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deletedVolunteer \u003d removeVolunteer(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_VOLUNTEER_SUCCESS, deletedVolunteer);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                getModel().getAddressBook().getVolunteerList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Removes the {@code Volunteer} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @return the removed volunteer"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private Volunteer removeVolunteer(Model model, Index index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer targetVolunteer \u003d getVolunteer(model, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.deleteVolunteer(targetVolunteer);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return targetVolunteer;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Deletes the volunteer at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer deletedVolunteer \u003d removeVolunteer(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_VOLUNTEER_SUCCESS, deletedVolunteer);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sharan8"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 42,
      "sharan8": 1,
      "-": 152
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRIVER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VOLUNTEERS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Birthday;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.testutil.VolunteerUtil;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Index index \u003d INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + GENDER_DESC_BOB + \" \" + BIRTHDAY_DESC_BOB + \" \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + \" \" + TAG_DESC_DRIVER + \" \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer editedVolunteer \u003d new VolunteerBuilder(BOB).withTags(VALID_TAG_DRIVER).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(command, index, editedVolunteer);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: undo editing the last volunteer in the list -\u003e last volunteer restored */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: redo editing the last volunteer in the list -\u003e last volunteer edited again */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.updateVolunteer("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                getModel().getFilteredVolunteerList().get(INDEX_FIRST_VOLUNTEER.getZeroBased()), editedVolunteer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: edit a volunteer with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT + TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: edit a volunteer with new values same as another volunteer\u0027s values"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            but with different name -\u003e edited */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(getModel().getAddressBook().getVolunteerList().contains(BOB));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        index \u003d INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertNotEquals(getModel().getFilteredVolunteerList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT + TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        editedVolunteer \u003d new VolunteerBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(command, index, editedVolunteer);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: edit a volunteer with new values same as another volunteer\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        index \u003d INDEX_SECOND_VOLUNTEER;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT + TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        editedVolunteer \u003d new VolunteerBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(command, index, editedVolunteer);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        index \u003d INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer volunteerToEdit \u003d getModel().getFilteredVolunteerList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        editedVolunteer \u003d new VolunteerBuilder(volunteerToEdit).withTags().build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(command, index, editedVolunteer);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: filtered volunteer list, edit index within bounds of address book and volunteer list -\u003e edited */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        index \u003d INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredVolunteerList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        volunteerToEdit \u003d getModel().getFilteredVolunteerList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        editedVolunteer \u003d new VolunteerBuilder(volunteerToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(command, index, editedVolunteer);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: filtered volunteer list, edit index within bounds of address book but out of bounds of volunteer list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getVolunteerList().size();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* --------------------- Performing edit operation while a volunteer card is selected ---------------------- */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: selects first card in the volunteer list, edit a volunteer -\u003e edited,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "         *   card selection remains unchanged but browser url changes"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showAllVolunteers();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        index \u003d INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        selectVolunteer(index);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_STUDENT;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        // browser\u0027s url is updated to reflect the new volunteer\u0027s name"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredVolunteerList().size() + 1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: invalid gender -\u003e rejected */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + INVALID_GENDER_DESC, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: invalid birthday -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + INVALID_BIRTHDAY_DESC, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: edit a volunteer with new values same as another volunteer\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        executeCommand(VolunteerUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(getModel().getAddressBook().getVolunteerList().contains(BOB));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        index \u003d INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(getModel().getFilteredVolunteerList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT + TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: edit a volunteer with new values same as another volunteer\u0027s values"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: edit a volunteer with new values same as another volunteer\u0027s values"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_STUDENT + TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: edit a volunteer with new values same as another volunteer\u0027s values"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            but with different gender -\u003e rejected */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT + TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: edit a volunteer with new values same as another volunteer\u0027s values"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            but with different birthday -\u003e rejected */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT + TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: edit a volunteer with new values same as another volunteer\u0027s values"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT + TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: edit a volunteer with new values same as another volunteer\u0027s values"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT + TAG_DESC_DRIVER;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Volunteer, Index)} except that"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Volunteer, Index)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Volunteer editedVolunteer) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedVolunteer, null);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the volunteer at index {@code toEdit} being"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * updated to values specified {@code editedVolunteer}.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Volunteer editedVolunteer,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.updateVolunteer(expectedModel.getFilteredVolunteerList().get(toEdit.getZeroBased()),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                editedVolunteer);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_VOLUNTEER_SUCCESS, editedVolunteer), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        expectedModel.updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 164,
      "-": 180
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VOLUNTEERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: repeat previous find command where volunteer list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find volunteer where volunteer list is not displaying the volunteer we are finding"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "            -\u003e 1 volunteer found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 volunteer found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(getModel().getAddressBook().getVolunteerList().contains(BENSON));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find volunteer in address book, keyword is same as name but of different case -\u003e 1 volunteer found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find volunteer in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find volunteer in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find volunteer not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find phone number of volunteer in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find address of volunteer in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find email of volunteer in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find tags of volunteer in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find while a volunteer is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showAllVolunteers();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        selectVolunteer(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertFalse(getVolunteerListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: find volunteer in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deleteAllVolunteers();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * box displays {@code Messages#MESSAGE_VOLUNTEERS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                MESSAGE_VOLUNTEERS_LISTED_OVERVIEW, expectedModel.getFilteredVolunteerList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 26,
      "-": 170
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        getVolunteerListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertListMatching(getVolunteerListPanel(), getModel().getFilteredVolunteerList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 5,
      "-": 95
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static final Predicate\u003cVolunteer\u003e PREDICATE_MATCHING_NO_VOLUNTEERS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cVolunteer\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Optional\u003cPredicate\u003cVolunteer\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        model.updateFilteredVolunteerList(predicate.orElse(PREDICATE_MATCHING_NO_VOLUNTEERS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    public static void setFilteredList(Model model, Volunteer... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Volunteer} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "    private static Predicate\u003cVolunteer\u003e getPredicateMatching(Volunteer other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        return volunteer -\u003e volunteer.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        Volunteer[] expectedList \u003d SampleDataUtil.getSampleVolunteers();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertListMatching(getVolunteerListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 3,
      "-": 48
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_VOLUNTEER_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VOLUNTEER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: select the first card in the volunteer list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_VOLUNTEER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: select the last card in the volunteer list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: select the middle card in the volunteer list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: filtered volunteer list, select index within bounds of address book but out of bounds of volunteer list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        showVolunteersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getVolunteerList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        /* Case: filtered volunteer list, select index within bounds of address book and volunteer list -\u003e selected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredVolunteerList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredVolunteerList().size() + 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        deleteAllVolunteers();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VOLUNTEER.getOneBased(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected volunteer.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 4. {@code Storage} and {@code VolunteerListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "                MESSAGE_SELECT_VOLUNTEER_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getVolunteerListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afiqlattif"
        },
        "content": "     * 4. {@code Storage} and {@code VolunteerListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afiqlattif": 27,
      "-": 129
    }
  }
]
